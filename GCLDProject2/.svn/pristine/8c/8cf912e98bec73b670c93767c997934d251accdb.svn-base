// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Character.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Character.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GS2C_CharacterCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_CharacterCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ChangeBattleCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ChangeBattleCharacter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_BattleCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_BattleCharacter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_CharacterStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_CharacterStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_CharacterUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_CharacterUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_UseItemsToTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_UseItemsToTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_UpgradeQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_UpgradeQuality_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Show_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Show_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Dinner_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Dinner_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Dinner_Resp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Dinner_Resp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Character_2eproto() {
  protobuf_AddDesc_Character_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Character.proto");
  GOOGLE_CHECK(file != NULL);
  GS2C_CharacterCreate_descriptor_ = file->message_type(0);
  static const int GS2C_CharacterCreate_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, isjuexing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, juxingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, cur_city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, dungeon_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, combatgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, isincombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, combattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, is_fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, isfakechar_),
  };
  GS2C_CharacterCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_CharacterCreate_descriptor_,
      GS2C_CharacterCreate::default_instance_,
      GS2C_CharacterCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_CharacterCreate));
  GS2C_ChangeBattleCharacter_descriptor_ = file->message_type(1);
  static const int GS2C_ChangeBattleCharacter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChangeBattleCharacter, is_zhaomu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChangeBattleCharacter, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChangeBattleCharacter, battle_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChangeBattleCharacter, crossret_),
  };
  GS2C_ChangeBattleCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ChangeBattleCharacter_descriptor_,
      GS2C_ChangeBattleCharacter::default_instance_,
      GS2C_ChangeBattleCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChangeBattleCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChangeBattleCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ChangeBattleCharacter));
  GS2C_BattleCharacter_descriptor_ = file->message_type(2);
  static const int GS2C_BattleCharacter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleCharacter, battle_array_),
  };
  GS2C_BattleCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_BattleCharacter_descriptor_,
      GS2C_BattleCharacter::default_instance_,
      GS2C_BattleCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_BattleCharacter));
  GS2C_CharacterStorage_descriptor_ = file->message_type(3);
  static const int GS2C_CharacterStorage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterStorage, characters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterStorage, battle_character_),
  };
  GS2C_CharacterStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_CharacterStorage_descriptor_,
      GS2C_CharacterStorage::default_instance_,
      GS2C_CharacterStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_CharacterStorage));
  GS2C_CharacterUpdate_descriptor_ = file->message_type(4);
  static const int GS2C_CharacterUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, update_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, juxingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, cur_city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, isincombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, combatgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, isfakechar_),
  };
  GS2C_CharacterUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_CharacterUpdate_descriptor_,
      GS2C_CharacterUpdate::default_instance_,
      GS2C_CharacterUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CharacterUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_CharacterUpdate));
  C2GS_UseItemsToTarget_descriptor_ = file->message_type(5);
  static const int C2GS_UseItemsToTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseItemsToTarget, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseItemsToTarget, nr_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseItemsToTarget, card_type_),
  };
  C2GS_UseItemsToTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_UseItemsToTarget_descriptor_,
      C2GS_UseItemsToTarget::default_instance_,
      C2GS_UseItemsToTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseItemsToTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseItemsToTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_UseItemsToTarget));
  C2GS_UpgradeQuality_descriptor_ = file->message_type(6);
  static const int C2GS_UpgradeQuality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UpgradeQuality, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UpgradeQuality, material_char_ids_),
  };
  C2GS_UpgradeQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_UpgradeQuality_descriptor_,
      C2GS_UpgradeQuality::default_instance_,
      C2GS_UpgradeQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UpgradeQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UpgradeQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_UpgradeQuality));
  GS2C_Combat_Show_Data_descriptor_ = file->message_type(7);
  static const int GS2C_Combat_Show_Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Show_Data, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Show_Data, soldierlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Show_Data, soldiercnt_),
  };
  GS2C_Combat_Show_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Show_Data_descriptor_,
      GS2C_Combat_Show_Data::default_instance_,
      GS2C_Combat_Show_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Show_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Show_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Show_Data));
  GS2C_Dinner_Data_descriptor_ = file->message_type(8);
  static const int GS2C_Dinner_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dinner_Data, dinner_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dinner_Data, next_time_),
  };
  GS2C_Dinner_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Dinner_Data_descriptor_,
      GS2C_Dinner_Data::default_instance_,
      GS2C_Dinner_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dinner_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dinner_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Dinner_Data));
  GS2C_Dinner_Resp_descriptor_ = file->message_type(9);
  static const int GS2C_Dinner_Resp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dinner_Resp, ret_),
  };
  GS2C_Dinner_Resp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Dinner_Resp_descriptor_,
      GS2C_Dinner_Resp::default_instance_,
      GS2C_Dinner_Resp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dinner_Resp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dinner_Resp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Dinner_Resp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Character_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_CharacterCreate_descriptor_, &GS2C_CharacterCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ChangeBattleCharacter_descriptor_, &GS2C_ChangeBattleCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_BattleCharacter_descriptor_, &GS2C_BattleCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_CharacterStorage_descriptor_, &GS2C_CharacterStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_CharacterUpdate_descriptor_, &GS2C_CharacterUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_UseItemsToTarget_descriptor_, &C2GS_UseItemsToTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_UpgradeQuality_descriptor_, &C2GS_UpgradeQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Show_Data_descriptor_, &GS2C_Combat_Show_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Dinner_Data_descriptor_, &GS2C_Dinner_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Dinner_Resp_descriptor_, &GS2C_Dinner_Resp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Character_2eproto() {
  delete GS2C_CharacterCreate::default_instance_;
  delete GS2C_CharacterCreate_reflection_;
  delete GS2C_ChangeBattleCharacter::default_instance_;
  delete GS2C_ChangeBattleCharacter_reflection_;
  delete GS2C_BattleCharacter::default_instance_;
  delete GS2C_BattleCharacter_reflection_;
  delete GS2C_CharacterStorage::default_instance_;
  delete GS2C_CharacterStorage_reflection_;
  delete GS2C_CharacterUpdate::default_instance_;
  delete GS2C_CharacterUpdate_reflection_;
  delete C2GS_UseItemsToTarget::default_instance_;
  delete C2GS_UseItemsToTarget_reflection_;
  delete C2GS_UpgradeQuality::default_instance_;
  delete C2GS_UpgradeQuality_reflection_;
  delete GS2C_Combat_Show_Data::default_instance_;
  delete GS2C_Combat_Show_Data_reflection_;
  delete GS2C_Dinner_Data::default_instance_;
  delete GS2C_Dinner_Data_reflection_;
  delete GS2C_Dinner_Resp::default_instance_;
  delete GS2C_Dinner_Resp_reflection_;
}

void protobuf_AddDesc_Character_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Character.proto\022\002pb\032\017CommomDef.proto\"\236"
    "\002\n\024GS2C_CharacterCreate\022\n\n\002id\030\001 \002(\r\022\017\n\007p"
    "rotoID\030\002 \001(\r\022\035\n\006values\030\003 \001(\0132\r.pb.Int32L"
    "ist\022\021\n\tisjuexing\030\004 \001(\010\022\022\n\njuxingtime\030\005 \001"
    "(\004\022\017\n\007quality\030\006 \001(\r\022\023\n\013cur_city_id\030\007 \001(\r"
    "\022\025\n\rdungeon_owner\030\010 \001(\004\022\025\n\rcombatgroupID"
    "\030\t \001(\r\022\022\n\nisInCombat\030\n \001(\010\022\022\n\ncombatType"
    "\030\013 \001(\r\022\023\n\013is_fighting\030\014 \001(\010\022\022\n\nisFakeCha"
    "r\030\r \001(\010\"x\n\032GS2C_ChangeBattleCharacter\022\021\n"
    "\tis_zhaomu\030\001 \002(\010\022\017\n\007card_id\030\002 \001(\r\022$\n\014bat"
    "tle_array\030\003 \001(\0132\016.pb.Uint32List\022\020\n\010cross"
    "ret\030\004 \001(\010\"<\n\024GS2C_BattleCharacter\022$\n\014bat"
    "tle_array\030\001 \001(\0132\016.pb.Uint32List\"y\n\025GS2C_"
    "CharacterStorage\022,\n\ncharacters\030\001 \003(\0132\030.p"
    "b.GS2C_CharacterCreate\0222\n\020battle_charact"
    "er\030\002 \001(\0132\030.pb.GS2C_BattleCharacter\"\266\001\n\024G"
    "S2C_CharacterUpdate\022\n\n\002id\030\001 \002(\r\022*\n\rupdat"
    "e_values\030\002 \001(\0132\023.pb.Int32ListUpdate\022\022\n\nj"
    "uxingtime\030\003 \001(\004\022\023\n\013cur_city_id\030\004 \001(\r\022\022\n\n"
    "isInCombat\030\005 \001(\r\022\025\n\rcombatGroupId\030\006 \001(\r\022"
    "\022\n\nisFakeChar\030\007 \001(\010\"O\n\025C2GS_UseItemsToTa"
    "rget\022\021\n\ttarget_id\030\001 \002(\r\022\020\n\010NR_cards\030\002 \002("
    "\r\022\021\n\tcard_type\030\003 \001(\r\"Q\n\023C2GS_UpgradeQual"
    "ity\022\017\n\007char_id\030\001 \002(\r\022)\n\021material_char_id"
    "s\030\002 \001(\0132\016.pb.Uint32List\"O\n\025GS2C_Combat_S"
    "how_Data\022\017\n\007char_id\030\001 \002(\r\022\021\n\tsoldierLv\030\002"
    " \001(\r\022\022\n\nsoldierCnt\030\003 \003(\r\"9\n\020GS2C_Dinner_"
    "Data\022\022\n\ndinner_num\030\001 \002(\r\022\021\n\tnext_time\030\002 "
    "\002(\r\"\037\n\020GS2C_Dinner_Resp\022\013\n\003ret\030\001 \002(\r", 1156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Character.proto", &protobuf_RegisterTypes);
  GS2C_CharacterCreate::default_instance_ = new GS2C_CharacterCreate();
  GS2C_ChangeBattleCharacter::default_instance_ = new GS2C_ChangeBattleCharacter();
  GS2C_BattleCharacter::default_instance_ = new GS2C_BattleCharacter();
  GS2C_CharacterStorage::default_instance_ = new GS2C_CharacterStorage();
  GS2C_CharacterUpdate::default_instance_ = new GS2C_CharacterUpdate();
  C2GS_UseItemsToTarget::default_instance_ = new C2GS_UseItemsToTarget();
  C2GS_UpgradeQuality::default_instance_ = new C2GS_UpgradeQuality();
  GS2C_Combat_Show_Data::default_instance_ = new GS2C_Combat_Show_Data();
  GS2C_Dinner_Data::default_instance_ = new GS2C_Dinner_Data();
  GS2C_Dinner_Resp::default_instance_ = new GS2C_Dinner_Resp();
  GS2C_CharacterCreate::default_instance_->InitAsDefaultInstance();
  GS2C_ChangeBattleCharacter::default_instance_->InitAsDefaultInstance();
  GS2C_BattleCharacter::default_instance_->InitAsDefaultInstance();
  GS2C_CharacterStorage::default_instance_->InitAsDefaultInstance();
  GS2C_CharacterUpdate::default_instance_->InitAsDefaultInstance();
  C2GS_UseItemsToTarget::default_instance_->InitAsDefaultInstance();
  C2GS_UpgradeQuality::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Show_Data::default_instance_->InitAsDefaultInstance();
  GS2C_Dinner_Data::default_instance_->InitAsDefaultInstance();
  GS2C_Dinner_Resp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Character_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Character_2eproto {
  StaticDescriptorInitializer_Character_2eproto() {
    protobuf_AddDesc_Character_2eproto();
  }
} static_descriptor_initializer_Character_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GS2C_CharacterCreate::kIdFieldNumber;
const int GS2C_CharacterCreate::kProtoIDFieldNumber;
const int GS2C_CharacterCreate::kValuesFieldNumber;
const int GS2C_CharacterCreate::kIsjuexingFieldNumber;
const int GS2C_CharacterCreate::kJuxingtimeFieldNumber;
const int GS2C_CharacterCreate::kQualityFieldNumber;
const int GS2C_CharacterCreate::kCurCityIdFieldNumber;
const int GS2C_CharacterCreate::kDungeonOwnerFieldNumber;
const int GS2C_CharacterCreate::kCombatgroupIDFieldNumber;
const int GS2C_CharacterCreate::kIsInCombatFieldNumber;
const int GS2C_CharacterCreate::kCombatTypeFieldNumber;
const int GS2C_CharacterCreate::kIsFightingFieldNumber;
const int GS2C_CharacterCreate::kIsFakeCharFieldNumber;
#endif  // !_MSC_VER

GS2C_CharacterCreate::GS2C_CharacterCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_CharacterCreate::InitAsDefaultInstance() {
  values_ = const_cast< ::pb::Int32List*>(&::pb::Int32List::default_instance());
}

GS2C_CharacterCreate::GS2C_CharacterCreate(const GS2C_CharacterCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_CharacterCreate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  protoid_ = 0u;
  values_ = NULL;
  isjuexing_ = false;
  juxingtime_ = GOOGLE_ULONGLONG(0);
  quality_ = 0u;
  cur_city_id_ = 0u;
  dungeon_owner_ = GOOGLE_ULONGLONG(0);
  combatgroupid_ = 0u;
  isincombat_ = false;
  combattype_ = 0u;
  is_fighting_ = false;
  isfakechar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_CharacterCreate::~GS2C_CharacterCreate() {
  SharedDtor();
}

void GS2C_CharacterCreate::SharedDtor() {
  if (this != default_instance_) {
    delete values_;
  }
}

void GS2C_CharacterCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_CharacterCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_CharacterCreate_descriptor_;
}

const GS2C_CharacterCreate& GS2C_CharacterCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

GS2C_CharacterCreate* GS2C_CharacterCreate::default_instance_ = NULL;

GS2C_CharacterCreate* GS2C_CharacterCreate::New() const {
  return new GS2C_CharacterCreate;
}

void GS2C_CharacterCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    protoid_ = 0u;
    if (has_values()) {
      if (values_ != NULL) values_->::pb::Int32List::Clear();
    }
    isjuexing_ = false;
    juxingtime_ = GOOGLE_ULONGLONG(0);
    quality_ = 0u;
    cur_city_id_ = 0u;
    dungeon_owner_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    combatgroupid_ = 0u;
    isincombat_ = false;
    combattype_ = 0u;
    is_fighting_ = false;
    isfakechar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_CharacterCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_protoID;
        break;
      }

      // optional uint32 protoID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protoid_)));
          set_has_protoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // optional .pb.Int32List values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isjuexing;
        break;
      }

      // optional bool isjuexing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isjuexing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjuexing_)));
          set_has_isjuexing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_juxingtime;
        break;
      }

      // optional uint64 juxingtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_juxingtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &juxingtime_)));
          set_has_juxingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_city_id;
        break;
      }

      // optional uint32 cur_city_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_city_id_)));
          set_has_cur_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dungeon_owner;
        break;
      }

      // optional uint64 dungeon_owner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dungeon_owner_)));
          set_has_dungeon_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_combatgroupID;
        break;
      }

      // optional uint32 combatgroupID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combatgroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combatgroupid_)));
          set_has_combatgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isInCombat;
        break;
      }

      // optional bool isInCombat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isincombat_)));
          set_has_isincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_combatType;
        break;
      }

      // optional uint32 combatType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combattype_)));
          set_has_combattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_fighting;
        break;
      }

      // optional bool is_fighting = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fighting_)));
          set_has_is_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isFakeChar;
        break;
      }

      // optional bool isFakeChar = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFakeChar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfakechar_)));
          set_has_isfakechar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_CharacterCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 protoID = 2;
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->protoid(), output);
  }

  // optional .pb.Int32List values = 3;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(), output);
  }

  // optional bool isjuexing = 4;
  if (has_isjuexing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isjuexing(), output);
  }

  // optional uint64 juxingtime = 5;
  if (has_juxingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->juxingtime(), output);
  }

  // optional uint32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->quality(), output);
  }

  // optional uint32 cur_city_id = 7;
  if (has_cur_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_city_id(), output);
  }

  // optional uint64 dungeon_owner = 8;
  if (has_dungeon_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->dungeon_owner(), output);
  }

  // optional uint32 combatgroupID = 9;
  if (has_combatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->combatgroupid(), output);
  }

  // optional bool isInCombat = 10;
  if (has_isincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isincombat(), output);
  }

  // optional uint32 combatType = 11;
  if (has_combattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->combattype(), output);
  }

  // optional bool is_fighting = 12;
  if (has_is_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_fighting(), output);
  }

  // optional bool isFakeChar = 13;
  if (has_isfakechar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isfakechar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_CharacterCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 protoID = 2;
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->protoid(), target);
  }

  // optional .pb.Int32List values = 3;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(), target);
  }

  // optional bool isjuexing = 4;
  if (has_isjuexing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isjuexing(), target);
  }

  // optional uint64 juxingtime = 5;
  if (has_juxingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->juxingtime(), target);
  }

  // optional uint32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->quality(), target);
  }

  // optional uint32 cur_city_id = 7;
  if (has_cur_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_city_id(), target);
  }

  // optional uint64 dungeon_owner = 8;
  if (has_dungeon_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->dungeon_owner(), target);
  }

  // optional uint32 combatgroupID = 9;
  if (has_combatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->combatgroupid(), target);
  }

  // optional bool isInCombat = 10;
  if (has_isincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isincombat(), target);
  }

  // optional uint32 combatType = 11;
  if (has_combattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->combattype(), target);
  }

  // optional bool is_fighting = 12;
  if (has_is_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_fighting(), target);
  }

  // optional bool isFakeChar = 13;
  if (has_isfakechar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isfakechar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_CharacterCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 protoID = 2;
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protoid());
    }

    // optional .pb.Int32List values = 3;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values());
    }

    // optional bool isjuexing = 4;
    if (has_isjuexing()) {
      total_size += 1 + 1;
    }

    // optional uint64 juxingtime = 5;
    if (has_juxingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->juxingtime());
    }

    // optional uint32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 cur_city_id = 7;
    if (has_cur_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_city_id());
    }

    // optional uint64 dungeon_owner = 8;
    if (has_dungeon_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dungeon_owner());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 combatgroupID = 9;
    if (has_combatgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combatgroupid());
    }

    // optional bool isInCombat = 10;
    if (has_isincombat()) {
      total_size += 1 + 1;
    }

    // optional uint32 combatType = 11;
    if (has_combattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combattype());
    }

    // optional bool is_fighting = 12;
    if (has_is_fighting()) {
      total_size += 1 + 1;
    }

    // optional bool isFakeChar = 13;
    if (has_isfakechar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_CharacterCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_CharacterCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_CharacterCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_CharacterCreate::MergeFrom(const GS2C_CharacterCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_values()) {
      mutable_values()->::pb::Int32List::MergeFrom(from.values());
    }
    if (from.has_isjuexing()) {
      set_isjuexing(from.isjuexing());
    }
    if (from.has_juxingtime()) {
      set_juxingtime(from.juxingtime());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_cur_city_id()) {
      set_cur_city_id(from.cur_city_id());
    }
    if (from.has_dungeon_owner()) {
      set_dungeon_owner(from.dungeon_owner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combatgroupid()) {
      set_combatgroupid(from.combatgroupid());
    }
    if (from.has_isincombat()) {
      set_isincombat(from.isincombat());
    }
    if (from.has_combattype()) {
      set_combattype(from.combattype());
    }
    if (from.has_is_fighting()) {
      set_is_fighting(from.is_fighting());
    }
    if (from.has_isfakechar()) {
      set_isfakechar(from.isfakechar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_CharacterCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_CharacterCreate::CopyFrom(const GS2C_CharacterCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_CharacterCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_CharacterCreate::Swap(GS2C_CharacterCreate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(protoid_, other->protoid_);
    std::swap(values_, other->values_);
    std::swap(isjuexing_, other->isjuexing_);
    std::swap(juxingtime_, other->juxingtime_);
    std::swap(quality_, other->quality_);
    std::swap(cur_city_id_, other->cur_city_id_);
    std::swap(dungeon_owner_, other->dungeon_owner_);
    std::swap(combatgroupid_, other->combatgroupid_);
    std::swap(isincombat_, other->isincombat_);
    std::swap(combattype_, other->combattype_);
    std::swap(is_fighting_, other->is_fighting_);
    std::swap(isfakechar_, other->isfakechar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_CharacterCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_CharacterCreate_descriptor_;
  metadata.reflection = GS2C_CharacterCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ChangeBattleCharacter::kIsZhaomuFieldNumber;
const int GS2C_ChangeBattleCharacter::kCardIdFieldNumber;
const int GS2C_ChangeBattleCharacter::kBattleArrayFieldNumber;
const int GS2C_ChangeBattleCharacter::kCrossretFieldNumber;
#endif  // !_MSC_VER

GS2C_ChangeBattleCharacter::GS2C_ChangeBattleCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ChangeBattleCharacter::InitAsDefaultInstance() {
  battle_array_ = const_cast< ::pb::Uint32List*>(&::pb::Uint32List::default_instance());
}

GS2C_ChangeBattleCharacter::GS2C_ChangeBattleCharacter(const GS2C_ChangeBattleCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ChangeBattleCharacter::SharedCtor() {
  _cached_size_ = 0;
  is_zhaomu_ = false;
  card_id_ = 0u;
  battle_array_ = NULL;
  crossret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ChangeBattleCharacter::~GS2C_ChangeBattleCharacter() {
  SharedDtor();
}

void GS2C_ChangeBattleCharacter::SharedDtor() {
  if (this != default_instance_) {
    delete battle_array_;
  }
}

void GS2C_ChangeBattleCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ChangeBattleCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ChangeBattleCharacter_descriptor_;
}

const GS2C_ChangeBattleCharacter& GS2C_ChangeBattleCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

GS2C_ChangeBattleCharacter* GS2C_ChangeBattleCharacter::default_instance_ = NULL;

GS2C_ChangeBattleCharacter* GS2C_ChangeBattleCharacter::New() const {
  return new GS2C_ChangeBattleCharacter;
}

void GS2C_ChangeBattleCharacter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_zhaomu_ = false;
    card_id_ = 0u;
    if (has_battle_array()) {
      if (battle_array_ != NULL) battle_array_->::pb::Uint32List::Clear();
    }
    crossret_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ChangeBattleCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_zhaomu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_zhaomu_)));
          set_has_is_zhaomu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_id;
        break;
      }

      // optional uint32 card_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
          set_has_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_array;
        break;
      }

      // optional .pb.Uint32List battle_array = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crossret;
        break;
      }

      // optional bool crossret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crossret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crossret_)));
          set_has_crossret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ChangeBattleCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_zhaomu = 1;
  if (has_is_zhaomu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_zhaomu(), output);
  }

  // optional uint32 card_id = 2;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_id(), output);
  }

  // optional .pb.Uint32List battle_array = 3;
  if (has_battle_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_array(), output);
  }

  // optional bool crossret = 4;
  if (has_crossret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->crossret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ChangeBattleCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_zhaomu = 1;
  if (has_is_zhaomu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_zhaomu(), target);
  }

  // optional uint32 card_id = 2;
  if (has_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_id(), target);
  }

  // optional .pb.Uint32List battle_array = 3;
  if (has_battle_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_array(), target);
  }

  // optional bool crossret = 4;
  if (has_crossret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->crossret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ChangeBattleCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_zhaomu = 1;
    if (has_is_zhaomu()) {
      total_size += 1 + 1;
    }

    // optional uint32 card_id = 2;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_id());
    }

    // optional .pb.Uint32List battle_array = 3;
    if (has_battle_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_array());
    }

    // optional bool crossret = 4;
    if (has_crossret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ChangeBattleCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ChangeBattleCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ChangeBattleCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ChangeBattleCharacter::MergeFrom(const GS2C_ChangeBattleCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_zhaomu()) {
      set_is_zhaomu(from.is_zhaomu());
    }
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_battle_array()) {
      mutable_battle_array()->::pb::Uint32List::MergeFrom(from.battle_array());
    }
    if (from.has_crossret()) {
      set_crossret(from.crossret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ChangeBattleCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ChangeBattleCharacter::CopyFrom(const GS2C_ChangeBattleCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ChangeBattleCharacter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_ChangeBattleCharacter::Swap(GS2C_ChangeBattleCharacter* other) {
  if (other != this) {
    std::swap(is_zhaomu_, other->is_zhaomu_);
    std::swap(card_id_, other->card_id_);
    std::swap(battle_array_, other->battle_array_);
    std::swap(crossret_, other->crossret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ChangeBattleCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ChangeBattleCharacter_descriptor_;
  metadata.reflection = GS2C_ChangeBattleCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_BattleCharacter::kBattleArrayFieldNumber;
#endif  // !_MSC_VER

GS2C_BattleCharacter::GS2C_BattleCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_BattleCharacter::InitAsDefaultInstance() {
  battle_array_ = const_cast< ::pb::Uint32List*>(&::pb::Uint32List::default_instance());
}

GS2C_BattleCharacter::GS2C_BattleCharacter(const GS2C_BattleCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_BattleCharacter::SharedCtor() {
  _cached_size_ = 0;
  battle_array_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_BattleCharacter::~GS2C_BattleCharacter() {
  SharedDtor();
}

void GS2C_BattleCharacter::SharedDtor() {
  if (this != default_instance_) {
    delete battle_array_;
  }
}

void GS2C_BattleCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_BattleCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_BattleCharacter_descriptor_;
}

const GS2C_BattleCharacter& GS2C_BattleCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

GS2C_BattleCharacter* GS2C_BattleCharacter::default_instance_ = NULL;

GS2C_BattleCharacter* GS2C_BattleCharacter::New() const {
  return new GS2C_BattleCharacter;
}

void GS2C_BattleCharacter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battle_array()) {
      if (battle_array_ != NULL) battle_array_->::pb::Uint32List::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_BattleCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Uint32List battle_array = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_BattleCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Uint32List battle_array = 1;
  if (has_battle_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_array(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_BattleCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Uint32List battle_array = 1;
  if (has_battle_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_array(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_BattleCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Uint32List battle_array = 1;
    if (has_battle_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_array());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_BattleCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_BattleCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_BattleCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_BattleCharacter::MergeFrom(const GS2C_BattleCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_array()) {
      mutable_battle_array()->::pb::Uint32List::MergeFrom(from.battle_array());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_BattleCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_BattleCharacter::CopyFrom(const GS2C_BattleCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_BattleCharacter::IsInitialized() const {

  return true;
}

void GS2C_BattleCharacter::Swap(GS2C_BattleCharacter* other) {
  if (other != this) {
    std::swap(battle_array_, other->battle_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_BattleCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_BattleCharacter_descriptor_;
  metadata.reflection = GS2C_BattleCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_CharacterStorage::kCharactersFieldNumber;
const int GS2C_CharacterStorage::kBattleCharacterFieldNumber;
#endif  // !_MSC_VER

GS2C_CharacterStorage::GS2C_CharacterStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_CharacterStorage::InitAsDefaultInstance() {
  battle_character_ = const_cast< ::pb::GS2C_BattleCharacter*>(&::pb::GS2C_BattleCharacter::default_instance());
}

GS2C_CharacterStorage::GS2C_CharacterStorage(const GS2C_CharacterStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_CharacterStorage::SharedCtor() {
  _cached_size_ = 0;
  battle_character_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_CharacterStorage::~GS2C_CharacterStorage() {
  SharedDtor();
}

void GS2C_CharacterStorage::SharedDtor() {
  if (this != default_instance_) {
    delete battle_character_;
  }
}

void GS2C_CharacterStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_CharacterStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_CharacterStorage_descriptor_;
}

const GS2C_CharacterStorage& GS2C_CharacterStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

GS2C_CharacterStorage* GS2C_CharacterStorage::default_instance_ = NULL;

GS2C_CharacterStorage* GS2C_CharacterStorage::New() const {
  return new GS2C_CharacterStorage;
}

void GS2C_CharacterStorage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_battle_character()) {
      if (battle_character_ != NULL) battle_character_->::pb::GS2C_BattleCharacter::Clear();
    }
  }
  characters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_CharacterStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_CharacterCreate characters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_characters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_characters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_characters;
        if (input->ExpectTag(18)) goto parse_battle_character;
        break;
      }

      // optional .pb.GS2C_BattleCharacter battle_character = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_character()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_CharacterStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_CharacterCreate characters = 1;
  for (int i = 0; i < this->characters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->characters(i), output);
  }

  // optional .pb.GS2C_BattleCharacter battle_character = 2;
  if (has_battle_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_character(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_CharacterStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_CharacterCreate characters = 1;
  for (int i = 0; i < this->characters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->characters(i), target);
  }

  // optional .pb.GS2C_BattleCharacter battle_character = 2;
  if (has_battle_character()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_character(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_CharacterStorage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.GS2C_BattleCharacter battle_character = 2;
    if (has_battle_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_character());
    }

  }
  // repeated .pb.GS2C_CharacterCreate characters = 1;
  total_size += 1 * this->characters_size();
  for (int i = 0; i < this->characters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->characters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_CharacterStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_CharacterStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_CharacterStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_CharacterStorage::MergeFrom(const GS2C_CharacterStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  characters_.MergeFrom(from.characters_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battle_character()) {
      mutable_battle_character()->::pb::GS2C_BattleCharacter::MergeFrom(from.battle_character());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_CharacterStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_CharacterStorage::CopyFrom(const GS2C_CharacterStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_CharacterStorage::IsInitialized() const {

  for (int i = 0; i < characters_size(); i++) {
    if (!this->characters(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_CharacterStorage::Swap(GS2C_CharacterStorage* other) {
  if (other != this) {
    characters_.Swap(&other->characters_);
    std::swap(battle_character_, other->battle_character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_CharacterStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_CharacterStorage_descriptor_;
  metadata.reflection = GS2C_CharacterStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_CharacterUpdate::kIdFieldNumber;
const int GS2C_CharacterUpdate::kUpdateValuesFieldNumber;
const int GS2C_CharacterUpdate::kJuxingtimeFieldNumber;
const int GS2C_CharacterUpdate::kCurCityIdFieldNumber;
const int GS2C_CharacterUpdate::kIsInCombatFieldNumber;
const int GS2C_CharacterUpdate::kCombatGroupIdFieldNumber;
const int GS2C_CharacterUpdate::kIsFakeCharFieldNumber;
#endif  // !_MSC_VER

GS2C_CharacterUpdate::GS2C_CharacterUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_CharacterUpdate::InitAsDefaultInstance() {
  update_values_ = const_cast< ::pb::Int32ListUpdate*>(&::pb::Int32ListUpdate::default_instance());
}

GS2C_CharacterUpdate::GS2C_CharacterUpdate(const GS2C_CharacterUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_CharacterUpdate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  update_values_ = NULL;
  juxingtime_ = GOOGLE_ULONGLONG(0);
  cur_city_id_ = 0u;
  isincombat_ = 0u;
  combatgroupid_ = 0u;
  isfakechar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_CharacterUpdate::~GS2C_CharacterUpdate() {
  SharedDtor();
}

void GS2C_CharacterUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete update_values_;
  }
}

void GS2C_CharacterUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_CharacterUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_CharacterUpdate_descriptor_;
}

const GS2C_CharacterUpdate& GS2C_CharacterUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

GS2C_CharacterUpdate* GS2C_CharacterUpdate::default_instance_ = NULL;

GS2C_CharacterUpdate* GS2C_CharacterUpdate::New() const {
  return new GS2C_CharacterUpdate;
}

void GS2C_CharacterUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_update_values()) {
      if (update_values_ != NULL) update_values_->::pb::Int32ListUpdate::Clear();
    }
    juxingtime_ = GOOGLE_ULONGLONG(0);
    cur_city_id_ = 0u;
    isincombat_ = 0u;
    combatgroupid_ = 0u;
    isfakechar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_CharacterUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update_values;
        break;
      }

      // optional .pb.Int32ListUpdate update_values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_juxingtime;
        break;
      }

      // optional uint64 juxingtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_juxingtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &juxingtime_)));
          set_has_juxingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_city_id;
        break;
      }

      // optional uint32 cur_city_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_city_id_)));
          set_has_cur_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isInCombat;
        break;
      }

      // optional uint32 isInCombat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isincombat_)));
          set_has_isincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_combatGroupId;
        break;
      }

      // optional uint32 combatGroupId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combatGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combatgroupid_)));
          set_has_combatgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isFakeChar;
        break;
      }

      // optional bool isFakeChar = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFakeChar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfakechar_)));
          set_has_isfakechar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_CharacterUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .pb.Int32ListUpdate update_values = 2;
  if (has_update_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update_values(), output);
  }

  // optional uint64 juxingtime = 3;
  if (has_juxingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->juxingtime(), output);
  }

  // optional uint32 cur_city_id = 4;
  if (has_cur_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_city_id(), output);
  }

  // optional uint32 isInCombat = 5;
  if (has_isincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isincombat(), output);
  }

  // optional uint32 combatGroupId = 6;
  if (has_combatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->combatgroupid(), output);
  }

  // optional bool isFakeChar = 7;
  if (has_isfakechar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isfakechar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_CharacterUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .pb.Int32ListUpdate update_values = 2;
  if (has_update_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update_values(), target);
  }

  // optional uint64 juxingtime = 3;
  if (has_juxingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->juxingtime(), target);
  }

  // optional uint32 cur_city_id = 4;
  if (has_cur_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_city_id(), target);
  }

  // optional uint32 isInCombat = 5;
  if (has_isincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isincombat(), target);
  }

  // optional uint32 combatGroupId = 6;
  if (has_combatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->combatgroupid(), target);
  }

  // optional bool isFakeChar = 7;
  if (has_isfakechar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isfakechar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_CharacterUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.Int32ListUpdate update_values = 2;
    if (has_update_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_values());
    }

    // optional uint64 juxingtime = 3;
    if (has_juxingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->juxingtime());
    }

    // optional uint32 cur_city_id = 4;
    if (has_cur_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_city_id());
    }

    // optional uint32 isInCombat = 5;
    if (has_isincombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isincombat());
    }

    // optional uint32 combatGroupId = 6;
    if (has_combatgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combatgroupid());
    }

    // optional bool isFakeChar = 7;
    if (has_isfakechar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_CharacterUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_CharacterUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_CharacterUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_CharacterUpdate::MergeFrom(const GS2C_CharacterUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_update_values()) {
      mutable_update_values()->::pb::Int32ListUpdate::MergeFrom(from.update_values());
    }
    if (from.has_juxingtime()) {
      set_juxingtime(from.juxingtime());
    }
    if (from.has_cur_city_id()) {
      set_cur_city_id(from.cur_city_id());
    }
    if (from.has_isincombat()) {
      set_isincombat(from.isincombat());
    }
    if (from.has_combatgroupid()) {
      set_combatgroupid(from.combatgroupid());
    }
    if (from.has_isfakechar()) {
      set_isfakechar(from.isfakechar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_CharacterUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_CharacterUpdate::CopyFrom(const GS2C_CharacterUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_CharacterUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_update_values()) {
    if (!this->update_values().IsInitialized()) return false;
  }
  return true;
}

void GS2C_CharacterUpdate::Swap(GS2C_CharacterUpdate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(update_values_, other->update_values_);
    std::swap(juxingtime_, other->juxingtime_);
    std::swap(cur_city_id_, other->cur_city_id_);
    std::swap(isincombat_, other->isincombat_);
    std::swap(combatgroupid_, other->combatgroupid_);
    std::swap(isfakechar_, other->isfakechar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_CharacterUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_CharacterUpdate_descriptor_;
  metadata.reflection = GS2C_CharacterUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_UseItemsToTarget::kTargetIdFieldNumber;
const int C2GS_UseItemsToTarget::kNRCardsFieldNumber;
const int C2GS_UseItemsToTarget::kCardTypeFieldNumber;
#endif  // !_MSC_VER

C2GS_UseItemsToTarget::C2GS_UseItemsToTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_UseItemsToTarget::InitAsDefaultInstance() {
}

C2GS_UseItemsToTarget::C2GS_UseItemsToTarget(const C2GS_UseItemsToTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_UseItemsToTarget::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = 0u;
  nr_cards_ = 0u;
  card_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_UseItemsToTarget::~C2GS_UseItemsToTarget() {
  SharedDtor();
}

void C2GS_UseItemsToTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_UseItemsToTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_UseItemsToTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_UseItemsToTarget_descriptor_;
}

const C2GS_UseItemsToTarget& C2GS_UseItemsToTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

C2GS_UseItemsToTarget* C2GS_UseItemsToTarget::default_instance_ = NULL;

C2GS_UseItemsToTarget* C2GS_UseItemsToTarget::New() const {
  return new C2GS_UseItemsToTarget;
}

void C2GS_UseItemsToTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = 0u;
    nr_cards_ = 0u;
    card_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_UseItemsToTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NR_cards;
        break;
      }

      // required uint32 NR_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NR_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nr_cards_)));
          set_has_nr_cards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_type;
        break;
      }

      // optional uint32 card_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_UseItemsToTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_id(), output);
  }

  // required uint32 NR_cards = 2;
  if (has_nr_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nr_cards(), output);
  }

  // optional uint32 card_type = 3;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_UseItemsToTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_id(), target);
  }

  // required uint32 NR_cards = 2;
  if (has_nr_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nr_cards(), target);
  }

  // optional uint32 card_type = 3;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_UseItemsToTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

    // required uint32 NR_cards = 2;
    if (has_nr_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nr_cards());
    }

    // optional uint32 card_type = 3;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_UseItemsToTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_UseItemsToTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_UseItemsToTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_UseItemsToTarget::MergeFrom(const C2GS_UseItemsToTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_nr_cards()) {
      set_nr_cards(from.nr_cards());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_UseItemsToTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_UseItemsToTarget::CopyFrom(const C2GS_UseItemsToTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_UseItemsToTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_UseItemsToTarget::Swap(C2GS_UseItemsToTarget* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(nr_cards_, other->nr_cards_);
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_UseItemsToTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_UseItemsToTarget_descriptor_;
  metadata.reflection = C2GS_UseItemsToTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_UpgradeQuality::kCharIdFieldNumber;
const int C2GS_UpgradeQuality::kMaterialCharIdsFieldNumber;
#endif  // !_MSC_VER

C2GS_UpgradeQuality::C2GS_UpgradeQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_UpgradeQuality::InitAsDefaultInstance() {
  material_char_ids_ = const_cast< ::pb::Uint32List*>(&::pb::Uint32List::default_instance());
}

C2GS_UpgradeQuality::C2GS_UpgradeQuality(const C2GS_UpgradeQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_UpgradeQuality::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  material_char_ids_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_UpgradeQuality::~C2GS_UpgradeQuality() {
  SharedDtor();
}

void C2GS_UpgradeQuality::SharedDtor() {
  if (this != default_instance_) {
    delete material_char_ids_;
  }
}

void C2GS_UpgradeQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_UpgradeQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_UpgradeQuality_descriptor_;
}

const C2GS_UpgradeQuality& C2GS_UpgradeQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

C2GS_UpgradeQuality* C2GS_UpgradeQuality::default_instance_ = NULL;

C2GS_UpgradeQuality* C2GS_UpgradeQuality::New() const {
  return new C2GS_UpgradeQuality;
}

void C2GS_UpgradeQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    if (has_material_char_ids()) {
      if (material_char_ids_ != NULL) material_char_ids_->::pb::Uint32List::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_UpgradeQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_material_char_ids;
        break;
      }

      // optional .pb.Uint32List material_char_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material_char_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_material_char_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_UpgradeQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // optional .pb.Uint32List material_char_ids = 2;
  if (has_material_char_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->material_char_ids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_UpgradeQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // optional .pb.Uint32List material_char_ids = 2;
  if (has_material_char_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->material_char_ids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_UpgradeQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // optional .pb.Uint32List material_char_ids = 2;
    if (has_material_char_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->material_char_ids());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_UpgradeQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_UpgradeQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_UpgradeQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_UpgradeQuality::MergeFrom(const C2GS_UpgradeQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_material_char_ids()) {
      mutable_material_char_ids()->::pb::Uint32List::MergeFrom(from.material_char_ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_UpgradeQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_UpgradeQuality::CopyFrom(const C2GS_UpgradeQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_UpgradeQuality::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_UpgradeQuality::Swap(C2GS_UpgradeQuality* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(material_char_ids_, other->material_char_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_UpgradeQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_UpgradeQuality_descriptor_;
  metadata.reflection = C2GS_UpgradeQuality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Show_Data::kCharIdFieldNumber;
const int GS2C_Combat_Show_Data::kSoldierLvFieldNumber;
const int GS2C_Combat_Show_Data::kSoldierCntFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Show_Data::GS2C_Combat_Show_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Show_Data::InitAsDefaultInstance() {
}

GS2C_Combat_Show_Data::GS2C_Combat_Show_Data(const GS2C_Combat_Show_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Show_Data::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  soldierlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Show_Data::~GS2C_Combat_Show_Data() {
  SharedDtor();
}

void GS2C_Combat_Show_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Show_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Show_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Show_Data_descriptor_;
}

const GS2C_Combat_Show_Data& GS2C_Combat_Show_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

GS2C_Combat_Show_Data* GS2C_Combat_Show_Data::default_instance_ = NULL;

GS2C_Combat_Show_Data* GS2C_Combat_Show_Data::New() const {
  return new GS2C_Combat_Show_Data;
}

void GS2C_Combat_Show_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    soldierlv_ = 0u;
  }
  soldiercnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Show_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soldierLv;
        break;
      }

      // optional uint32 soldierLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soldierLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soldierlv_)));
          set_has_soldierlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_soldierCnt;
        break;
      }

      // repeated uint32 soldierCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soldierCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_soldiercnt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_soldiercnt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_soldierCnt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Show_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // optional uint32 soldierLv = 2;
  if (has_soldierlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->soldierlv(), output);
  }

  // repeated uint32 soldierCnt = 3;
  for (int i = 0; i < this->soldiercnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->soldiercnt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Show_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // optional uint32 soldierLv = 2;
  if (has_soldierlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->soldierlv(), target);
  }

  // repeated uint32 soldierCnt = 3;
  for (int i = 0; i < this->soldiercnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->soldiercnt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Show_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // optional uint32 soldierLv = 2;
    if (has_soldierlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soldierlv());
    }

  }
  // repeated uint32 soldierCnt = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->soldiercnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->soldiercnt(i));
    }
    total_size += 1 * this->soldiercnt_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Show_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Show_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Show_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Show_Data::MergeFrom(const GS2C_Combat_Show_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiercnt_.MergeFrom(from.soldiercnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_soldierlv()) {
      set_soldierlv(from.soldierlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Show_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Show_Data::CopyFrom(const GS2C_Combat_Show_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Show_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Combat_Show_Data::Swap(GS2C_Combat_Show_Data* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(soldierlv_, other->soldierlv_);
    soldiercnt_.Swap(&other->soldiercnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Show_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Show_Data_descriptor_;
  metadata.reflection = GS2C_Combat_Show_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Dinner_Data::kDinnerNumFieldNumber;
const int GS2C_Dinner_Data::kNextTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Dinner_Data::GS2C_Dinner_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Dinner_Data::InitAsDefaultInstance() {
}

GS2C_Dinner_Data::GS2C_Dinner_Data(const GS2C_Dinner_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Dinner_Data::SharedCtor() {
  _cached_size_ = 0;
  dinner_num_ = 0u;
  next_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Dinner_Data::~GS2C_Dinner_Data() {
  SharedDtor();
}

void GS2C_Dinner_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Dinner_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Dinner_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Dinner_Data_descriptor_;
}

const GS2C_Dinner_Data& GS2C_Dinner_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

GS2C_Dinner_Data* GS2C_Dinner_Data::default_instance_ = NULL;

GS2C_Dinner_Data* GS2C_Dinner_Data::New() const {
  return new GS2C_Dinner_Data;
}

void GS2C_Dinner_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dinner_num_ = 0u;
    next_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Dinner_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dinner_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dinner_num_)));
          set_has_dinner_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_time;
        break;
      }

      // required uint32 next_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_time_)));
          set_has_next_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Dinner_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dinner_num = 1;
  if (has_dinner_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dinner_num(), output);
  }

  // required uint32 next_time = 2;
  if (has_next_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Dinner_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dinner_num = 1;
  if (has_dinner_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dinner_num(), target);
  }

  // required uint32 next_time = 2;
  if (has_next_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->next_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Dinner_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dinner_num = 1;
    if (has_dinner_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dinner_num());
    }

    // required uint32 next_time = 2;
    if (has_next_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Dinner_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Dinner_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Dinner_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Dinner_Data::MergeFrom(const GS2C_Dinner_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dinner_num()) {
      set_dinner_num(from.dinner_num());
    }
    if (from.has_next_time()) {
      set_next_time(from.next_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Dinner_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Dinner_Data::CopyFrom(const GS2C_Dinner_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Dinner_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Dinner_Data::Swap(GS2C_Dinner_Data* other) {
  if (other != this) {
    std::swap(dinner_num_, other->dinner_num_);
    std::swap(next_time_, other->next_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Dinner_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Dinner_Data_descriptor_;
  metadata.reflection = GS2C_Dinner_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Dinner_Resp::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Dinner_Resp::GS2C_Dinner_Resp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Dinner_Resp::InitAsDefaultInstance() {
}

GS2C_Dinner_Resp::GS2C_Dinner_Resp(const GS2C_Dinner_Resp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Dinner_Resp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Dinner_Resp::~GS2C_Dinner_Resp() {
  SharedDtor();
}

void GS2C_Dinner_Resp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Dinner_Resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Dinner_Resp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Dinner_Resp_descriptor_;
}

const GS2C_Dinner_Resp& GS2C_Dinner_Resp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Character_2eproto();
  return *default_instance_;
}

GS2C_Dinner_Resp* GS2C_Dinner_Resp::default_instance_ = NULL;

GS2C_Dinner_Resp* GS2C_Dinner_Resp::New() const {
  return new GS2C_Dinner_Resp;
}

void GS2C_Dinner_Resp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Dinner_Resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Dinner_Resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Dinner_Resp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Dinner_Resp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Dinner_Resp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Dinner_Resp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Dinner_Resp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Dinner_Resp::MergeFrom(const GS2C_Dinner_Resp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Dinner_Resp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Dinner_Resp::CopyFrom(const GS2C_Dinner_Resp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Dinner_Resp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Dinner_Resp::Swap(GS2C_Dinner_Resp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Dinner_Resp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Dinner_Resp_descriptor_;
  metadata.reflection = GS2C_Dinner_Resp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
