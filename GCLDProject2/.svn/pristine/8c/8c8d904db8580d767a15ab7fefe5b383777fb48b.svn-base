// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dungeon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Dungeon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* CatchHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Dungeon_Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Dungeon_Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Dungeon_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Dungeon_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Dungeon_Add_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Dungeon_Add_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Dungeon_Del_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Dungeon_Del_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Dungeon_Build_By_Silver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Dungeon_Build_By_Silver_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Dungeon_Cane_Fase_LevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Dungeon_Cane_Fase_LevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Dungeon_Try_Cane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Dungeon_Try_Cane_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Dungeon_Escape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Dungeon_Escape_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Dungeon_Escape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Dungeon_Escape_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_HERO_BE_CATCH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_HERO_BE_CATCH_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Dungeon_Cane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Dungeon_Cane_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Dungeon_2eproto() {
  protobuf_AddDesc_Dungeon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Dungeon.proto");
  GOOGLE_CHECK(file != NULL);
  CatchHero_descriptor_ = file->message_type(0);
  static const int CatchHero_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, is_caned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, escape_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, hero_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, isshadow_),
  };
  CatchHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatchHero_descriptor_,
      CatchHero::default_instance_,
      CatchHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatchHero));
  GS2C_Dungeon_Base_descriptor_ = file->message_type(1);
  static const int GS2C_Dungeon_Base_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, dngeon_levle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, silver_for_build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, cane_levle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, cane_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, free_try_cane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, cane_temp_levle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, cane_temp_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, today_catch_hero_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, catch_hero_cnt_for_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, catch_hero_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, today_cane_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, today_cane_get_exp_),
  };
  GS2C_Dungeon_Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Dungeon_Base_descriptor_,
      GS2C_Dungeon_Base::default_instance_,
      GS2C_Dungeon_Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Dungeon_Base));
  GS2C_Dungeon_All_Info_descriptor_ = file->message_type(2);
  static const int GS2C_Dungeon_All_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_All_Info, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_All_Info, catch_hero_),
  };
  GS2C_Dungeon_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Dungeon_All_Info_descriptor_,
      GS2C_Dungeon_All_Info::default_instance_,
      GS2C_Dungeon_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Dungeon_All_Info));
  GS2C_Dungeon_Add_Hero_descriptor_ = file->message_type(3);
  static const int GS2C_Dungeon_Add_Hero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Add_Hero, hero_),
  };
  GS2C_Dungeon_Add_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Dungeon_Add_Hero_descriptor_,
      GS2C_Dungeon_Add_Hero::default_instance_,
      GS2C_Dungeon_Add_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Add_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Add_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Dungeon_Add_Hero));
  GS2C_Dungeon_Del_Hero_descriptor_ = file->message_type(4);
  static const int GS2C_Dungeon_Del_Hero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Del_Hero, hero_),
  };
  GS2C_Dungeon_Del_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Dungeon_Del_Hero_descriptor_,
      GS2C_Dungeon_Del_Hero::default_instance_,
      GS2C_Dungeon_Del_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Del_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Del_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Dungeon_Del_Hero));
  C2GS_Dungeon_Build_By_Silver_descriptor_ = file->message_type(5);
  static const int C2GS_Dungeon_Build_By_Silver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Build_By_Silver, is_fast_),
  };
  C2GS_Dungeon_Build_By_Silver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Dungeon_Build_By_Silver_descriptor_,
      C2GS_Dungeon_Build_By_Silver::default_instance_,
      C2GS_Dungeon_Build_By_Silver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Build_By_Silver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Build_By_Silver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Dungeon_Build_By_Silver));
  C2GS_Dungeon_Cane_Fase_LevelUp_descriptor_ = file->message_type(6);
  static const int C2GS_Dungeon_Cane_Fase_LevelUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Cane_Fase_LevelUp, dst_lv_),
  };
  C2GS_Dungeon_Cane_Fase_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Dungeon_Cane_Fase_LevelUp_descriptor_,
      C2GS_Dungeon_Cane_Fase_LevelUp::default_instance_,
      C2GS_Dungeon_Cane_Fase_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Cane_Fase_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Cane_Fase_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Dungeon_Cane_Fase_LevelUp));
  C2GS_Dungeon_Try_Cane_descriptor_ = file->message_type(7);
  static const int C2GS_Dungeon_Try_Cane_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Try_Cane, dst_lv_),
  };
  C2GS_Dungeon_Try_Cane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Dungeon_Try_Cane_descriptor_,
      C2GS_Dungeon_Try_Cane::default_instance_,
      C2GS_Dungeon_Try_Cane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Try_Cane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Try_Cane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Dungeon_Try_Cane));
  C2GS_Dungeon_Escape_descriptor_ = file->message_type(8);
  static const int C2GS_Dungeon_Escape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Escape, hero_idx_),
  };
  C2GS_Dungeon_Escape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Dungeon_Escape_descriptor_,
      C2GS_Dungeon_Escape::default_instance_,
      C2GS_Dungeon_Escape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Escape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Dungeon_Escape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Dungeon_Escape));
  GS2C_Dungeon_Escape_descriptor_ = file->message_type(9);
  static const int GS2C_Dungeon_Escape_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Escape, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Escape, need_second_),
  };
  GS2C_Dungeon_Escape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Dungeon_Escape_descriptor_,
      GS2C_Dungeon_Escape::default_instance_,
      GS2C_Dungeon_Escape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Escape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Escape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Dungeon_Escape));
  GS2C_HERO_BE_CATCH_descriptor_ = file->message_type(10);
  static const int GS2C_HERO_BE_CATCH_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HERO_BE_CATCH, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HERO_BE_CATCH, dungeon_owner_player_id_),
  };
  GS2C_HERO_BE_CATCH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_HERO_BE_CATCH_descriptor_,
      GS2C_HERO_BE_CATCH::default_instance_,
      GS2C_HERO_BE_CATCH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HERO_BE_CATCH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HERO_BE_CATCH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_HERO_BE_CATCH));
  GS2C_Dungeon_Cane_descriptor_ = file->message_type(11);
  static const int GS2C_Dungeon_Cane_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Cane, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Cane, player_exp_),
  };
  GS2C_Dungeon_Cane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Dungeon_Cane_descriptor_,
      GS2C_Dungeon_Cane::default_instance_,
      GS2C_Dungeon_Cane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Cane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Dungeon_Cane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Dungeon_Cane));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Dungeon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatchHero_descriptor_, &CatchHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Dungeon_Base_descriptor_, &GS2C_Dungeon_Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Dungeon_All_Info_descriptor_, &GS2C_Dungeon_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Dungeon_Add_Hero_descriptor_, &GS2C_Dungeon_Add_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Dungeon_Del_Hero_descriptor_, &GS2C_Dungeon_Del_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Dungeon_Build_By_Silver_descriptor_, &C2GS_Dungeon_Build_By_Silver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Dungeon_Cane_Fase_LevelUp_descriptor_, &C2GS_Dungeon_Cane_Fase_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Dungeon_Try_Cane_descriptor_, &C2GS_Dungeon_Try_Cane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Dungeon_Escape_descriptor_, &C2GS_Dungeon_Escape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Dungeon_Escape_descriptor_, &GS2C_Dungeon_Escape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_HERO_BE_CATCH_descriptor_, &GS2C_HERO_BE_CATCH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Dungeon_Cane_descriptor_, &GS2C_Dungeon_Cane::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Dungeon_2eproto() {
  delete CatchHero::default_instance_;
  delete CatchHero_reflection_;
  delete GS2C_Dungeon_Base::default_instance_;
  delete GS2C_Dungeon_Base_reflection_;
  delete GS2C_Dungeon_All_Info::default_instance_;
  delete GS2C_Dungeon_All_Info_reflection_;
  delete GS2C_Dungeon_Add_Hero::default_instance_;
  delete GS2C_Dungeon_Add_Hero_reflection_;
  delete GS2C_Dungeon_Del_Hero::default_instance_;
  delete GS2C_Dungeon_Del_Hero_reflection_;
  delete C2GS_Dungeon_Build_By_Silver::default_instance_;
  delete C2GS_Dungeon_Build_By_Silver_reflection_;
  delete C2GS_Dungeon_Cane_Fase_LevelUp::default_instance_;
  delete C2GS_Dungeon_Cane_Fase_LevelUp_reflection_;
  delete C2GS_Dungeon_Try_Cane::default_instance_;
  delete C2GS_Dungeon_Try_Cane_reflection_;
  delete C2GS_Dungeon_Escape::default_instance_;
  delete C2GS_Dungeon_Escape_reflection_;
  delete GS2C_Dungeon_Escape::default_instance_;
  delete GS2C_Dungeon_Escape_reflection_;
  delete GS2C_HERO_BE_CATCH::default_instance_;
  delete GS2C_HERO_BE_CATCH_reflection_;
  delete GS2C_Dungeon_Cane::default_instance_;
  delete GS2C_Dungeon_Cane_reflection_;
}

void protobuf_AddDesc_Dungeon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rDungeon.proto\022\002pb\032\017CommomDef.proto\"\244\001\n"
    "\tCatchHero\022\021\n\tplayer_id\030\001 \002(\004\022\020\n\010hero_ti"
    "d\030\002 \002(\r\022\020\n\010is_caned\030\003 \001(\010\022\027\n\017escape_end_"
    "time\030\004 \001(\004\022\023\n\013player_name\030\005 \001(\t\022\017\n\007hero_"
    "lv\030\006 \001(\r\022\017\n\007country\030\007 \001(\r\022\020\n\010isShadow\030\010 "
    "\001(\010\"\274\002\n\021GS2C_Dungeon_Base\022\024\n\014dngeon_levl"
    "e\030\001 \001(\r\022\030\n\020silver_for_build\030\002 \001(\r\022\022\n\ncan"
    "e_levle\030\003 \001(\r\022\020\n\010cane_exp\030\004 \001(\r\022\025\n\rfree_"
    "try_cane\030\005 \001(\010\022\027\n\017cane_temp_levle\030\006 \001(\r\022"
    "\026\n\016cane_temp_time\030\007 \001(\004\022\034\n\024today_catch_h"
    "ero_cnt\030\010 \001(\r\022\036\n\026catch_hero_cnt_for_exp\030"
    "\t \001(\r\022\027\n\017catch_hero_time\030\n \001(\004\022\026\n\016today_"
    "cane_cnt\030\013 \001(\r\022\032\n\022today_cane_get_exp\030\014 \001"
    "(\r\"d\n\025GS2C_Dungeon_All_Info\022(\n\tbase_info"
    "\030\001 \001(\0132\025.pb.GS2C_Dungeon_Base\022!\n\ncatch_h"
    "ero\030\002 \003(\0132\r.pb.CatchHero\"4\n\025GS2C_Dungeon"
    "_Add_Hero\022\033\n\004hero\030\001 \002(\0132\r.pb.CatchHero\"4"
    "\n\025GS2C_Dungeon_Del_Hero\022\033\n\004hero\030\001 \002(\0132\r."
    "pb.CatchHero\"/\n\034C2GS_Dungeon_Build_By_Si"
    "lver\022\017\n\007is_fast\030\001 \002(\010\"0\n\036C2GS_Dungeon_Ca"
    "ne_Fase_LevelUp\022\016\n\006dst_lv\030\001 \002(\r\"\'\n\025C2GS_"
    "Dungeon_Try_Cane\022\016\n\006dst_lv\030\001 \002(\r\"\'\n\023C2GS"
    "_Dungeon_Escape\022\020\n\010hero_idx\030\001 \002(\r\"<\n\023GS2"
    "C_Dungeon_Escape\022\020\n\010hero_tid\030\001 \002(\r\022\023\n\013ne"
    "ed_second\030\002 \002(\r\"G\n\022GS2C_HERO_BE_CATCH\022\020\n"
    "\010hero_tid\030\001 \002(\r\022\037\n\027dungeon_owner_player_"
    "id\030\002 \002(\004\"8\n\021GS2C_Dungeon_Cane\022\017\n\007success"
    "\030\001 \002(\010\022\022\n\nplayer_exp\030\002 \002(\r", 1106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Dungeon.proto", &protobuf_RegisterTypes);
  CatchHero::default_instance_ = new CatchHero();
  GS2C_Dungeon_Base::default_instance_ = new GS2C_Dungeon_Base();
  GS2C_Dungeon_All_Info::default_instance_ = new GS2C_Dungeon_All_Info();
  GS2C_Dungeon_Add_Hero::default_instance_ = new GS2C_Dungeon_Add_Hero();
  GS2C_Dungeon_Del_Hero::default_instance_ = new GS2C_Dungeon_Del_Hero();
  C2GS_Dungeon_Build_By_Silver::default_instance_ = new C2GS_Dungeon_Build_By_Silver();
  C2GS_Dungeon_Cane_Fase_LevelUp::default_instance_ = new C2GS_Dungeon_Cane_Fase_LevelUp();
  C2GS_Dungeon_Try_Cane::default_instance_ = new C2GS_Dungeon_Try_Cane();
  C2GS_Dungeon_Escape::default_instance_ = new C2GS_Dungeon_Escape();
  GS2C_Dungeon_Escape::default_instance_ = new GS2C_Dungeon_Escape();
  GS2C_HERO_BE_CATCH::default_instance_ = new GS2C_HERO_BE_CATCH();
  GS2C_Dungeon_Cane::default_instance_ = new GS2C_Dungeon_Cane();
  CatchHero::default_instance_->InitAsDefaultInstance();
  GS2C_Dungeon_Base::default_instance_->InitAsDefaultInstance();
  GS2C_Dungeon_All_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Dungeon_Add_Hero::default_instance_->InitAsDefaultInstance();
  GS2C_Dungeon_Del_Hero::default_instance_->InitAsDefaultInstance();
  C2GS_Dungeon_Build_By_Silver::default_instance_->InitAsDefaultInstance();
  C2GS_Dungeon_Cane_Fase_LevelUp::default_instance_->InitAsDefaultInstance();
  C2GS_Dungeon_Try_Cane::default_instance_->InitAsDefaultInstance();
  C2GS_Dungeon_Escape::default_instance_->InitAsDefaultInstance();
  GS2C_Dungeon_Escape::default_instance_->InitAsDefaultInstance();
  GS2C_HERO_BE_CATCH::default_instance_->InitAsDefaultInstance();
  GS2C_Dungeon_Cane::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Dungeon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Dungeon_2eproto {
  StaticDescriptorInitializer_Dungeon_2eproto() {
    protobuf_AddDesc_Dungeon_2eproto();
  }
} static_descriptor_initializer_Dungeon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CatchHero::kPlayerIdFieldNumber;
const int CatchHero::kHeroTidFieldNumber;
const int CatchHero::kIsCanedFieldNumber;
const int CatchHero::kEscapeEndTimeFieldNumber;
const int CatchHero::kPlayerNameFieldNumber;
const int CatchHero::kHeroLvFieldNumber;
const int CatchHero::kCountryFieldNumber;
const int CatchHero::kIsShadowFieldNumber;
#endif  // !_MSC_VER

CatchHero::CatchHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CatchHero::InitAsDefaultInstance() {
}

CatchHero::CatchHero(const CatchHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CatchHero::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  hero_tid_ = 0u;
  is_caned_ = false;
  escape_end_time_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_lv_ = 0u;
  country_ = 0u;
  isshadow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatchHero::~CatchHero() {
  SharedDtor();
}

void CatchHero::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void CatchHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchHero_descriptor_;
}

const CatchHero& CatchHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

CatchHero* CatchHero::default_instance_ = NULL;

CatchHero* CatchHero::New() const {
  return new CatchHero;
}

void CatchHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    hero_tid_ = 0u;
    is_caned_ = false;
    escape_end_time_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    hero_lv_ = 0u;
    country_ = 0u;
    isshadow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatchHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_tid;
        break;
      }

      // required uint32 hero_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_caned;
        break;
      }

      // optional bool is_caned = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_caned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_caned_)));
          set_has_is_caned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_escape_end_time;
        break;
      }

      // optional uint64 escape_end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_escape_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &escape_end_time_)));
          set_has_escape_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_name;
        break;
      }

      // optional string player_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hero_lv;
        break;
      }

      // optional uint32 hero_lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_lv_)));
          set_has_hero_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_country;
        break;
      }

      // optional uint32 country = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isShadow;
        break;
      }

      // optional bool isShadow = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshadow_)));
          set_has_isshadow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CatchHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // required uint32 hero_tid = 2;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_tid(), output);
  }

  // optional bool is_caned = 3;
  if (has_is_caned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_caned(), output);
  }

  // optional uint64 escape_end_time = 4;
  if (has_escape_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->escape_end_time(), output);
  }

  // optional string player_name = 5;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->player_name(), output);
  }

  // optional uint32 hero_lv = 6;
  if (has_hero_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hero_lv(), output);
  }

  // optional uint32 country = 7;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->country(), output);
  }

  // optional bool isShadow = 8;
  if (has_isshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isshadow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CatchHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // required uint32 hero_tid = 2;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_tid(), target);
  }

  // optional bool is_caned = 3;
  if (has_is_caned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_caned(), target);
  }

  // optional uint64 escape_end_time = 4;
  if (has_escape_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->escape_end_time(), target);
  }

  // optional string player_name = 5;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player_name(), target);
  }

  // optional uint32 hero_lv = 6;
  if (has_hero_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hero_lv(), target);
  }

  // optional uint32 country = 7;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->country(), target);
  }

  // optional bool isShadow = 8;
  if (has_isshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isshadow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CatchHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // required uint32 hero_tid = 2;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // optional bool is_caned = 3;
    if (has_is_caned()) {
      total_size += 1 + 1;
    }

    // optional uint64 escape_end_time = 4;
    if (has_escape_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->escape_end_time());
    }

    // optional string player_name = 5;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 hero_lv = 6;
    if (has_hero_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_lv());
    }

    // optional uint32 country = 7;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional bool isShadow = 8;
    if (has_isshadow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatchHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatchHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatchHero::MergeFrom(const CatchHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_is_caned()) {
      set_is_caned(from.is_caned());
    }
    if (from.has_escape_end_time()) {
      set_escape_end_time(from.escape_end_time());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_hero_lv()) {
      set_hero_lv(from.hero_lv());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_isshadow()) {
      set_isshadow(from.isshadow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatchHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchHero::CopyFrom(const CatchHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CatchHero::Swap(CatchHero* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(is_caned_, other->is_caned_);
    std::swap(escape_end_time_, other->escape_end_time_);
    std::swap(player_name_, other->player_name_);
    std::swap(hero_lv_, other->hero_lv_);
    std::swap(country_, other->country_);
    std::swap(isshadow_, other->isshadow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatchHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchHero_descriptor_;
  metadata.reflection = CatchHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Dungeon_Base::kDngeonLevleFieldNumber;
const int GS2C_Dungeon_Base::kSilverForBuildFieldNumber;
const int GS2C_Dungeon_Base::kCaneLevleFieldNumber;
const int GS2C_Dungeon_Base::kCaneExpFieldNumber;
const int GS2C_Dungeon_Base::kFreeTryCaneFieldNumber;
const int GS2C_Dungeon_Base::kCaneTempLevleFieldNumber;
const int GS2C_Dungeon_Base::kCaneTempTimeFieldNumber;
const int GS2C_Dungeon_Base::kTodayCatchHeroCntFieldNumber;
const int GS2C_Dungeon_Base::kCatchHeroCntForExpFieldNumber;
const int GS2C_Dungeon_Base::kCatchHeroTimeFieldNumber;
const int GS2C_Dungeon_Base::kTodayCaneCntFieldNumber;
const int GS2C_Dungeon_Base::kTodayCaneGetExpFieldNumber;
#endif  // !_MSC_VER

GS2C_Dungeon_Base::GS2C_Dungeon_Base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Dungeon_Base::InitAsDefaultInstance() {
}

GS2C_Dungeon_Base::GS2C_Dungeon_Base(const GS2C_Dungeon_Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Dungeon_Base::SharedCtor() {
  _cached_size_ = 0;
  dngeon_levle_ = 0u;
  silver_for_build_ = 0u;
  cane_levle_ = 0u;
  cane_exp_ = 0u;
  free_try_cane_ = false;
  cane_temp_levle_ = 0u;
  cane_temp_time_ = GOOGLE_ULONGLONG(0);
  today_catch_hero_cnt_ = 0u;
  catch_hero_cnt_for_exp_ = 0u;
  catch_hero_time_ = GOOGLE_ULONGLONG(0);
  today_cane_cnt_ = 0u;
  today_cane_get_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Dungeon_Base::~GS2C_Dungeon_Base() {
  SharedDtor();
}

void GS2C_Dungeon_Base::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Dungeon_Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Dungeon_Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Dungeon_Base_descriptor_;
}

const GS2C_Dungeon_Base& GS2C_Dungeon_Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

GS2C_Dungeon_Base* GS2C_Dungeon_Base::default_instance_ = NULL;

GS2C_Dungeon_Base* GS2C_Dungeon_Base::New() const {
  return new GS2C_Dungeon_Base;
}

void GS2C_Dungeon_Base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dngeon_levle_ = 0u;
    silver_for_build_ = 0u;
    cane_levle_ = 0u;
    cane_exp_ = 0u;
    free_try_cane_ = false;
    cane_temp_levle_ = 0u;
    cane_temp_time_ = GOOGLE_ULONGLONG(0);
    today_catch_hero_cnt_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    catch_hero_cnt_for_exp_ = 0u;
    catch_hero_time_ = GOOGLE_ULONGLONG(0);
    today_cane_cnt_ = 0u;
    today_cane_get_exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Dungeon_Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dngeon_levle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dngeon_levle_)));
          set_has_dngeon_levle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_silver_for_build;
        break;
      }

      // optional uint32 silver_for_build = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver_for_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silver_for_build_)));
          set_has_silver_for_build();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cane_levle;
        break;
      }

      // optional uint32 cane_levle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cane_levle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cane_levle_)));
          set_has_cane_levle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cane_exp;
        break;
      }

      // optional uint32 cane_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cane_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cane_exp_)));
          set_has_cane_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_free_try_cane;
        break;
      }

      // optional bool free_try_cane = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_try_cane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_try_cane_)));
          set_has_free_try_cane();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cane_temp_levle;
        break;
      }

      // optional uint32 cane_temp_levle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cane_temp_levle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cane_temp_levle_)));
          set_has_cane_temp_levle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cane_temp_time;
        break;
      }

      // optional uint64 cane_temp_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cane_temp_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cane_temp_time_)));
          set_has_cane_temp_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_today_catch_hero_cnt;
        break;
      }

      // optional uint32 today_catch_hero_cnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_catch_hero_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_catch_hero_cnt_)));
          set_has_today_catch_hero_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_catch_hero_cnt_for_exp;
        break;
      }

      // optional uint32 catch_hero_cnt_for_exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catch_hero_cnt_for_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catch_hero_cnt_for_exp_)));
          set_has_catch_hero_cnt_for_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_catch_hero_time;
        break;
      }

      // optional uint64 catch_hero_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catch_hero_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &catch_hero_time_)));
          set_has_catch_hero_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_today_cane_cnt;
        break;
      }

      // optional uint32 today_cane_cnt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_cane_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_cane_cnt_)));
          set_has_today_cane_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_today_cane_get_exp;
        break;
      }

      // optional uint32 today_cane_get_exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_cane_get_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_cane_get_exp_)));
          set_has_today_cane_get_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Dungeon_Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dngeon_levle = 1;
  if (has_dngeon_levle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dngeon_levle(), output);
  }

  // optional uint32 silver_for_build = 2;
  if (has_silver_for_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->silver_for_build(), output);
  }

  // optional uint32 cane_levle = 3;
  if (has_cane_levle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cane_levle(), output);
  }

  // optional uint32 cane_exp = 4;
  if (has_cane_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cane_exp(), output);
  }

  // optional bool free_try_cane = 5;
  if (has_free_try_cane()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->free_try_cane(), output);
  }

  // optional uint32 cane_temp_levle = 6;
  if (has_cane_temp_levle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cane_temp_levle(), output);
  }

  // optional uint64 cane_temp_time = 7;
  if (has_cane_temp_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cane_temp_time(), output);
  }

  // optional uint32 today_catch_hero_cnt = 8;
  if (has_today_catch_hero_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->today_catch_hero_cnt(), output);
  }

  // optional uint32 catch_hero_cnt_for_exp = 9;
  if (has_catch_hero_cnt_for_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->catch_hero_cnt_for_exp(), output);
  }

  // optional uint64 catch_hero_time = 10;
  if (has_catch_hero_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->catch_hero_time(), output);
  }

  // optional uint32 today_cane_cnt = 11;
  if (has_today_cane_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->today_cane_cnt(), output);
  }

  // optional uint32 today_cane_get_exp = 12;
  if (has_today_cane_get_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->today_cane_get_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Dungeon_Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dngeon_levle = 1;
  if (has_dngeon_levle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dngeon_levle(), target);
  }

  // optional uint32 silver_for_build = 2;
  if (has_silver_for_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->silver_for_build(), target);
  }

  // optional uint32 cane_levle = 3;
  if (has_cane_levle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cane_levle(), target);
  }

  // optional uint32 cane_exp = 4;
  if (has_cane_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cane_exp(), target);
  }

  // optional bool free_try_cane = 5;
  if (has_free_try_cane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->free_try_cane(), target);
  }

  // optional uint32 cane_temp_levle = 6;
  if (has_cane_temp_levle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cane_temp_levle(), target);
  }

  // optional uint64 cane_temp_time = 7;
  if (has_cane_temp_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->cane_temp_time(), target);
  }

  // optional uint32 today_catch_hero_cnt = 8;
  if (has_today_catch_hero_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->today_catch_hero_cnt(), target);
  }

  // optional uint32 catch_hero_cnt_for_exp = 9;
  if (has_catch_hero_cnt_for_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->catch_hero_cnt_for_exp(), target);
  }

  // optional uint64 catch_hero_time = 10;
  if (has_catch_hero_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->catch_hero_time(), target);
  }

  // optional uint32 today_cane_cnt = 11;
  if (has_today_cane_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->today_cane_cnt(), target);
  }

  // optional uint32 today_cane_get_exp = 12;
  if (has_today_cane_get_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->today_cane_get_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Dungeon_Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dngeon_levle = 1;
    if (has_dngeon_levle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dngeon_levle());
    }

    // optional uint32 silver_for_build = 2;
    if (has_silver_for_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silver_for_build());
    }

    // optional uint32 cane_levle = 3;
    if (has_cane_levle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cane_levle());
    }

    // optional uint32 cane_exp = 4;
    if (has_cane_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cane_exp());
    }

    // optional bool free_try_cane = 5;
    if (has_free_try_cane()) {
      total_size += 1 + 1;
    }

    // optional uint32 cane_temp_levle = 6;
    if (has_cane_temp_levle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cane_temp_levle());
    }

    // optional uint64 cane_temp_time = 7;
    if (has_cane_temp_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cane_temp_time());
    }

    // optional uint32 today_catch_hero_cnt = 8;
    if (has_today_catch_hero_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_catch_hero_cnt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 catch_hero_cnt_for_exp = 9;
    if (has_catch_hero_cnt_for_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catch_hero_cnt_for_exp());
    }

    // optional uint64 catch_hero_time = 10;
    if (has_catch_hero_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->catch_hero_time());
    }

    // optional uint32 today_cane_cnt = 11;
    if (has_today_cane_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_cane_cnt());
    }

    // optional uint32 today_cane_get_exp = 12;
    if (has_today_cane_get_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_cane_get_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Dungeon_Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Dungeon_Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Dungeon_Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Dungeon_Base::MergeFrom(const GS2C_Dungeon_Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dngeon_levle()) {
      set_dngeon_levle(from.dngeon_levle());
    }
    if (from.has_silver_for_build()) {
      set_silver_for_build(from.silver_for_build());
    }
    if (from.has_cane_levle()) {
      set_cane_levle(from.cane_levle());
    }
    if (from.has_cane_exp()) {
      set_cane_exp(from.cane_exp());
    }
    if (from.has_free_try_cane()) {
      set_free_try_cane(from.free_try_cane());
    }
    if (from.has_cane_temp_levle()) {
      set_cane_temp_levle(from.cane_temp_levle());
    }
    if (from.has_cane_temp_time()) {
      set_cane_temp_time(from.cane_temp_time());
    }
    if (from.has_today_catch_hero_cnt()) {
      set_today_catch_hero_cnt(from.today_catch_hero_cnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_catch_hero_cnt_for_exp()) {
      set_catch_hero_cnt_for_exp(from.catch_hero_cnt_for_exp());
    }
    if (from.has_catch_hero_time()) {
      set_catch_hero_time(from.catch_hero_time());
    }
    if (from.has_today_cane_cnt()) {
      set_today_cane_cnt(from.today_cane_cnt());
    }
    if (from.has_today_cane_get_exp()) {
      set_today_cane_get_exp(from.today_cane_get_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Dungeon_Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Dungeon_Base::CopyFrom(const GS2C_Dungeon_Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Dungeon_Base::IsInitialized() const {

  return true;
}

void GS2C_Dungeon_Base::Swap(GS2C_Dungeon_Base* other) {
  if (other != this) {
    std::swap(dngeon_levle_, other->dngeon_levle_);
    std::swap(silver_for_build_, other->silver_for_build_);
    std::swap(cane_levle_, other->cane_levle_);
    std::swap(cane_exp_, other->cane_exp_);
    std::swap(free_try_cane_, other->free_try_cane_);
    std::swap(cane_temp_levle_, other->cane_temp_levle_);
    std::swap(cane_temp_time_, other->cane_temp_time_);
    std::swap(today_catch_hero_cnt_, other->today_catch_hero_cnt_);
    std::swap(catch_hero_cnt_for_exp_, other->catch_hero_cnt_for_exp_);
    std::swap(catch_hero_time_, other->catch_hero_time_);
    std::swap(today_cane_cnt_, other->today_cane_cnt_);
    std::swap(today_cane_get_exp_, other->today_cane_get_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Dungeon_Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Dungeon_Base_descriptor_;
  metadata.reflection = GS2C_Dungeon_Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Dungeon_All_Info::kBaseInfoFieldNumber;
const int GS2C_Dungeon_All_Info::kCatchHeroFieldNumber;
#endif  // !_MSC_VER

GS2C_Dungeon_All_Info::GS2C_Dungeon_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Dungeon_All_Info::InitAsDefaultInstance() {
  base_info_ = const_cast< ::pb::GS2C_Dungeon_Base*>(&::pb::GS2C_Dungeon_Base::default_instance());
}

GS2C_Dungeon_All_Info::GS2C_Dungeon_All_Info(const GS2C_Dungeon_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Dungeon_All_Info::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Dungeon_All_Info::~GS2C_Dungeon_All_Info() {
  SharedDtor();
}

void GS2C_Dungeon_All_Info::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void GS2C_Dungeon_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Dungeon_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Dungeon_All_Info_descriptor_;
}

const GS2C_Dungeon_All_Info& GS2C_Dungeon_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

GS2C_Dungeon_All_Info* GS2C_Dungeon_All_Info::default_instance_ = NULL;

GS2C_Dungeon_All_Info* GS2C_Dungeon_All_Info::New() const {
  return new GS2C_Dungeon_All_Info;
}

void GS2C_Dungeon_All_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::pb::GS2C_Dungeon_Base::Clear();
    }
  }
  catch_hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Dungeon_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.GS2C_Dungeon_Base base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_catch_hero;
        break;
      }

      // repeated .pb.CatchHero catch_hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_catch_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_catch_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_catch_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Dungeon_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.GS2C_Dungeon_Base base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }

  // repeated .pb.CatchHero catch_hero = 2;
  for (int i = 0; i < this->catch_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->catch_hero(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Dungeon_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.GS2C_Dungeon_Base base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }

  // repeated .pb.CatchHero catch_hero = 2;
  for (int i = 0; i < this->catch_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->catch_hero(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Dungeon_All_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.GS2C_Dungeon_Base base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  // repeated .pb.CatchHero catch_hero = 2;
  total_size += 1 * this->catch_hero_size();
  for (int i = 0; i < this->catch_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->catch_hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Dungeon_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Dungeon_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Dungeon_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Dungeon_All_Info::MergeFrom(const GS2C_Dungeon_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  catch_hero_.MergeFrom(from.catch_hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::pb::GS2C_Dungeon_Base::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Dungeon_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Dungeon_All_Info::CopyFrom(const GS2C_Dungeon_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Dungeon_All_Info::IsInitialized() const {

  for (int i = 0; i < catch_hero_size(); i++) {
    if (!this->catch_hero(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Dungeon_All_Info::Swap(GS2C_Dungeon_All_Info* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    catch_hero_.Swap(&other->catch_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Dungeon_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Dungeon_All_Info_descriptor_;
  metadata.reflection = GS2C_Dungeon_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Dungeon_Add_Hero::kHeroFieldNumber;
#endif  // !_MSC_VER

GS2C_Dungeon_Add_Hero::GS2C_Dungeon_Add_Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Dungeon_Add_Hero::InitAsDefaultInstance() {
  hero_ = const_cast< ::pb::CatchHero*>(&::pb::CatchHero::default_instance());
}

GS2C_Dungeon_Add_Hero::GS2C_Dungeon_Add_Hero(const GS2C_Dungeon_Add_Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Dungeon_Add_Hero::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Dungeon_Add_Hero::~GS2C_Dungeon_Add_Hero() {
  SharedDtor();
}

void GS2C_Dungeon_Add_Hero::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void GS2C_Dungeon_Add_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Dungeon_Add_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Dungeon_Add_Hero_descriptor_;
}

const GS2C_Dungeon_Add_Hero& GS2C_Dungeon_Add_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

GS2C_Dungeon_Add_Hero* GS2C_Dungeon_Add_Hero::default_instance_ = NULL;

GS2C_Dungeon_Add_Hero* GS2C_Dungeon_Add_Hero::New() const {
  return new GS2C_Dungeon_Add_Hero;
}

void GS2C_Dungeon_Add_Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::pb::CatchHero::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Dungeon_Add_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.CatchHero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Dungeon_Add_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.CatchHero hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Dungeon_Add_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.CatchHero hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Dungeon_Add_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.CatchHero hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Dungeon_Add_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Dungeon_Add_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Dungeon_Add_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Dungeon_Add_Hero::MergeFrom(const GS2C_Dungeon_Add_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::pb::CatchHero::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Dungeon_Add_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Dungeon_Add_Hero::CopyFrom(const GS2C_Dungeon_Add_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Dungeon_Add_Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Dungeon_Add_Hero::Swap(GS2C_Dungeon_Add_Hero* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Dungeon_Add_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Dungeon_Add_Hero_descriptor_;
  metadata.reflection = GS2C_Dungeon_Add_Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Dungeon_Del_Hero::kHeroFieldNumber;
#endif  // !_MSC_VER

GS2C_Dungeon_Del_Hero::GS2C_Dungeon_Del_Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Dungeon_Del_Hero::InitAsDefaultInstance() {
  hero_ = const_cast< ::pb::CatchHero*>(&::pb::CatchHero::default_instance());
}

GS2C_Dungeon_Del_Hero::GS2C_Dungeon_Del_Hero(const GS2C_Dungeon_Del_Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Dungeon_Del_Hero::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Dungeon_Del_Hero::~GS2C_Dungeon_Del_Hero() {
  SharedDtor();
}

void GS2C_Dungeon_Del_Hero::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void GS2C_Dungeon_Del_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Dungeon_Del_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Dungeon_Del_Hero_descriptor_;
}

const GS2C_Dungeon_Del_Hero& GS2C_Dungeon_Del_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

GS2C_Dungeon_Del_Hero* GS2C_Dungeon_Del_Hero::default_instance_ = NULL;

GS2C_Dungeon_Del_Hero* GS2C_Dungeon_Del_Hero::New() const {
  return new GS2C_Dungeon_Del_Hero;
}

void GS2C_Dungeon_Del_Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::pb::CatchHero::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Dungeon_Del_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.CatchHero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Dungeon_Del_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.CatchHero hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Dungeon_Del_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.CatchHero hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Dungeon_Del_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.CatchHero hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Dungeon_Del_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Dungeon_Del_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Dungeon_Del_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Dungeon_Del_Hero::MergeFrom(const GS2C_Dungeon_Del_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::pb::CatchHero::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Dungeon_Del_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Dungeon_Del_Hero::CopyFrom(const GS2C_Dungeon_Del_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Dungeon_Del_Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Dungeon_Del_Hero::Swap(GS2C_Dungeon_Del_Hero* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Dungeon_Del_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Dungeon_Del_Hero_descriptor_;
  metadata.reflection = GS2C_Dungeon_Del_Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Dungeon_Build_By_Silver::kIsFastFieldNumber;
#endif  // !_MSC_VER

C2GS_Dungeon_Build_By_Silver::C2GS_Dungeon_Build_By_Silver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Dungeon_Build_By_Silver::InitAsDefaultInstance() {
}

C2GS_Dungeon_Build_By_Silver::C2GS_Dungeon_Build_By_Silver(const C2GS_Dungeon_Build_By_Silver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Dungeon_Build_By_Silver::SharedCtor() {
  _cached_size_ = 0;
  is_fast_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Dungeon_Build_By_Silver::~C2GS_Dungeon_Build_By_Silver() {
  SharedDtor();
}

void C2GS_Dungeon_Build_By_Silver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Dungeon_Build_By_Silver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Dungeon_Build_By_Silver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Dungeon_Build_By_Silver_descriptor_;
}

const C2GS_Dungeon_Build_By_Silver& C2GS_Dungeon_Build_By_Silver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

C2GS_Dungeon_Build_By_Silver* C2GS_Dungeon_Build_By_Silver::default_instance_ = NULL;

C2GS_Dungeon_Build_By_Silver* C2GS_Dungeon_Build_By_Silver::New() const {
  return new C2GS_Dungeon_Build_By_Silver;
}

void C2GS_Dungeon_Build_By_Silver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_fast_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Dungeon_Build_By_Silver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_fast = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fast_)));
          set_has_is_fast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Dungeon_Build_By_Silver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_fast = 1;
  if (has_is_fast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_fast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Dungeon_Build_By_Silver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_fast = 1;
  if (has_is_fast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_fast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Dungeon_Build_By_Silver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_fast = 1;
    if (has_is_fast()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Dungeon_Build_By_Silver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Dungeon_Build_By_Silver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Dungeon_Build_By_Silver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Dungeon_Build_By_Silver::MergeFrom(const C2GS_Dungeon_Build_By_Silver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_fast()) {
      set_is_fast(from.is_fast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Dungeon_Build_By_Silver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Dungeon_Build_By_Silver::CopyFrom(const C2GS_Dungeon_Build_By_Silver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Dungeon_Build_By_Silver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Dungeon_Build_By_Silver::Swap(C2GS_Dungeon_Build_By_Silver* other) {
  if (other != this) {
    std::swap(is_fast_, other->is_fast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Dungeon_Build_By_Silver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Dungeon_Build_By_Silver_descriptor_;
  metadata.reflection = C2GS_Dungeon_Build_By_Silver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Dungeon_Cane_Fase_LevelUp::kDstLvFieldNumber;
#endif  // !_MSC_VER

C2GS_Dungeon_Cane_Fase_LevelUp::C2GS_Dungeon_Cane_Fase_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Dungeon_Cane_Fase_LevelUp::InitAsDefaultInstance() {
}

C2GS_Dungeon_Cane_Fase_LevelUp::C2GS_Dungeon_Cane_Fase_LevelUp(const C2GS_Dungeon_Cane_Fase_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Dungeon_Cane_Fase_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  dst_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Dungeon_Cane_Fase_LevelUp::~C2GS_Dungeon_Cane_Fase_LevelUp() {
  SharedDtor();
}

void C2GS_Dungeon_Cane_Fase_LevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Dungeon_Cane_Fase_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Dungeon_Cane_Fase_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Dungeon_Cane_Fase_LevelUp_descriptor_;
}

const C2GS_Dungeon_Cane_Fase_LevelUp& C2GS_Dungeon_Cane_Fase_LevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

C2GS_Dungeon_Cane_Fase_LevelUp* C2GS_Dungeon_Cane_Fase_LevelUp::default_instance_ = NULL;

C2GS_Dungeon_Cane_Fase_LevelUp* C2GS_Dungeon_Cane_Fase_LevelUp::New() const {
  return new C2GS_Dungeon_Cane_Fase_LevelUp;
}

void C2GS_Dungeon_Cane_Fase_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Dungeon_Cane_Fase_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dst_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_lv_)));
          set_has_dst_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Dungeon_Cane_Fase_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dst_lv = 1;
  if (has_dst_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dst_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Dungeon_Cane_Fase_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dst_lv = 1;
  if (has_dst_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dst_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Dungeon_Cane_Fase_LevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dst_lv = 1;
    if (has_dst_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Dungeon_Cane_Fase_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Dungeon_Cane_Fase_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Dungeon_Cane_Fase_LevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Dungeon_Cane_Fase_LevelUp::MergeFrom(const C2GS_Dungeon_Cane_Fase_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_lv()) {
      set_dst_lv(from.dst_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Dungeon_Cane_Fase_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Dungeon_Cane_Fase_LevelUp::CopyFrom(const C2GS_Dungeon_Cane_Fase_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Dungeon_Cane_Fase_LevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Dungeon_Cane_Fase_LevelUp::Swap(C2GS_Dungeon_Cane_Fase_LevelUp* other) {
  if (other != this) {
    std::swap(dst_lv_, other->dst_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Dungeon_Cane_Fase_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Dungeon_Cane_Fase_LevelUp_descriptor_;
  metadata.reflection = C2GS_Dungeon_Cane_Fase_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Dungeon_Try_Cane::kDstLvFieldNumber;
#endif  // !_MSC_VER

C2GS_Dungeon_Try_Cane::C2GS_Dungeon_Try_Cane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Dungeon_Try_Cane::InitAsDefaultInstance() {
}

C2GS_Dungeon_Try_Cane::C2GS_Dungeon_Try_Cane(const C2GS_Dungeon_Try_Cane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Dungeon_Try_Cane::SharedCtor() {
  _cached_size_ = 0;
  dst_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Dungeon_Try_Cane::~C2GS_Dungeon_Try_Cane() {
  SharedDtor();
}

void C2GS_Dungeon_Try_Cane::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Dungeon_Try_Cane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Dungeon_Try_Cane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Dungeon_Try_Cane_descriptor_;
}

const C2GS_Dungeon_Try_Cane& C2GS_Dungeon_Try_Cane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

C2GS_Dungeon_Try_Cane* C2GS_Dungeon_Try_Cane::default_instance_ = NULL;

C2GS_Dungeon_Try_Cane* C2GS_Dungeon_Try_Cane::New() const {
  return new C2GS_Dungeon_Try_Cane;
}

void C2GS_Dungeon_Try_Cane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Dungeon_Try_Cane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dst_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_lv_)));
          set_has_dst_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Dungeon_Try_Cane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dst_lv = 1;
  if (has_dst_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dst_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Dungeon_Try_Cane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dst_lv = 1;
  if (has_dst_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dst_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Dungeon_Try_Cane::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dst_lv = 1;
    if (has_dst_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Dungeon_Try_Cane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Dungeon_Try_Cane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Dungeon_Try_Cane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Dungeon_Try_Cane::MergeFrom(const C2GS_Dungeon_Try_Cane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_lv()) {
      set_dst_lv(from.dst_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Dungeon_Try_Cane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Dungeon_Try_Cane::CopyFrom(const C2GS_Dungeon_Try_Cane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Dungeon_Try_Cane::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Dungeon_Try_Cane::Swap(C2GS_Dungeon_Try_Cane* other) {
  if (other != this) {
    std::swap(dst_lv_, other->dst_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Dungeon_Try_Cane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Dungeon_Try_Cane_descriptor_;
  metadata.reflection = C2GS_Dungeon_Try_Cane_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Dungeon_Escape::kHeroIdxFieldNumber;
#endif  // !_MSC_VER

C2GS_Dungeon_Escape::C2GS_Dungeon_Escape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Dungeon_Escape::InitAsDefaultInstance() {
}

C2GS_Dungeon_Escape::C2GS_Dungeon_Escape(const C2GS_Dungeon_Escape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Dungeon_Escape::SharedCtor() {
  _cached_size_ = 0;
  hero_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Dungeon_Escape::~C2GS_Dungeon_Escape() {
  SharedDtor();
}

void C2GS_Dungeon_Escape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Dungeon_Escape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Dungeon_Escape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Dungeon_Escape_descriptor_;
}

const C2GS_Dungeon_Escape& C2GS_Dungeon_Escape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

C2GS_Dungeon_Escape* C2GS_Dungeon_Escape::default_instance_ = NULL;

C2GS_Dungeon_Escape* C2GS_Dungeon_Escape::New() const {
  return new C2GS_Dungeon_Escape;
}

void C2GS_Dungeon_Escape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Dungeon_Escape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_idx_)));
          set_has_hero_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Dungeon_Escape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_idx = 1;
  if (has_hero_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Dungeon_Escape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_idx = 1;
  if (has_hero_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Dungeon_Escape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_idx = 1;
    if (has_hero_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Dungeon_Escape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Dungeon_Escape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Dungeon_Escape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Dungeon_Escape::MergeFrom(const C2GS_Dungeon_Escape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_idx()) {
      set_hero_idx(from.hero_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Dungeon_Escape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Dungeon_Escape::CopyFrom(const C2GS_Dungeon_Escape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Dungeon_Escape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Dungeon_Escape::Swap(C2GS_Dungeon_Escape* other) {
  if (other != this) {
    std::swap(hero_idx_, other->hero_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Dungeon_Escape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Dungeon_Escape_descriptor_;
  metadata.reflection = C2GS_Dungeon_Escape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Dungeon_Escape::kHeroTidFieldNumber;
const int GS2C_Dungeon_Escape::kNeedSecondFieldNumber;
#endif  // !_MSC_VER

GS2C_Dungeon_Escape::GS2C_Dungeon_Escape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Dungeon_Escape::InitAsDefaultInstance() {
}

GS2C_Dungeon_Escape::GS2C_Dungeon_Escape(const GS2C_Dungeon_Escape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Dungeon_Escape::SharedCtor() {
  _cached_size_ = 0;
  hero_tid_ = 0u;
  need_second_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Dungeon_Escape::~GS2C_Dungeon_Escape() {
  SharedDtor();
}

void GS2C_Dungeon_Escape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Dungeon_Escape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Dungeon_Escape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Dungeon_Escape_descriptor_;
}

const GS2C_Dungeon_Escape& GS2C_Dungeon_Escape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

GS2C_Dungeon_Escape* GS2C_Dungeon_Escape::default_instance_ = NULL;

GS2C_Dungeon_Escape* GS2C_Dungeon_Escape::New() const {
  return new GS2C_Dungeon_Escape;
}

void GS2C_Dungeon_Escape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_tid_ = 0u;
    need_second_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Dungeon_Escape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_second;
        break;
      }

      // required uint32 need_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_second_)));
          set_has_need_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Dungeon_Escape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_tid = 1;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_tid(), output);
  }

  // required uint32 need_second = 2;
  if (has_need_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->need_second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Dungeon_Escape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_tid = 1;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_tid(), target);
  }

  // required uint32 need_second = 2;
  if (has_need_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->need_second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Dungeon_Escape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_tid = 1;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // required uint32 need_second = 2;
    if (has_need_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Dungeon_Escape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Dungeon_Escape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Dungeon_Escape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Dungeon_Escape::MergeFrom(const GS2C_Dungeon_Escape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_need_second()) {
      set_need_second(from.need_second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Dungeon_Escape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Dungeon_Escape::CopyFrom(const GS2C_Dungeon_Escape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Dungeon_Escape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Dungeon_Escape::Swap(GS2C_Dungeon_Escape* other) {
  if (other != this) {
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(need_second_, other->need_second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Dungeon_Escape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Dungeon_Escape_descriptor_;
  metadata.reflection = GS2C_Dungeon_Escape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_HERO_BE_CATCH::kHeroTidFieldNumber;
const int GS2C_HERO_BE_CATCH::kDungeonOwnerPlayerIdFieldNumber;
#endif  // !_MSC_VER

GS2C_HERO_BE_CATCH::GS2C_HERO_BE_CATCH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_HERO_BE_CATCH::InitAsDefaultInstance() {
}

GS2C_HERO_BE_CATCH::GS2C_HERO_BE_CATCH(const GS2C_HERO_BE_CATCH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_HERO_BE_CATCH::SharedCtor() {
  _cached_size_ = 0;
  hero_tid_ = 0u;
  dungeon_owner_player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_HERO_BE_CATCH::~GS2C_HERO_BE_CATCH() {
  SharedDtor();
}

void GS2C_HERO_BE_CATCH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_HERO_BE_CATCH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_HERO_BE_CATCH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_HERO_BE_CATCH_descriptor_;
}

const GS2C_HERO_BE_CATCH& GS2C_HERO_BE_CATCH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

GS2C_HERO_BE_CATCH* GS2C_HERO_BE_CATCH::default_instance_ = NULL;

GS2C_HERO_BE_CATCH* GS2C_HERO_BE_CATCH::New() const {
  return new GS2C_HERO_BE_CATCH;
}

void GS2C_HERO_BE_CATCH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_tid_ = 0u;
    dungeon_owner_player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_HERO_BE_CATCH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dungeon_owner_player_id;
        break;
      }

      // required uint64 dungeon_owner_player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_owner_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dungeon_owner_player_id_)));
          set_has_dungeon_owner_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_HERO_BE_CATCH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_tid = 1;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_tid(), output);
  }

  // required uint64 dungeon_owner_player_id = 2;
  if (has_dungeon_owner_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dungeon_owner_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_HERO_BE_CATCH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_tid = 1;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_tid(), target);
  }

  // required uint64 dungeon_owner_player_id = 2;
  if (has_dungeon_owner_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dungeon_owner_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_HERO_BE_CATCH::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_tid = 1;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // required uint64 dungeon_owner_player_id = 2;
    if (has_dungeon_owner_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dungeon_owner_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_HERO_BE_CATCH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_HERO_BE_CATCH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_HERO_BE_CATCH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_HERO_BE_CATCH::MergeFrom(const GS2C_HERO_BE_CATCH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_dungeon_owner_player_id()) {
      set_dungeon_owner_player_id(from.dungeon_owner_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_HERO_BE_CATCH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_HERO_BE_CATCH::CopyFrom(const GS2C_HERO_BE_CATCH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_HERO_BE_CATCH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_HERO_BE_CATCH::Swap(GS2C_HERO_BE_CATCH* other) {
  if (other != this) {
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(dungeon_owner_player_id_, other->dungeon_owner_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_HERO_BE_CATCH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_HERO_BE_CATCH_descriptor_;
  metadata.reflection = GS2C_HERO_BE_CATCH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Dungeon_Cane::kSuccessFieldNumber;
const int GS2C_Dungeon_Cane::kPlayerExpFieldNumber;
#endif  // !_MSC_VER

GS2C_Dungeon_Cane::GS2C_Dungeon_Cane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Dungeon_Cane::InitAsDefaultInstance() {
}

GS2C_Dungeon_Cane::GS2C_Dungeon_Cane(const GS2C_Dungeon_Cane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Dungeon_Cane::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  player_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Dungeon_Cane::~GS2C_Dungeon_Cane() {
  SharedDtor();
}

void GS2C_Dungeon_Cane::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Dungeon_Cane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Dungeon_Cane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Dungeon_Cane_descriptor_;
}

const GS2C_Dungeon_Cane& GS2C_Dungeon_Cane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dungeon_2eproto();
  return *default_instance_;
}

GS2C_Dungeon_Cane* GS2C_Dungeon_Cane::default_instance_ = NULL;

GS2C_Dungeon_Cane* GS2C_Dungeon_Cane::New() const {
  return new GS2C_Dungeon_Cane;
}

void GS2C_Dungeon_Cane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    player_exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Dungeon_Cane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_exp;
        break;
      }

      // required uint32 player_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_exp_)));
          set_has_player_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Dungeon_Cane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required uint32 player_exp = 2;
  if (has_player_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Dungeon_Cane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required uint32 player_exp = 2;
  if (has_player_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Dungeon_Cane::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // required uint32 player_exp = 2;
    if (has_player_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Dungeon_Cane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Dungeon_Cane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Dungeon_Cane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Dungeon_Cane::MergeFrom(const GS2C_Dungeon_Cane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_player_exp()) {
      set_player_exp(from.player_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Dungeon_Cane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Dungeon_Cane::CopyFrom(const GS2C_Dungeon_Cane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Dungeon_Cane::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Dungeon_Cane::Swap(GS2C_Dungeon_Cane* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(player_exp_, other->player_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Dungeon_Cane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Dungeon_Cane_descriptor_;
  metadata.reflection = GS2C_Dungeon_Cane_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
