// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapLogic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MapLogic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GS2C_MapLogic_Init_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_MapLogic_Init_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_MapLogic_ArmyResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_MapLogic_ArmyResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_Army_Resource_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_Army_Resource_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_All_CITY_EVENT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_All_CITY_EVENT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_CITY_EVENT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_CITY_EVENT_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_TAKE_EVENT_AWARD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_TAKE_EVENT_AWARD_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_Award_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_Award_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_REQUEST_FOG_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_REQUEST_FOG_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_FOG_INFO_Lst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_FOG_INFO_Lst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_FOG_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_FOG_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Enter_Fog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Enter_Fog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_UNLOCK_FOGS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_UNLOCK_FOGS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TakeResourceBack_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* take_award_ret_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MapLogic_2eproto() {
  protobuf_AddDesc_MapLogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MapLogic.proto");
  GOOGLE_CHECK(file != NULL);
  GS2C_MapLogic_Init_descriptor_ = file->message_type(0);
  static const int GS2C_MapLogic_Init_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, take_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, unlock_fog_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, tonden_hero_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, country_donate_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, monster_donate_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, has_take_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, lianbing_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, army_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, event_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, public_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, fog_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, tonden_cdend_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, personalec_),
  };
  GS2C_MapLogic_Init_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_MapLogic_Init_descriptor_,
      GS2C_MapLogic_Init::default_instance_,
      GS2C_MapLogic_Init_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_Init, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_MapLogic_Init));
  GS2C_MapLogic_ArmyResource_descriptor_ = file->message_type(1);
  static const int GS2C_MapLogic_ArmyResource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_ArmyResource, update_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_ArmyResource, update_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_ArmyResource, resource_lst_),
  };
  GS2C_MapLogic_ArmyResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_MapLogic_ArmyResource_descriptor_,
      GS2C_MapLogic_ArmyResource::default_instance_,
      GS2C_MapLogic_ArmyResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_ArmyResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MapLogic_ArmyResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_MapLogic_ArmyResource));
  GS2C_Take_Army_Resource_Result_descriptor_ = file->message_type(2);
  static const int GS2C_Take_Army_Resource_Result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Army_Resource_Result, backmsg_),
  };
  GS2C_Take_Army_Resource_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_Army_Resource_Result_descriptor_,
      GS2C_Take_Army_Resource_Result::default_instance_,
      GS2C_Take_Army_Resource_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Army_Resource_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Army_Resource_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_Army_Resource_Result));
  GS2C_All_CITY_EVENT_descriptor_ = file->message_type(3);
  static const int GS2C_All_CITY_EVENT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_All_CITY_EVENT, event_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_All_CITY_EVENT, public_lst_),
  };
  GS2C_All_CITY_EVENT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_All_CITY_EVENT_descriptor_,
      GS2C_All_CITY_EVENT::default_instance_,
      GS2C_All_CITY_EVENT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_All_CITY_EVENT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_All_CITY_EVENT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_All_CITY_EVENT));
  GS2C_CITY_EVENT_descriptor_ = file->message_type(4);
  static const int GS2C_CITY_EVENT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CITY_EVENT, city_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CITY_EVENT, ispublicevent_),
  };
  GS2C_CITY_EVENT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_CITY_EVENT_descriptor_,
      GS2C_CITY_EVENT::default_instance_,
      GS2C_CITY_EVENT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CITY_EVENT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CITY_EVENT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_CITY_EVENT));
  C2GS_TAKE_EVENT_AWARD_descriptor_ = file->message_type(5);
  static const int C2GS_TAKE_EVENT_AWARD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_TAKE_EVENT_AWARD, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_TAKE_EVENT_AWARD, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_TAKE_EVENT_AWARD, award_index_),
  };
  C2GS_TAKE_EVENT_AWARD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_TAKE_EVENT_AWARD_descriptor_,
      C2GS_TAKE_EVENT_AWARD::default_instance_,
      C2GS_TAKE_EVENT_AWARD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_TAKE_EVENT_AWARD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_TAKE_EVENT_AWARD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_TAKE_EVENT_AWARD));
  CityEvent_descriptor_ = file->message_type(6);
  static const int CityEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, happen_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, daily_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, is_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, iscelebrity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, event_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, take_players_),
  };
  CityEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityEvent_descriptor_,
      CityEvent::default_instance_,
      CityEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityEvent));
  GS2C_Take_Award_Ret_descriptor_ = file->message_type(7);
  static const int GS2C_Take_Award_Ret_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Award_Ret, ret_),
  };
  GS2C_Take_Award_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_Award_Ret_descriptor_,
      GS2C_Take_Award_Ret::default_instance_,
      GS2C_Take_Award_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Award_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Award_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_Award_Ret));
  C2GS_REQUEST_FOG_INFO_descriptor_ = file->message_type(8);
  static const int C2GS_REQUEST_FOG_INFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_REQUEST_FOG_INFO, fog_id_),
  };
  C2GS_REQUEST_FOG_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_REQUEST_FOG_INFO_descriptor_,
      C2GS_REQUEST_FOG_INFO::default_instance_,
      C2GS_REQUEST_FOG_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_REQUEST_FOG_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_REQUEST_FOG_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_REQUEST_FOG_INFO));
  GS2C_FOG_INFO_Lst_descriptor_ = file->message_type(9);
  static const int GS2C_FOG_INFO_Lst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FOG_INFO_Lst, fog_lst_),
  };
  GS2C_FOG_INFO_Lst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_FOG_INFO_Lst_descriptor_,
      GS2C_FOG_INFO_Lst::default_instance_,
      GS2C_FOG_INFO_Lst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FOG_INFO_Lst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FOG_INFO_Lst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_FOG_INFO_Lst));
  Struct_FOG_INFO_descriptor_ = file->message_type(10);
  static const int Struct_FOG_INFO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_FOG_INFO, fog_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_FOG_INFO, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_FOG_INFO, guard_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_FOG_INFO, guard_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_FOG_INFO, guard_up_hp_),
  };
  Struct_FOG_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_FOG_INFO_descriptor_,
      Struct_FOG_INFO::default_instance_,
      Struct_FOG_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_FOG_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_FOG_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_FOG_INFO));
  C2GS_Enter_Fog_descriptor_ = file->message_type(11);
  static const int C2GS_Enter_Fog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Fog, fog_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Fog, hero_id_),
  };
  C2GS_Enter_Fog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Enter_Fog_descriptor_,
      C2GS_Enter_Fog::default_instance_,
      C2GS_Enter_Fog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Fog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Fog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Enter_Fog));
  GS2C_UNLOCK_FOGS_descriptor_ = file->message_type(12);
  static const int GS2C_UNLOCK_FOGS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_UNLOCK_FOGS, unlock_fog_city_),
  };
  GS2C_UNLOCK_FOGS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_UNLOCK_FOGS_descriptor_,
      GS2C_UNLOCK_FOGS::default_instance_,
      GS2C_UNLOCK_FOGS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_UNLOCK_FOGS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_UNLOCK_FOGS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_UNLOCK_FOGS));
  TakeResourceBack_descriptor_ = file->enum_type(0);
  take_award_ret_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MapLogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_MapLogic_Init_descriptor_, &GS2C_MapLogic_Init::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_MapLogic_ArmyResource_descriptor_, &GS2C_MapLogic_ArmyResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_Army_Resource_Result_descriptor_, &GS2C_Take_Army_Resource_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_All_CITY_EVENT_descriptor_, &GS2C_All_CITY_EVENT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_CITY_EVENT_descriptor_, &GS2C_CITY_EVENT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_TAKE_EVENT_AWARD_descriptor_, &C2GS_TAKE_EVENT_AWARD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityEvent_descriptor_, &CityEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_Award_Ret_descriptor_, &GS2C_Take_Award_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_REQUEST_FOG_INFO_descriptor_, &C2GS_REQUEST_FOG_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_FOG_INFO_Lst_descriptor_, &GS2C_FOG_INFO_Lst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_FOG_INFO_descriptor_, &Struct_FOG_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Enter_Fog_descriptor_, &C2GS_Enter_Fog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_UNLOCK_FOGS_descriptor_, &GS2C_UNLOCK_FOGS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MapLogic_2eproto() {
  delete GS2C_MapLogic_Init::default_instance_;
  delete GS2C_MapLogic_Init_reflection_;
  delete GS2C_MapLogic_ArmyResource::default_instance_;
  delete GS2C_MapLogic_ArmyResource_reflection_;
  delete GS2C_Take_Army_Resource_Result::default_instance_;
  delete GS2C_Take_Army_Resource_Result_reflection_;
  delete GS2C_All_CITY_EVENT::default_instance_;
  delete GS2C_All_CITY_EVENT_reflection_;
  delete GS2C_CITY_EVENT::default_instance_;
  delete GS2C_CITY_EVENT_reflection_;
  delete C2GS_TAKE_EVENT_AWARD::default_instance_;
  delete C2GS_TAKE_EVENT_AWARD_reflection_;
  delete CityEvent::default_instance_;
  delete CityEvent_reflection_;
  delete GS2C_Take_Award_Ret::default_instance_;
  delete GS2C_Take_Award_Ret_reflection_;
  delete C2GS_REQUEST_FOG_INFO::default_instance_;
  delete C2GS_REQUEST_FOG_INFO_reflection_;
  delete GS2C_FOG_INFO_Lst::default_instance_;
  delete GS2C_FOG_INFO_Lst_reflection_;
  delete Struct_FOG_INFO::default_instance_;
  delete Struct_FOG_INFO_reflection_;
  delete C2GS_Enter_Fog::default_instance_;
  delete C2GS_Enter_Fog_reflection_;
  delete GS2C_UNLOCK_FOGS::default_instance_;
  delete GS2C_UNLOCK_FOGS_reflection_;
}

void protobuf_AddDesc_MapLogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::pb::protobuf_AddDesc_InterServer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016MapLogic.proto\022\002pb\032\017CommomDef.proto\032\021I"
    "nterServer.proto\"\361\003\n\022GS2C_MapLogic_Init\022"
    "\022\n\ncountry_id\030\001 \001(\r\022\020\n\010take_box\030\002 \001(\004\022\027\n"
    "\017unlock_fog_city\030\003 \003(\004\022,\n\026tonden_hero_be"
    "gin_time\030\004 \003(\0132\014.pb.PairTime\022\033\n\023country_"
    "donate_time\030\005 \001(\004\022\033\n\023monster_donate_time"
    "\030\006 \001(\004\022$\n\016has_take_award\030\007 \003(\0132\014.pb.Pair"
    "Bool\022\'\n\021lianbing_end_time\030\010 \003(\0132\014.pb.Pai"
    "rTime\0225\n\rarmy_resource\030\t \001(\0132\036.pb.GS2C_M"
    "apLogic_ArmyResource\022!\n\nevent_info\030\n \003(\013"
    "2\r.pb.CityEvent\022!\n\npublic_Lst\030\013 \003(\0132\r.pb"
    ".CityEvent\022$\n\007fog_lst\030\014 \003(\0132\023.pb.Struct_"
    "FOG_INFO\022\031\n\021tonden_CDEnd_time\030\r \001(\004\022\'\n\np"
    "ersonalEc\030\016 \001(\0132\023.pb.SG2D_PersonalEC\"j\n\032"
    "GS2C_MapLogic_ArmyResource\022\022\n\nupdate_day"
    "\030\001 \002(\r\022\023\n\013update_hour\030\002 \002(\r\022#\n\014resource_"
    "lst\030\003 \003(\0132\r.pb.PairValue\"G\n\036GS2C_Take_Ar"
    "my_Resource_Result\022%\n\007backmsg\030\001 \001(\0162\024.pb"
    ".TakeResourceBack\"Z\n\023GS2C_All_CITY_EVENT"
    "\022 \n\tevent_Lst\030\001 \003(\0132\r.pb.CityEvent\022!\n\npu"
    "blic_Lst\030\002 \003(\0132\r.pb.CityEvent\"K\n\017GS2C_CI"
    "TY_EVENT\022!\n\ncity_event\030\001 \002(\0132\r.pb.CityEv"
    "ent\022\025\n\risPublicEvent\030\002 \001(\010\"O\n\025C2GS_TAKE_"
    "EVENT_AWARD\022\017\n\007city_id\030\001 \002(\r\022\020\n\010event_id"
    "\030\002 \001(\r\022\023\n\013award_index\030\003 \001(\r\"\277\001\n\tCityEven"
    "t\022\020\n\010event_id\030\001 \001(\r\022\023\n\013happen_time\030\002 \001(\004"
    "\022\023\n\013daily_times\030\003 \001(\r\022\017\n\007city_id\030\004 \001(\r\022\020"
    "\n\010is_begin\030\005 \001(\010\022\023\n\013isCelebrity\030\006 \001(\010\022\020\n"
    "\010left_num\030\007 \001(\r\022\026\n\016event_end_time\030\010 \001(\004\022"
    "\024\n\014take_players\030\t \003(\004\"6\n\023GS2C_Take_Award"
    "_Ret\022\037\n\003ret\030\001 \002(\0162\022.pb.take_award_ret\"\'\n"
    "\025C2GS_REQUEST_FOG_INFO\022\016\n\006fog_id\030\001 \003(\004\"9"
    "\n\021GS2C_FOG_INFO_Lst\022$\n\007fog_lst\030\001 \003(\0132\023.p"
    "b.Struct_FOG_INFO\"\213\001\n\017Struct_FOG_INFO\022\016\n"
    "\006fog_id\030\001 \001(\r\022\020\n\010uniqueid\030\002 \001(\004\022\037\n\010guard"
    "_hp\030\003 \003(\0132\r.pb.PairValue\022 \n\tguard_max\030\004 "
    "\003(\0132\r.pb.PairValue\022\023\n\013guard_up_hp\030\005 \001(\r\""
    "1\n\016C2GS_Enter_Fog\022\016\n\006fog_id\030\001 \002(\r\022\017\n\007her"
    "o_id\030\002 \003(\r\"+\n\020GS2C_UNLOCK_FOGS\022\027\n\017unlock"
    "_fog_city\030\001 \003(\004*\?\n\020TakeResourceBack\022\013\n\007S"
    "uccess\020\000\022\020\n\014LevelIllegal\020\001\022\014\n\010NoAwards\020\002"
    "*\234\001\n\016take_award_ret\022\020\n\014AwardSuccess\020\001\022\016\n"
    "\nCommonFail\020\002\022\022\n\016CityInFighting\020\003\022\016\n\nNoH"
    "eroHere\020\004\022\n\n\006NoCity\020\005\022\014\n\010CostFail\020\006\022\017\n\013S"
    "electError\020\007\022\013\n\007NoEvent\020\010\022\014\n\010HasTaken\020\t", 1799);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MapLogic.proto", &protobuf_RegisterTypes);
  GS2C_MapLogic_Init::default_instance_ = new GS2C_MapLogic_Init();
  GS2C_MapLogic_ArmyResource::default_instance_ = new GS2C_MapLogic_ArmyResource();
  GS2C_Take_Army_Resource_Result::default_instance_ = new GS2C_Take_Army_Resource_Result();
  GS2C_All_CITY_EVENT::default_instance_ = new GS2C_All_CITY_EVENT();
  GS2C_CITY_EVENT::default_instance_ = new GS2C_CITY_EVENT();
  C2GS_TAKE_EVENT_AWARD::default_instance_ = new C2GS_TAKE_EVENT_AWARD();
  CityEvent::default_instance_ = new CityEvent();
  GS2C_Take_Award_Ret::default_instance_ = new GS2C_Take_Award_Ret();
  C2GS_REQUEST_FOG_INFO::default_instance_ = new C2GS_REQUEST_FOG_INFO();
  GS2C_FOG_INFO_Lst::default_instance_ = new GS2C_FOG_INFO_Lst();
  Struct_FOG_INFO::default_instance_ = new Struct_FOG_INFO();
  C2GS_Enter_Fog::default_instance_ = new C2GS_Enter_Fog();
  GS2C_UNLOCK_FOGS::default_instance_ = new GS2C_UNLOCK_FOGS();
  GS2C_MapLogic_Init::default_instance_->InitAsDefaultInstance();
  GS2C_MapLogic_ArmyResource::default_instance_->InitAsDefaultInstance();
  GS2C_Take_Army_Resource_Result::default_instance_->InitAsDefaultInstance();
  GS2C_All_CITY_EVENT::default_instance_->InitAsDefaultInstance();
  GS2C_CITY_EVENT::default_instance_->InitAsDefaultInstance();
  C2GS_TAKE_EVENT_AWARD::default_instance_->InitAsDefaultInstance();
  CityEvent::default_instance_->InitAsDefaultInstance();
  GS2C_Take_Award_Ret::default_instance_->InitAsDefaultInstance();
  C2GS_REQUEST_FOG_INFO::default_instance_->InitAsDefaultInstance();
  GS2C_FOG_INFO_Lst::default_instance_->InitAsDefaultInstance();
  Struct_FOG_INFO::default_instance_->InitAsDefaultInstance();
  C2GS_Enter_Fog::default_instance_->InitAsDefaultInstance();
  GS2C_UNLOCK_FOGS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MapLogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MapLogic_2eproto {
  StaticDescriptorInitializer_MapLogic_2eproto() {
    protobuf_AddDesc_MapLogic_2eproto();
  }
} static_descriptor_initializer_MapLogic_2eproto_;
const ::google::protobuf::EnumDescriptor* TakeResourceBack_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeResourceBack_descriptor_;
}
bool TakeResourceBack_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* take_award_ret_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return take_award_ret_descriptor_;
}
bool take_award_ret_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_MapLogic_Init::kCountryIdFieldNumber;
const int GS2C_MapLogic_Init::kTakeBoxFieldNumber;
const int GS2C_MapLogic_Init::kUnlockFogCityFieldNumber;
const int GS2C_MapLogic_Init::kTondenHeroBeginTimeFieldNumber;
const int GS2C_MapLogic_Init::kCountryDonateTimeFieldNumber;
const int GS2C_MapLogic_Init::kMonsterDonateTimeFieldNumber;
const int GS2C_MapLogic_Init::kHasTakeAwardFieldNumber;
const int GS2C_MapLogic_Init::kLianbingEndTimeFieldNumber;
const int GS2C_MapLogic_Init::kArmyResourceFieldNumber;
const int GS2C_MapLogic_Init::kEventInfoFieldNumber;
const int GS2C_MapLogic_Init::kPublicLstFieldNumber;
const int GS2C_MapLogic_Init::kFogLstFieldNumber;
const int GS2C_MapLogic_Init::kTondenCDEndTimeFieldNumber;
const int GS2C_MapLogic_Init::kPersonalEcFieldNumber;
#endif  // !_MSC_VER

GS2C_MapLogic_Init::GS2C_MapLogic_Init()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_MapLogic_Init::InitAsDefaultInstance() {
  army_resource_ = const_cast< ::pb::GS2C_MapLogic_ArmyResource*>(&::pb::GS2C_MapLogic_ArmyResource::default_instance());
  personalec_ = const_cast< ::pb::SG2D_PersonalEC*>(&::pb::SG2D_PersonalEC::default_instance());
}

GS2C_MapLogic_Init::GS2C_MapLogic_Init(const GS2C_MapLogic_Init& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_MapLogic_Init::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  take_box_ = GOOGLE_ULONGLONG(0);
  country_donate_time_ = GOOGLE_ULONGLONG(0);
  monster_donate_time_ = GOOGLE_ULONGLONG(0);
  army_resource_ = NULL;
  tonden_cdend_time_ = GOOGLE_ULONGLONG(0);
  personalec_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_MapLogic_Init::~GS2C_MapLogic_Init() {
  SharedDtor();
}

void GS2C_MapLogic_Init::SharedDtor() {
  if (this != default_instance_) {
    delete army_resource_;
    delete personalec_;
  }
}

void GS2C_MapLogic_Init::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_MapLogic_Init::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_MapLogic_Init_descriptor_;
}

const GS2C_MapLogic_Init& GS2C_MapLogic_Init::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

GS2C_MapLogic_Init* GS2C_MapLogic_Init::default_instance_ = NULL;

GS2C_MapLogic_Init* GS2C_MapLogic_Init::New() const {
  return new GS2C_MapLogic_Init;
}

void GS2C_MapLogic_Init::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    take_box_ = GOOGLE_ULONGLONG(0);
    country_donate_time_ = GOOGLE_ULONGLONG(0);
    monster_donate_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_army_resource()) {
      if (army_resource_ != NULL) army_resource_->::pb::GS2C_MapLogic_ArmyResource::Clear();
    }
    tonden_cdend_time_ = GOOGLE_ULONGLONG(0);
    if (has_personalec()) {
      if (personalec_ != NULL) personalec_->::pb::SG2D_PersonalEC::Clear();
    }
  }
  unlock_fog_city_.Clear();
  tonden_hero_begin_time_.Clear();
  has_take_award_.Clear();
  lianbing_end_time_.Clear();
  event_info_.Clear();
  public_lst_.Clear();
  fog_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_MapLogic_Init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_take_box;
        break;
      }

      // optional uint64 take_box = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &take_box_)));
          set_has_take_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlock_fog_city;
        break;
      }

      // repeated uint64 unlock_fog_city = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_fog_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_unlock_fog_city())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unlock_fog_city())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlock_fog_city;
        if (input->ExpectTag(34)) goto parse_tonden_hero_begin_time;
        break;
      }

      // repeated .pb.PairTime tonden_hero_begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tonden_hero_begin_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tonden_hero_begin_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tonden_hero_begin_time;
        if (input->ExpectTag(40)) goto parse_country_donate_time;
        break;
      }

      // optional uint64 country_donate_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_donate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &country_donate_time_)));
          set_has_country_donate_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster_donate_time;
        break;
      }

      // optional uint64 monster_donate_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_donate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monster_donate_time_)));
          set_has_monster_donate_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_has_take_award;
        break;
      }

      // repeated .pb.PairBool has_take_award = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_has_take_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_has_take_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_has_take_award;
        if (input->ExpectTag(66)) goto parse_lianbing_end_time;
        break;
      }

      // repeated .pb.PairTime lianbing_end_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lianbing_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lianbing_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lianbing_end_time;
        if (input->ExpectTag(74)) goto parse_army_resource;
        break;
      }

      // optional .pb.GS2C_MapLogic_ArmyResource army_resource = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_event_info;
        break;
      }

      // repeated .pb.CityEvent event_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_event_info;
        if (input->ExpectTag(90)) goto parse_public_Lst;
        break;
      }

      // repeated .pb.CityEvent public_Lst = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_Lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_public_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_public_Lst;
        if (input->ExpectTag(98)) goto parse_fog_lst;
        break;
      }

      // repeated .pb.Struct_FOG_INFO fog_lst = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fog_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fog_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fog_lst;
        if (input->ExpectTag(104)) goto parse_tonden_CDEnd_time;
        break;
      }

      // optional uint64 tonden_CDEnd_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tonden_CDEnd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tonden_cdend_time_)));
          set_has_tonden_cdend_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_personalEc;
        break;
      }

      // optional .pb.SG2D_PersonalEC personalEc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_personalEc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_MapLogic_Init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint64 take_box = 2;
  if (has_take_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->take_box(), output);
  }

  // repeated uint64 unlock_fog_city = 3;
  for (int i = 0; i < this->unlock_fog_city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->unlock_fog_city(i), output);
  }

  // repeated .pb.PairTime tonden_hero_begin_time = 4;
  for (int i = 0; i < this->tonden_hero_begin_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tonden_hero_begin_time(i), output);
  }

  // optional uint64 country_donate_time = 5;
  if (has_country_donate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->country_donate_time(), output);
  }

  // optional uint64 monster_donate_time = 6;
  if (has_monster_donate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->monster_donate_time(), output);
  }

  // repeated .pb.PairBool has_take_award = 7;
  for (int i = 0; i < this->has_take_award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->has_take_award(i), output);
  }

  // repeated .pb.PairTime lianbing_end_time = 8;
  for (int i = 0; i < this->lianbing_end_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lianbing_end_time(i), output);
  }

  // optional .pb.GS2C_MapLogic_ArmyResource army_resource = 9;
  if (has_army_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->army_resource(), output);
  }

  // repeated .pb.CityEvent event_info = 10;
  for (int i = 0; i < this->event_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->event_info(i), output);
  }

  // repeated .pb.CityEvent public_Lst = 11;
  for (int i = 0; i < this->public_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->public_lst(i), output);
  }

  // repeated .pb.Struct_FOG_INFO fog_lst = 12;
  for (int i = 0; i < this->fog_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fog_lst(i), output);
  }

  // optional uint64 tonden_CDEnd_time = 13;
  if (has_tonden_cdend_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->tonden_cdend_time(), output);
  }

  // optional .pb.SG2D_PersonalEC personalEc = 14;
  if (has_personalec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->personalec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_MapLogic_Init::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint64 take_box = 2;
  if (has_take_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->take_box(), target);
  }

  // repeated uint64 unlock_fog_city = 3;
  for (int i = 0; i < this->unlock_fog_city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->unlock_fog_city(i), target);
  }

  // repeated .pb.PairTime tonden_hero_begin_time = 4;
  for (int i = 0; i < this->tonden_hero_begin_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tonden_hero_begin_time(i), target);
  }

  // optional uint64 country_donate_time = 5;
  if (has_country_donate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->country_donate_time(), target);
  }

  // optional uint64 monster_donate_time = 6;
  if (has_monster_donate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->monster_donate_time(), target);
  }

  // repeated .pb.PairBool has_take_award = 7;
  for (int i = 0; i < this->has_take_award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->has_take_award(i), target);
  }

  // repeated .pb.PairTime lianbing_end_time = 8;
  for (int i = 0; i < this->lianbing_end_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lianbing_end_time(i), target);
  }

  // optional .pb.GS2C_MapLogic_ArmyResource army_resource = 9;
  if (has_army_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->army_resource(), target);
  }

  // repeated .pb.CityEvent event_info = 10;
  for (int i = 0; i < this->event_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->event_info(i), target);
  }

  // repeated .pb.CityEvent public_Lst = 11;
  for (int i = 0; i < this->public_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->public_lst(i), target);
  }

  // repeated .pb.Struct_FOG_INFO fog_lst = 12;
  for (int i = 0; i < this->fog_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fog_lst(i), target);
  }

  // optional uint64 tonden_CDEnd_time = 13;
  if (has_tonden_cdend_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->tonden_cdend_time(), target);
  }

  // optional .pb.SG2D_PersonalEC personalEc = 14;
  if (has_personalec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->personalec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_MapLogic_Init::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint64 take_box = 2;
    if (has_take_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->take_box());
    }

    // optional uint64 country_donate_time = 5;
    if (has_country_donate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->country_donate_time());
    }

    // optional uint64 monster_donate_time = 6;
    if (has_monster_donate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monster_donate_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.GS2C_MapLogic_ArmyResource army_resource = 9;
    if (has_army_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army_resource());
    }

    // optional uint64 tonden_CDEnd_time = 13;
    if (has_tonden_cdend_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tonden_cdend_time());
    }

    // optional .pb.SG2D_PersonalEC personalEc = 14;
    if (has_personalec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalec());
    }

  }
  // repeated uint64 unlock_fog_city = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlock_fog_city_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->unlock_fog_city(i));
    }
    total_size += 1 * this->unlock_fog_city_size() + data_size;
  }

  // repeated .pb.PairTime tonden_hero_begin_time = 4;
  total_size += 1 * this->tonden_hero_begin_time_size();
  for (int i = 0; i < this->tonden_hero_begin_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tonden_hero_begin_time(i));
  }

  // repeated .pb.PairBool has_take_award = 7;
  total_size += 1 * this->has_take_award_size();
  for (int i = 0; i < this->has_take_award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->has_take_award(i));
  }

  // repeated .pb.PairTime lianbing_end_time = 8;
  total_size += 1 * this->lianbing_end_time_size();
  for (int i = 0; i < this->lianbing_end_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lianbing_end_time(i));
  }

  // repeated .pb.CityEvent event_info = 10;
  total_size += 1 * this->event_info_size();
  for (int i = 0; i < this->event_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_info(i));
  }

  // repeated .pb.CityEvent public_Lst = 11;
  total_size += 1 * this->public_lst_size();
  for (int i = 0; i < this->public_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->public_lst(i));
  }

  // repeated .pb.Struct_FOG_INFO fog_lst = 12;
  total_size += 1 * this->fog_lst_size();
  for (int i = 0; i < this->fog_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fog_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_MapLogic_Init::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_MapLogic_Init* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_MapLogic_Init*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_MapLogic_Init::MergeFrom(const GS2C_MapLogic_Init& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlock_fog_city_.MergeFrom(from.unlock_fog_city_);
  tonden_hero_begin_time_.MergeFrom(from.tonden_hero_begin_time_);
  has_take_award_.MergeFrom(from.has_take_award_);
  lianbing_end_time_.MergeFrom(from.lianbing_end_time_);
  event_info_.MergeFrom(from.event_info_);
  public_lst_.MergeFrom(from.public_lst_);
  fog_lst_.MergeFrom(from.fog_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_take_box()) {
      set_take_box(from.take_box());
    }
    if (from.has_country_donate_time()) {
      set_country_donate_time(from.country_donate_time());
    }
    if (from.has_monster_donate_time()) {
      set_monster_donate_time(from.monster_donate_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_army_resource()) {
      mutable_army_resource()->::pb::GS2C_MapLogic_ArmyResource::MergeFrom(from.army_resource());
    }
    if (from.has_tonden_cdend_time()) {
      set_tonden_cdend_time(from.tonden_cdend_time());
    }
    if (from.has_personalec()) {
      mutable_personalec()->::pb::SG2D_PersonalEC::MergeFrom(from.personalec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_MapLogic_Init::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_MapLogic_Init::CopyFrom(const GS2C_MapLogic_Init& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_MapLogic_Init::IsInitialized() const {

  if (has_army_resource()) {
    if (!this->army_resource().IsInitialized()) return false;
  }
  return true;
}

void GS2C_MapLogic_Init::Swap(GS2C_MapLogic_Init* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(take_box_, other->take_box_);
    unlock_fog_city_.Swap(&other->unlock_fog_city_);
    tonden_hero_begin_time_.Swap(&other->tonden_hero_begin_time_);
    std::swap(country_donate_time_, other->country_donate_time_);
    std::swap(monster_donate_time_, other->monster_donate_time_);
    has_take_award_.Swap(&other->has_take_award_);
    lianbing_end_time_.Swap(&other->lianbing_end_time_);
    std::swap(army_resource_, other->army_resource_);
    event_info_.Swap(&other->event_info_);
    public_lst_.Swap(&other->public_lst_);
    fog_lst_.Swap(&other->fog_lst_);
    std::swap(tonden_cdend_time_, other->tonden_cdend_time_);
    std::swap(personalec_, other->personalec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_MapLogic_Init::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_MapLogic_Init_descriptor_;
  metadata.reflection = GS2C_MapLogic_Init_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_MapLogic_ArmyResource::kUpdateDayFieldNumber;
const int GS2C_MapLogic_ArmyResource::kUpdateHourFieldNumber;
const int GS2C_MapLogic_ArmyResource::kResourceLstFieldNumber;
#endif  // !_MSC_VER

GS2C_MapLogic_ArmyResource::GS2C_MapLogic_ArmyResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_MapLogic_ArmyResource::InitAsDefaultInstance() {
}

GS2C_MapLogic_ArmyResource::GS2C_MapLogic_ArmyResource(const GS2C_MapLogic_ArmyResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_MapLogic_ArmyResource::SharedCtor() {
  _cached_size_ = 0;
  update_day_ = 0u;
  update_hour_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_MapLogic_ArmyResource::~GS2C_MapLogic_ArmyResource() {
  SharedDtor();
}

void GS2C_MapLogic_ArmyResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_MapLogic_ArmyResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_MapLogic_ArmyResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_MapLogic_ArmyResource_descriptor_;
}

const GS2C_MapLogic_ArmyResource& GS2C_MapLogic_ArmyResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

GS2C_MapLogic_ArmyResource* GS2C_MapLogic_ArmyResource::default_instance_ = NULL;

GS2C_MapLogic_ArmyResource* GS2C_MapLogic_ArmyResource::New() const {
  return new GS2C_MapLogic_ArmyResource;
}

void GS2C_MapLogic_ArmyResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_day_ = 0u;
    update_hour_ = 0u;
  }
  resource_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_MapLogic_ArmyResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 update_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_day_)));
          set_has_update_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_hour;
        break;
      }

      // required uint32 update_hour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_hour_)));
          set_has_update_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource_lst;
        break;
      }

      // repeated .pb.PairValue resource_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_MapLogic_ArmyResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 update_day = 1;
  if (has_update_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_day(), output);
  }

  // required uint32 update_hour = 2;
  if (has_update_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_hour(), output);
  }

  // repeated .pb.PairValue resource_lst = 3;
  for (int i = 0; i < this->resource_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resource_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_MapLogic_ArmyResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 update_day = 1;
  if (has_update_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_day(), target);
  }

  // required uint32 update_hour = 2;
  if (has_update_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_hour(), target);
  }

  // repeated .pb.PairValue resource_lst = 3;
  for (int i = 0; i < this->resource_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resource_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_MapLogic_ArmyResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 update_day = 1;
    if (has_update_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_day());
    }

    // required uint32 update_hour = 2;
    if (has_update_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_hour());
    }

  }
  // repeated .pb.PairValue resource_lst = 3;
  total_size += 1 * this->resource_lst_size();
  for (int i = 0; i < this->resource_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_MapLogic_ArmyResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_MapLogic_ArmyResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_MapLogic_ArmyResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_MapLogic_ArmyResource::MergeFrom(const GS2C_MapLogic_ArmyResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_lst_.MergeFrom(from.resource_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_day()) {
      set_update_day(from.update_day());
    }
    if (from.has_update_hour()) {
      set_update_hour(from.update_hour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_MapLogic_ArmyResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_MapLogic_ArmyResource::CopyFrom(const GS2C_MapLogic_ArmyResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_MapLogic_ArmyResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_MapLogic_ArmyResource::Swap(GS2C_MapLogic_ArmyResource* other) {
  if (other != this) {
    std::swap(update_day_, other->update_day_);
    std::swap(update_hour_, other->update_hour_);
    resource_lst_.Swap(&other->resource_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_MapLogic_ArmyResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_MapLogic_ArmyResource_descriptor_;
  metadata.reflection = GS2C_MapLogic_ArmyResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_Army_Resource_Result::kBackmsgFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_Army_Resource_Result::GS2C_Take_Army_Resource_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_Army_Resource_Result::InitAsDefaultInstance() {
}

GS2C_Take_Army_Resource_Result::GS2C_Take_Army_Resource_Result(const GS2C_Take_Army_Resource_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_Army_Resource_Result::SharedCtor() {
  _cached_size_ = 0;
  backmsg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_Army_Resource_Result::~GS2C_Take_Army_Resource_Result() {
  SharedDtor();
}

void GS2C_Take_Army_Resource_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Take_Army_Resource_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_Army_Resource_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_Army_Resource_Result_descriptor_;
}

const GS2C_Take_Army_Resource_Result& GS2C_Take_Army_Resource_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

GS2C_Take_Army_Resource_Result* GS2C_Take_Army_Resource_Result::default_instance_ = NULL;

GS2C_Take_Army_Resource_Result* GS2C_Take_Army_Resource_Result::New() const {
  return new GS2C_Take_Army_Resource_Result;
}

void GS2C_Take_Army_Resource_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    backmsg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_Army_Resource_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TakeResourceBack backmsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::TakeResourceBack_IsValid(value)) {
            set_backmsg(static_cast< ::pb::TakeResourceBack >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_Army_Resource_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.TakeResourceBack backmsg = 1;
  if (has_backmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->backmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_Army_Resource_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.TakeResourceBack backmsg = 1;
  if (has_backmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->backmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_Army_Resource_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TakeResourceBack backmsg = 1;
    if (has_backmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_Army_Resource_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_Army_Resource_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_Army_Resource_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_Army_Resource_Result::MergeFrom(const GS2C_Take_Army_Resource_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_backmsg()) {
      set_backmsg(from.backmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_Army_Resource_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_Army_Resource_Result::CopyFrom(const GS2C_Take_Army_Resource_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_Army_Resource_Result::IsInitialized() const {

  return true;
}

void GS2C_Take_Army_Resource_Result::Swap(GS2C_Take_Army_Resource_Result* other) {
  if (other != this) {
    std::swap(backmsg_, other->backmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_Army_Resource_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_Army_Resource_Result_descriptor_;
  metadata.reflection = GS2C_Take_Army_Resource_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_All_CITY_EVENT::kEventLstFieldNumber;
const int GS2C_All_CITY_EVENT::kPublicLstFieldNumber;
#endif  // !_MSC_VER

GS2C_All_CITY_EVENT::GS2C_All_CITY_EVENT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_All_CITY_EVENT::InitAsDefaultInstance() {
}

GS2C_All_CITY_EVENT::GS2C_All_CITY_EVENT(const GS2C_All_CITY_EVENT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_All_CITY_EVENT::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_All_CITY_EVENT::~GS2C_All_CITY_EVENT() {
  SharedDtor();
}

void GS2C_All_CITY_EVENT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_All_CITY_EVENT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_All_CITY_EVENT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_All_CITY_EVENT_descriptor_;
}

const GS2C_All_CITY_EVENT& GS2C_All_CITY_EVENT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

GS2C_All_CITY_EVENT* GS2C_All_CITY_EVENT::default_instance_ = NULL;

GS2C_All_CITY_EVENT* GS2C_All_CITY_EVENT::New() const {
  return new GS2C_All_CITY_EVENT;
}

void GS2C_All_CITY_EVENT::Clear() {
  event_lst_.Clear();
  public_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_All_CITY_EVENT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CityEvent event_Lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_Lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event_Lst;
        if (input->ExpectTag(18)) goto parse_public_Lst;
        break;
      }

      // repeated .pb.CityEvent public_Lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_Lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_public_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_Lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_All_CITY_EVENT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CityEvent event_Lst = 1;
  for (int i = 0; i < this->event_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_lst(i), output);
  }

  // repeated .pb.CityEvent public_Lst = 2;
  for (int i = 0; i < this->public_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->public_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_All_CITY_EVENT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CityEvent event_Lst = 1;
  for (int i = 0; i < this->event_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event_lst(i), target);
  }

  // repeated .pb.CityEvent public_Lst = 2;
  for (int i = 0; i < this->public_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->public_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_All_CITY_EVENT::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CityEvent event_Lst = 1;
  total_size += 1 * this->event_lst_size();
  for (int i = 0; i < this->event_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_lst(i));
  }

  // repeated .pb.CityEvent public_Lst = 2;
  total_size += 1 * this->public_lst_size();
  for (int i = 0; i < this->public_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->public_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_All_CITY_EVENT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_All_CITY_EVENT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_All_CITY_EVENT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_All_CITY_EVENT::MergeFrom(const GS2C_All_CITY_EVENT& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_lst_.MergeFrom(from.event_lst_);
  public_lst_.MergeFrom(from.public_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_All_CITY_EVENT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_All_CITY_EVENT::CopyFrom(const GS2C_All_CITY_EVENT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_All_CITY_EVENT::IsInitialized() const {

  return true;
}

void GS2C_All_CITY_EVENT::Swap(GS2C_All_CITY_EVENT* other) {
  if (other != this) {
    event_lst_.Swap(&other->event_lst_);
    public_lst_.Swap(&other->public_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_All_CITY_EVENT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_All_CITY_EVENT_descriptor_;
  metadata.reflection = GS2C_All_CITY_EVENT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_CITY_EVENT::kCityEventFieldNumber;
const int GS2C_CITY_EVENT::kIsPublicEventFieldNumber;
#endif  // !_MSC_VER

GS2C_CITY_EVENT::GS2C_CITY_EVENT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_CITY_EVENT::InitAsDefaultInstance() {
  city_event_ = const_cast< ::pb::CityEvent*>(&::pb::CityEvent::default_instance());
}

GS2C_CITY_EVENT::GS2C_CITY_EVENT(const GS2C_CITY_EVENT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_CITY_EVENT::SharedCtor() {
  _cached_size_ = 0;
  city_event_ = NULL;
  ispublicevent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_CITY_EVENT::~GS2C_CITY_EVENT() {
  SharedDtor();
}

void GS2C_CITY_EVENT::SharedDtor() {
  if (this != default_instance_) {
    delete city_event_;
  }
}

void GS2C_CITY_EVENT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_CITY_EVENT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_CITY_EVENT_descriptor_;
}

const GS2C_CITY_EVENT& GS2C_CITY_EVENT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

GS2C_CITY_EVENT* GS2C_CITY_EVENT::default_instance_ = NULL;

GS2C_CITY_EVENT* GS2C_CITY_EVENT::New() const {
  return new GS2C_CITY_EVENT;
}

void GS2C_CITY_EVENT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_city_event()) {
      if (city_event_ != NULL) city_event_->::pb::CityEvent::Clear();
    }
    ispublicevent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_CITY_EVENT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.CityEvent city_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isPublicEvent;
        break;
      }

      // optional bool isPublicEvent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPublicEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispublicevent_)));
          set_has_ispublicevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_CITY_EVENT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.CityEvent city_event = 1;
  if (has_city_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->city_event(), output);
  }

  // optional bool isPublicEvent = 2;
  if (has_ispublicevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ispublicevent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_CITY_EVENT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.CityEvent city_event = 1;
  if (has_city_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->city_event(), target);
  }

  // optional bool isPublicEvent = 2;
  if (has_ispublicevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispublicevent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_CITY_EVENT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.CityEvent city_event = 1;
    if (has_city_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city_event());
    }

    // optional bool isPublicEvent = 2;
    if (has_ispublicevent()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_CITY_EVENT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_CITY_EVENT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_CITY_EVENT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_CITY_EVENT::MergeFrom(const GS2C_CITY_EVENT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_event()) {
      mutable_city_event()->::pb::CityEvent::MergeFrom(from.city_event());
    }
    if (from.has_ispublicevent()) {
      set_ispublicevent(from.ispublicevent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_CITY_EVENT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_CITY_EVENT::CopyFrom(const GS2C_CITY_EVENT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_CITY_EVENT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_CITY_EVENT::Swap(GS2C_CITY_EVENT* other) {
  if (other != this) {
    std::swap(city_event_, other->city_event_);
    std::swap(ispublicevent_, other->ispublicevent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_CITY_EVENT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_CITY_EVENT_descriptor_;
  metadata.reflection = GS2C_CITY_EVENT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_TAKE_EVENT_AWARD::kCityIdFieldNumber;
const int C2GS_TAKE_EVENT_AWARD::kEventIdFieldNumber;
const int C2GS_TAKE_EVENT_AWARD::kAwardIndexFieldNumber;
#endif  // !_MSC_VER

C2GS_TAKE_EVENT_AWARD::C2GS_TAKE_EVENT_AWARD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_TAKE_EVENT_AWARD::InitAsDefaultInstance() {
}

C2GS_TAKE_EVENT_AWARD::C2GS_TAKE_EVENT_AWARD(const C2GS_TAKE_EVENT_AWARD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_TAKE_EVENT_AWARD::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  event_id_ = 0u;
  award_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_TAKE_EVENT_AWARD::~C2GS_TAKE_EVENT_AWARD() {
  SharedDtor();
}

void C2GS_TAKE_EVENT_AWARD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_TAKE_EVENT_AWARD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_TAKE_EVENT_AWARD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_TAKE_EVENT_AWARD_descriptor_;
}

const C2GS_TAKE_EVENT_AWARD& C2GS_TAKE_EVENT_AWARD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

C2GS_TAKE_EVENT_AWARD* C2GS_TAKE_EVENT_AWARD::default_instance_ = NULL;

C2GS_TAKE_EVENT_AWARD* C2GS_TAKE_EVENT_AWARD::New() const {
  return new C2GS_TAKE_EVENT_AWARD;
}

void C2GS_TAKE_EVENT_AWARD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
    event_id_ = 0u;
    award_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_TAKE_EVENT_AWARD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_award_index;
        break;
      }

      // optional uint32 award_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &award_index_)));
          set_has_award_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_TAKE_EVENT_AWARD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint32 award_index = 3;
  if (has_award_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->award_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_TAKE_EVENT_AWARD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint32 award_index = 3;
  if (has_award_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->award_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_TAKE_EVENT_AWARD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 award_index = 3;
    if (has_award_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->award_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_TAKE_EVENT_AWARD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_TAKE_EVENT_AWARD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_TAKE_EVENT_AWARD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_TAKE_EVENT_AWARD::MergeFrom(const C2GS_TAKE_EVENT_AWARD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_award_index()) {
      set_award_index(from.award_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_TAKE_EVENT_AWARD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_TAKE_EVENT_AWARD::CopyFrom(const C2GS_TAKE_EVENT_AWARD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_TAKE_EVENT_AWARD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_TAKE_EVENT_AWARD::Swap(C2GS_TAKE_EVENT_AWARD* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(award_index_, other->award_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_TAKE_EVENT_AWARD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_TAKE_EVENT_AWARD_descriptor_;
  metadata.reflection = C2GS_TAKE_EVENT_AWARD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityEvent::kEventIdFieldNumber;
const int CityEvent::kHappenTimeFieldNumber;
const int CityEvent::kDailyTimesFieldNumber;
const int CityEvent::kCityIdFieldNumber;
const int CityEvent::kIsBeginFieldNumber;
const int CityEvent::kIsCelebrityFieldNumber;
const int CityEvent::kLeftNumFieldNumber;
const int CityEvent::kEventEndTimeFieldNumber;
const int CityEvent::kTakePlayersFieldNumber;
#endif  // !_MSC_VER

CityEvent::CityEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CityEvent::InitAsDefaultInstance() {
}

CityEvent::CityEvent(const CityEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CityEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  happen_time_ = GOOGLE_ULONGLONG(0);
  daily_times_ = 0u;
  city_id_ = 0u;
  is_begin_ = false;
  iscelebrity_ = false;
  left_num_ = 0u;
  event_end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityEvent::~CityEvent() {
  SharedDtor();
}

void CityEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityEvent_descriptor_;
}

const CityEvent& CityEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

CityEvent* CityEvent::default_instance_ = NULL;

CityEvent* CityEvent::New() const {
  return new CityEvent;
}

void CityEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
    happen_time_ = GOOGLE_ULONGLONG(0);
    daily_times_ = 0u;
    city_id_ = 0u;
    is_begin_ = false;
    iscelebrity_ = false;
    left_num_ = 0u;
    event_end_time_ = GOOGLE_ULONGLONG(0);
  }
  take_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_happen_time;
        break;
      }

      // optional uint64 happen_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_happen_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &happen_time_)));
          set_has_happen_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daily_times;
        break;
      }

      // optional uint32 daily_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_times_)));
          set_has_daily_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_city_id;
        break;
      }

      // optional uint32 city_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_begin;
        break;
      }

      // optional bool is_begin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_begin_)));
          set_has_is_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isCelebrity;
        break;
      }

      // optional bool isCelebrity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCelebrity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscelebrity_)));
          set_has_iscelebrity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_left_num;
        break;
      }

      // optional uint32 left_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_event_end_time;
        break;
      }

      // optional uint64 event_end_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_end_time_)));
          set_has_event_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_take_players;
        break;
      }

      // repeated uint64 take_players = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72, input, this->mutable_take_players())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_take_players())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_take_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint64 happen_time = 2;
  if (has_happen_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->happen_time(), output);
  }

  // optional uint32 daily_times = 3;
  if (has_daily_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daily_times(), output);
  }

  // optional uint32 city_id = 4;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->city_id(), output);
  }

  // optional bool is_begin = 5;
  if (has_is_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_begin(), output);
  }

  // optional bool isCelebrity = 6;
  if (has_iscelebrity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->iscelebrity(), output);
  }

  // optional uint32 left_num = 7;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->left_num(), output);
  }

  // optional uint64 event_end_time = 8;
  if (has_event_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->event_end_time(), output);
  }

  // repeated uint64 take_players = 9;
  for (int i = 0; i < this->take_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->take_players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CityEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint64 happen_time = 2;
  if (has_happen_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->happen_time(), target);
  }

  // optional uint32 daily_times = 3;
  if (has_daily_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daily_times(), target);
  }

  // optional uint32 city_id = 4;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->city_id(), target);
  }

  // optional bool is_begin = 5;
  if (has_is_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_begin(), target);
  }

  // optional bool isCelebrity = 6;
  if (has_iscelebrity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->iscelebrity(), target);
  }

  // optional uint32 left_num = 7;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->left_num(), target);
  }

  // optional uint64 event_end_time = 8;
  if (has_event_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->event_end_time(), target);
  }

  // repeated uint64 take_players = 9;
  for (int i = 0; i < this->take_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(9, this->take_players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 happen_time = 2;
    if (has_happen_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->happen_time());
    }

    // optional uint32 daily_times = 3;
    if (has_daily_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_times());
    }

    // optional uint32 city_id = 4;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional bool is_begin = 5;
    if (has_is_begin()) {
      total_size += 1 + 1;
    }

    // optional bool isCelebrity = 6;
    if (has_iscelebrity()) {
      total_size += 1 + 1;
    }

    // optional uint32 left_num = 7;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_num());
    }

    // optional uint64 event_end_time = 8;
    if (has_event_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_end_time());
    }

  }
  // repeated uint64 take_players = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->take_players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->take_players(i));
    }
    total_size += 1 * this->take_players_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityEvent::MergeFrom(const CityEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  take_players_.MergeFrom(from.take_players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_happen_time()) {
      set_happen_time(from.happen_time());
    }
    if (from.has_daily_times()) {
      set_daily_times(from.daily_times());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_is_begin()) {
      set_is_begin(from.is_begin());
    }
    if (from.has_iscelebrity()) {
      set_iscelebrity(from.iscelebrity());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_event_end_time()) {
      set_event_end_time(from.event_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityEvent::CopyFrom(const CityEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityEvent::IsInitialized() const {

  return true;
}

void CityEvent::Swap(CityEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(happen_time_, other->happen_time_);
    std::swap(daily_times_, other->daily_times_);
    std::swap(city_id_, other->city_id_);
    std::swap(is_begin_, other->is_begin_);
    std::swap(iscelebrity_, other->iscelebrity_);
    std::swap(left_num_, other->left_num_);
    std::swap(event_end_time_, other->event_end_time_);
    take_players_.Swap(&other->take_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityEvent_descriptor_;
  metadata.reflection = CityEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_Award_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_Award_Ret::GS2C_Take_Award_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_Award_Ret::InitAsDefaultInstance() {
}

GS2C_Take_Award_Ret::GS2C_Take_Award_Ret(const GS2C_Take_Award_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_Award_Ret::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_Award_Ret::~GS2C_Take_Award_Ret() {
  SharedDtor();
}

void GS2C_Take_Award_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Take_Award_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_Award_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_Award_Ret_descriptor_;
}

const GS2C_Take_Award_Ret& GS2C_Take_Award_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

GS2C_Take_Award_Ret* GS2C_Take_Award_Ret::default_instance_ = NULL;

GS2C_Take_Award_Ret* GS2C_Take_Award_Ret::New() const {
  return new GS2C_Take_Award_Ret;
}

void GS2C_Take_Award_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_Award_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.take_award_ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::take_award_ret_IsValid(value)) {
            set_ret(static_cast< ::pb::take_award_ret >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_Award_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.take_award_ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_Award_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.take_award_ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_Award_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.take_award_ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_Award_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_Award_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_Award_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_Award_Ret::MergeFrom(const GS2C_Take_Award_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_Award_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_Award_Ret::CopyFrom(const GS2C_Take_Award_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_Award_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Take_Award_Ret::Swap(GS2C_Take_Award_Ret* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_Award_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_Award_Ret_descriptor_;
  metadata.reflection = GS2C_Take_Award_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_REQUEST_FOG_INFO::kFogIdFieldNumber;
#endif  // !_MSC_VER

C2GS_REQUEST_FOG_INFO::C2GS_REQUEST_FOG_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_REQUEST_FOG_INFO::InitAsDefaultInstance() {
}

C2GS_REQUEST_FOG_INFO::C2GS_REQUEST_FOG_INFO(const C2GS_REQUEST_FOG_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_REQUEST_FOG_INFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_REQUEST_FOG_INFO::~C2GS_REQUEST_FOG_INFO() {
  SharedDtor();
}

void C2GS_REQUEST_FOG_INFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_REQUEST_FOG_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_REQUEST_FOG_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_REQUEST_FOG_INFO_descriptor_;
}

const C2GS_REQUEST_FOG_INFO& C2GS_REQUEST_FOG_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

C2GS_REQUEST_FOG_INFO* C2GS_REQUEST_FOG_INFO::default_instance_ = NULL;

C2GS_REQUEST_FOG_INFO* C2GS_REQUEST_FOG_INFO::New() const {
  return new C2GS_REQUEST_FOG_INFO;
}

void C2GS_REQUEST_FOG_INFO::Clear() {
  fog_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_REQUEST_FOG_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 fog_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fog_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_fog_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fog_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fog_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_REQUEST_FOG_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 fog_id = 1;
  for (int i = 0; i < this->fog_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->fog_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_REQUEST_FOG_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 fog_id = 1;
  for (int i = 0; i < this->fog_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->fog_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_REQUEST_FOG_INFO::ByteSize() const {
  int total_size = 0;

  // repeated uint64 fog_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fog_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->fog_id(i));
    }
    total_size += 1 * this->fog_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_REQUEST_FOG_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_REQUEST_FOG_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_REQUEST_FOG_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_REQUEST_FOG_INFO::MergeFrom(const C2GS_REQUEST_FOG_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  fog_id_.MergeFrom(from.fog_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_REQUEST_FOG_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_REQUEST_FOG_INFO::CopyFrom(const C2GS_REQUEST_FOG_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_REQUEST_FOG_INFO::IsInitialized() const {

  return true;
}

void C2GS_REQUEST_FOG_INFO::Swap(C2GS_REQUEST_FOG_INFO* other) {
  if (other != this) {
    fog_id_.Swap(&other->fog_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_REQUEST_FOG_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_REQUEST_FOG_INFO_descriptor_;
  metadata.reflection = C2GS_REQUEST_FOG_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_FOG_INFO_Lst::kFogLstFieldNumber;
#endif  // !_MSC_VER

GS2C_FOG_INFO_Lst::GS2C_FOG_INFO_Lst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_FOG_INFO_Lst::InitAsDefaultInstance() {
}

GS2C_FOG_INFO_Lst::GS2C_FOG_INFO_Lst(const GS2C_FOG_INFO_Lst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_FOG_INFO_Lst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_FOG_INFO_Lst::~GS2C_FOG_INFO_Lst() {
  SharedDtor();
}

void GS2C_FOG_INFO_Lst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_FOG_INFO_Lst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_FOG_INFO_Lst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_FOG_INFO_Lst_descriptor_;
}

const GS2C_FOG_INFO_Lst& GS2C_FOG_INFO_Lst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

GS2C_FOG_INFO_Lst* GS2C_FOG_INFO_Lst::default_instance_ = NULL;

GS2C_FOG_INFO_Lst* GS2C_FOG_INFO_Lst::New() const {
  return new GS2C_FOG_INFO_Lst;
}

void GS2C_FOG_INFO_Lst::Clear() {
  fog_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_FOG_INFO_Lst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Struct_FOG_INFO fog_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fog_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fog_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fog_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_FOG_INFO_Lst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Struct_FOG_INFO fog_lst = 1;
  for (int i = 0; i < this->fog_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fog_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_FOG_INFO_Lst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Struct_FOG_INFO fog_lst = 1;
  for (int i = 0; i < this->fog_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fog_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_FOG_INFO_Lst::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Struct_FOG_INFO fog_lst = 1;
  total_size += 1 * this->fog_lst_size();
  for (int i = 0; i < this->fog_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fog_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_FOG_INFO_Lst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_FOG_INFO_Lst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_FOG_INFO_Lst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_FOG_INFO_Lst::MergeFrom(const GS2C_FOG_INFO_Lst& from) {
  GOOGLE_CHECK_NE(&from, this);
  fog_lst_.MergeFrom(from.fog_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_FOG_INFO_Lst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_FOG_INFO_Lst::CopyFrom(const GS2C_FOG_INFO_Lst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_FOG_INFO_Lst::IsInitialized() const {

  return true;
}

void GS2C_FOG_INFO_Lst::Swap(GS2C_FOG_INFO_Lst* other) {
  if (other != this) {
    fog_lst_.Swap(&other->fog_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_FOG_INFO_Lst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_FOG_INFO_Lst_descriptor_;
  metadata.reflection = GS2C_FOG_INFO_Lst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_FOG_INFO::kFogIdFieldNumber;
const int Struct_FOG_INFO::kUniqueidFieldNumber;
const int Struct_FOG_INFO::kGuardHpFieldNumber;
const int Struct_FOG_INFO::kGuardMaxFieldNumber;
const int Struct_FOG_INFO::kGuardUpHpFieldNumber;
#endif  // !_MSC_VER

Struct_FOG_INFO::Struct_FOG_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_FOG_INFO::InitAsDefaultInstance() {
}

Struct_FOG_INFO::Struct_FOG_INFO(const Struct_FOG_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_FOG_INFO::SharedCtor() {
  _cached_size_ = 0;
  fog_id_ = 0u;
  uniqueid_ = GOOGLE_ULONGLONG(0);
  guard_up_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_FOG_INFO::~Struct_FOG_INFO() {
  SharedDtor();
}

void Struct_FOG_INFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Struct_FOG_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_FOG_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_FOG_INFO_descriptor_;
}

const Struct_FOG_INFO& Struct_FOG_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

Struct_FOG_INFO* Struct_FOG_INFO::default_instance_ = NULL;

Struct_FOG_INFO* Struct_FOG_INFO::New() const {
  return new Struct_FOG_INFO;
}

void Struct_FOG_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fog_id_ = 0u;
    uniqueid_ = GOOGLE_ULONGLONG(0);
    guard_up_hp_ = 0u;
  }
  guard_hp_.Clear();
  guard_max_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_FOG_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fog_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fog_id_)));
          set_has_fog_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uniqueid;
        break;
      }

      // optional uint64 uniqueid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guard_hp;
        break;
      }

      // repeated .pb.PairValue guard_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guard_hp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guard_hp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guard_hp;
        if (input->ExpectTag(34)) goto parse_guard_max;
        break;
      }

      // repeated .pb.PairValue guard_max = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guard_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guard_max()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guard_max;
        if (input->ExpectTag(40)) goto parse_guard_up_hp;
        break;
      }

      // optional uint32 guard_up_hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guard_up_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guard_up_hp_)));
          set_has_guard_up_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_FOG_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fog_id = 1;
  if (has_fog_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fog_id(), output);
  }

  // optional uint64 uniqueid = 2;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uniqueid(), output);
  }

  // repeated .pb.PairValue guard_hp = 3;
  for (int i = 0; i < this->guard_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->guard_hp(i), output);
  }

  // repeated .pb.PairValue guard_max = 4;
  for (int i = 0; i < this->guard_max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guard_max(i), output);
  }

  // optional uint32 guard_up_hp = 5;
  if (has_guard_up_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->guard_up_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_FOG_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fog_id = 1;
  if (has_fog_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fog_id(), target);
  }

  // optional uint64 uniqueid = 2;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uniqueid(), target);
  }

  // repeated .pb.PairValue guard_hp = 3;
  for (int i = 0; i < this->guard_hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->guard_hp(i), target);
  }

  // repeated .pb.PairValue guard_max = 4;
  for (int i = 0; i < this->guard_max_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guard_max(i), target);
  }

  // optional uint32 guard_up_hp = 5;
  if (has_guard_up_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->guard_up_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_FOG_INFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fog_id = 1;
    if (has_fog_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fog_id());
    }

    // optional uint64 uniqueid = 2;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqueid());
    }

    // optional uint32 guard_up_hp = 5;
    if (has_guard_up_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guard_up_hp());
    }

  }
  // repeated .pb.PairValue guard_hp = 3;
  total_size += 1 * this->guard_hp_size();
  for (int i = 0; i < this->guard_hp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guard_hp(i));
  }

  // repeated .pb.PairValue guard_max = 4;
  total_size += 1 * this->guard_max_size();
  for (int i = 0; i < this->guard_max_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guard_max(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_FOG_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_FOG_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_FOG_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_FOG_INFO::MergeFrom(const Struct_FOG_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  guard_hp_.MergeFrom(from.guard_hp_);
  guard_max_.MergeFrom(from.guard_max_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fog_id()) {
      set_fog_id(from.fog_id());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_guard_up_hp()) {
      set_guard_up_hp(from.guard_up_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_FOG_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_FOG_INFO::CopyFrom(const Struct_FOG_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_FOG_INFO::IsInitialized() const {

  return true;
}

void Struct_FOG_INFO::Swap(Struct_FOG_INFO* other) {
  if (other != this) {
    std::swap(fog_id_, other->fog_id_);
    std::swap(uniqueid_, other->uniqueid_);
    guard_hp_.Swap(&other->guard_hp_);
    guard_max_.Swap(&other->guard_max_);
    std::swap(guard_up_hp_, other->guard_up_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_FOG_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_FOG_INFO_descriptor_;
  metadata.reflection = Struct_FOG_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Enter_Fog::kFogIdFieldNumber;
const int C2GS_Enter_Fog::kHeroIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Enter_Fog::C2GS_Enter_Fog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Enter_Fog::InitAsDefaultInstance() {
}

C2GS_Enter_Fog::C2GS_Enter_Fog(const C2GS_Enter_Fog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Enter_Fog::SharedCtor() {
  _cached_size_ = 0;
  fog_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Enter_Fog::~C2GS_Enter_Fog() {
  SharedDtor();
}

void C2GS_Enter_Fog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Enter_Fog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Enter_Fog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Enter_Fog_descriptor_;
}

const C2GS_Enter_Fog& C2GS_Enter_Fog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

C2GS_Enter_Fog* C2GS_Enter_Fog::default_instance_ = NULL;

C2GS_Enter_Fog* C2GS_Enter_Fog::New() const {
  return new C2GS_Enter_Fog;
}

void C2GS_Enter_Fog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fog_id_ = 0u;
  }
  hero_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Enter_Fog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fog_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fog_id_)));
          set_has_fog_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // repeated uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Enter_Fog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 fog_id = 1;
  if (has_fog_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fog_id(), output);
  }

  // repeated uint32 hero_id = 2;
  for (int i = 0; i < this->hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hero_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Enter_Fog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 fog_id = 1;
  if (has_fog_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fog_id(), target);
  }

  // repeated uint32 hero_id = 2;
  for (int i = 0; i < this->hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hero_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Enter_Fog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fog_id = 1;
    if (has_fog_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fog_id());
    }

  }
  // repeated uint32 hero_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_id(i));
    }
    total_size += 1 * this->hero_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Enter_Fog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Enter_Fog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Enter_Fog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Enter_Fog::MergeFrom(const C2GS_Enter_Fog& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_id_.MergeFrom(from.hero_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fog_id()) {
      set_fog_id(from.fog_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Enter_Fog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Enter_Fog::CopyFrom(const C2GS_Enter_Fog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Enter_Fog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Enter_Fog::Swap(C2GS_Enter_Fog* other) {
  if (other != this) {
    std::swap(fog_id_, other->fog_id_);
    hero_id_.Swap(&other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Enter_Fog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Enter_Fog_descriptor_;
  metadata.reflection = C2GS_Enter_Fog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_UNLOCK_FOGS::kUnlockFogCityFieldNumber;
#endif  // !_MSC_VER

GS2C_UNLOCK_FOGS::GS2C_UNLOCK_FOGS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_UNLOCK_FOGS::InitAsDefaultInstance() {
}

GS2C_UNLOCK_FOGS::GS2C_UNLOCK_FOGS(const GS2C_UNLOCK_FOGS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_UNLOCK_FOGS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_UNLOCK_FOGS::~GS2C_UNLOCK_FOGS() {
  SharedDtor();
}

void GS2C_UNLOCK_FOGS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_UNLOCK_FOGS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_UNLOCK_FOGS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_UNLOCK_FOGS_descriptor_;
}

const GS2C_UNLOCK_FOGS& GS2C_UNLOCK_FOGS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapLogic_2eproto();
  return *default_instance_;
}

GS2C_UNLOCK_FOGS* GS2C_UNLOCK_FOGS::default_instance_ = NULL;

GS2C_UNLOCK_FOGS* GS2C_UNLOCK_FOGS::New() const {
  return new GS2C_UNLOCK_FOGS;
}

void GS2C_UNLOCK_FOGS::Clear() {
  unlock_fog_city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_UNLOCK_FOGS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 unlock_fog_city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_fog_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_unlock_fog_city())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unlock_fog_city())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_unlock_fog_city;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_UNLOCK_FOGS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 unlock_fog_city = 1;
  for (int i = 0; i < this->unlock_fog_city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->unlock_fog_city(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_UNLOCK_FOGS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 unlock_fog_city = 1;
  for (int i = 0; i < this->unlock_fog_city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->unlock_fog_city(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_UNLOCK_FOGS::ByteSize() const {
  int total_size = 0;

  // repeated uint64 unlock_fog_city = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlock_fog_city_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->unlock_fog_city(i));
    }
    total_size += 1 * this->unlock_fog_city_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_UNLOCK_FOGS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_UNLOCK_FOGS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_UNLOCK_FOGS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_UNLOCK_FOGS::MergeFrom(const GS2C_UNLOCK_FOGS& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlock_fog_city_.MergeFrom(from.unlock_fog_city_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_UNLOCK_FOGS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_UNLOCK_FOGS::CopyFrom(const GS2C_UNLOCK_FOGS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_UNLOCK_FOGS::IsInitialized() const {

  return true;
}

void GS2C_UNLOCK_FOGS::Swap(GS2C_UNLOCK_FOGS* other) {
  if (other != this) {
    unlock_fog_city_.Swap(&other->unlock_fog_city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_UNLOCK_FOGS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_UNLOCK_FOGS_descriptor_;
  metadata.reflection = GS2C_UNLOCK_FOGS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
