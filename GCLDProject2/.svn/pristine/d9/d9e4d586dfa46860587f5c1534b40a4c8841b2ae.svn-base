// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* ExploitRankBoxDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploitRankBoxDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankRewardStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankRewardStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Exploit_Rank_Open_Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Exploit_Rank_Open_Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Exploit_Rank_Open_Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Exploit_Rank_Open_Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Trick_Rank_Get_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Trick_Rank_Get_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Occupy_Rank_Get_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Occupy_Rank_Get_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExploitRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploitRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Exploit_Rank_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Exploit_Rank_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrickRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrickRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Trick_Rank_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Trick_Rank_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupyRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupyRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Occupy_Rank_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Occupy_Rank_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_CountryOccupyCityNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_CountryOccupyCityNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_PersonalAddSoldier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_PersonalAddSoldier_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_PersonalOccupyCityNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_PersonalOccupyCityNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SiegeArmyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SiegeArmyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SiegeArmyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SiegeArmyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShenQiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShenQiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShenQiMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShenQiMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MilitaryPowerPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MilitaryPowerPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_MilitaryPowerRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_MilitaryPowerRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Achieve_Congratulate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Achieve_Congratulate_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Congratulate_Accept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Congratulate_Accept_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ListOfCurrentCanCongratulate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ListOfCurrentCanCongratulate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Congratulate_Accept_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Congratulate_Accept_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_CongratulateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_CongratulateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_CongratulateRewardLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_CongratulateRewardLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_CongratulateBeenCongratualted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_CongratulateBeenCongratualted_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Lottery_Daily_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Lottery_Daily_Reward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rank_2eproto() {
  protobuf_AddDesc_Rank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Rank.proto");
  GOOGLE_CHECK(file != NULL);
  ExploitRankBoxDrop_descriptor_ = file->message_type(0);
  static const int ExploitRankBoxDrop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRankBoxDrop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRankBoxDrop, cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRankBoxDrop, strike_),
  };
  ExploitRankBoxDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExploitRankBoxDrop_descriptor_,
      ExploitRankBoxDrop::default_instance_,
      ExploitRankBoxDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRankBoxDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRankBoxDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExploitRankBoxDrop));
  RankRewardStatus_descriptor_ = file->message_type(1);
  static const int RankRewardStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRewardStatus, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRewardStatus, reward_),
  };
  RankRewardStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankRewardStatus_descriptor_,
      RankRewardStatus::default_instance_,
      RankRewardStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRewardStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRewardStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankRewardStatus));
  C2GS_Exploit_Rank_Open_Box_descriptor_ = file->message_type(2);
  static const int C2GS_Exploit_Rank_Open_Box_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Exploit_Rank_Open_Box, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Exploit_Rank_Open_Box, is_all_),
  };
  C2GS_Exploit_Rank_Open_Box_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Exploit_Rank_Open_Box_descriptor_,
      C2GS_Exploit_Rank_Open_Box::default_instance_,
      C2GS_Exploit_Rank_Open_Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Exploit_Rank_Open_Box, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Exploit_Rank_Open_Box, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Exploit_Rank_Open_Box));
  GS2C_Exploit_Rank_Open_Box_descriptor_ = file->message_type(3);
  static const int GS2C_Exploit_Rank_Open_Box_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Exploit_Rank_Open_Box, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Exploit_Rank_Open_Box, ret_),
  };
  GS2C_Exploit_Rank_Open_Box_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Exploit_Rank_Open_Box_descriptor_,
      GS2C_Exploit_Rank_Open_Box::default_instance_,
      GS2C_Exploit_Rank_Open_Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Exploit_Rank_Open_Box, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Exploit_Rank_Open_Box, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Exploit_Rank_Open_Box));
  GS2C_Trick_Rank_Get_Reward_descriptor_ = file->message_type(4);
  static const int GS2C_Trick_Rank_Get_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Trick_Rank_Get_Reward, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Trick_Rank_Get_Reward, reward_),
  };
  GS2C_Trick_Rank_Get_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Trick_Rank_Get_Reward_descriptor_,
      GS2C_Trick_Rank_Get_Reward::default_instance_,
      GS2C_Trick_Rank_Get_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Trick_Rank_Get_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Trick_Rank_Get_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Trick_Rank_Get_Reward));
  GS2C_Occupy_Rank_Get_Reward_descriptor_ = file->message_type(5);
  static const int GS2C_Occupy_Rank_Get_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Occupy_Rank_Get_Reward, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Occupy_Rank_Get_Reward, reward_),
  };
  GS2C_Occupy_Rank_Get_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Occupy_Rank_Get_Reward_descriptor_,
      GS2C_Occupy_Rank_Get_Reward::default_instance_,
      GS2C_Occupy_Rank_Get_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Occupy_Rank_Get_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Occupy_Rank_Get_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Occupy_Rank_Get_Reward));
  ExploitRank_descriptor_ = file->message_type(6);
  static const int ExploitRank_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, headiconid_),
  };
  ExploitRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExploitRank_descriptor_,
      ExploitRank::default_instance_,
      ExploitRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExploitRank));
  GS2C_Exploit_Rank_List_descriptor_ = file->message_type(7);
  static const int GS2C_Exploit_Rank_List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Exploit_Rank_List, list_),
  };
  GS2C_Exploit_Rank_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Exploit_Rank_List_descriptor_,
      GS2C_Exploit_Rank_List::default_instance_,
      GS2C_Exploit_Rank_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Exploit_Rank_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Exploit_Rank_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Exploit_Rank_List));
  TrickRank_descriptor_ = file->message_type(8);
  static const int TrickRank_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, trick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, headiconid_),
  };
  TrickRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrickRank_descriptor_,
      TrickRank::default_instance_,
      TrickRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrickRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrickRank));
  GS2C_Trick_Rank_List_descriptor_ = file->message_type(9);
  static const int GS2C_Trick_Rank_List_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Trick_Rank_List, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Trick_Rank_List, reward_),
  };
  GS2C_Trick_Rank_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Trick_Rank_List_descriptor_,
      GS2C_Trick_Rank_List::default_instance_,
      GS2C_Trick_Rank_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Trick_Rank_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Trick_Rank_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Trick_Rank_List));
  OccupyRank_descriptor_ = file->message_type(10);
  static const int OccupyRank_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, highest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, occupy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, headiconid_),
  };
  OccupyRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupyRank_descriptor_,
      OccupyRank::default_instance_,
      OccupyRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupyRank));
  GS2C_Occupy_Rank_List_descriptor_ = file->message_type(11);
  static const int GS2C_Occupy_Rank_List_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Occupy_Rank_List, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Occupy_Rank_List, reward_),
  };
  GS2C_Occupy_Rank_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Occupy_Rank_List_descriptor_,
      GS2C_Occupy_Rank_List::default_instance_,
      GS2C_Occupy_Rank_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Occupy_Rank_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Occupy_Rank_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Occupy_Rank_List));
  ShowData_descriptor_ = file->message_type(12);
  static const int ShowData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, headiconid_),
  };
  ShowData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowData_descriptor_,
      ShowData::default_instance_,
      ShowData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowData));
  GS2C_CountryOccupyCityNum_descriptor_ = file->message_type(13);
  static const int GS2C_CountryOccupyCityNum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CountryOccupyCityNum, nr_worm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CountryOccupyCityNum, nr_human_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CountryOccupyCityNum, nr_god_),
  };
  GS2C_CountryOccupyCityNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_CountryOccupyCityNum_descriptor_,
      GS2C_CountryOccupyCityNum::default_instance_,
      GS2C_CountryOccupyCityNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CountryOccupyCityNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_CountryOccupyCityNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_CountryOccupyCityNum));
  GS2C_PersonalAddSoldier_descriptor_ = file->message_type(14);
  static const int GS2C_PersonalAddSoldier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalAddSoldier, rank_of_add_soldier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalAddSoldier, self_info_),
  };
  GS2C_PersonalAddSoldier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_PersonalAddSoldier_descriptor_,
      GS2C_PersonalAddSoldier::default_instance_,
      GS2C_PersonalAddSoldier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalAddSoldier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalAddSoldier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_PersonalAddSoldier));
  GS2C_PersonalOccupyCityNum_descriptor_ = file->message_type(15);
  static const int GS2C_PersonalOccupyCityNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalOccupyCityNum, rank_of_take_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalOccupyCityNum, self_info_),
  };
  GS2C_PersonalOccupyCityNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_PersonalOccupyCityNum_descriptor_,
      GS2C_PersonalOccupyCityNum::default_instance_,
      GS2C_PersonalOccupyCityNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalOccupyCityNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalOccupyCityNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_PersonalOccupyCityNum));
  CharacterInfo_descriptor_ = file->message_type(16);
  static const int CharacterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, character_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, char_proto_id_),
  };
  CharacterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterInfo_descriptor_,
      CharacterInfo::default_instance_,
      CharacterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterInfo));
  CharacterMsg_descriptor_ = file->message_type(17);
  static const int CharacterMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMsg, character_info_),
  };
  CharacterMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMsg_descriptor_,
      CharacterMsg::default_instance_,
      CharacterMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMsg));
  SiegeArmyInfo_descriptor_ = file->message_type(18);
  static const int SiegeArmyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiegeArmyInfo, siege_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiegeArmyInfo, siege_char_id_),
  };
  SiegeArmyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SiegeArmyInfo_descriptor_,
      SiegeArmyInfo::default_instance_,
      SiegeArmyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiegeArmyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiegeArmyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SiegeArmyInfo));
  SiegeArmyMsg_descriptor_ = file->message_type(19);
  static const int SiegeArmyMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiegeArmyMsg, siege_army_info_),
  };
  SiegeArmyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SiegeArmyMsg_descriptor_,
      SiegeArmyMsg::default_instance_,
      SiegeArmyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiegeArmyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiegeArmyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SiegeArmyMsg));
  ShenQiInfo_descriptor_ = file->message_type(20);
  static const int ShenQiInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, shenqi_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, shenqi_id_),
  };
  ShenQiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShenQiInfo_descriptor_,
      ShenQiInfo::default_instance_,
      ShenQiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShenQiInfo));
  ShenQiMsg_descriptor_ = file->message_type(21);
  static const int ShenQiMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiMsg, shen_qi_info_),
  };
  ShenQiMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShenQiMsg_descriptor_,
      ShenQiMsg::default_instance_,
      ShenQiMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShenQiMsg));
  MilitaryPowerPack_descriptor_ = file->message_type(22);
  static const int MilitaryPowerPack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPowerPack, military_power_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPowerPack, char_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPowerPack, siege_army_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPowerPack, shenqi_msg_),
  };
  MilitaryPowerPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MilitaryPowerPack_descriptor_,
      MilitaryPowerPack::default_instance_,
      MilitaryPowerPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPowerPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPowerPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MilitaryPowerPack));
  GS2C_MilitaryPowerRankList_descriptor_ = file->message_type(23);
  static const int GS2C_MilitaryPowerRankList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MilitaryPowerRankList, military_power_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MilitaryPowerRankList, self_info_),
  };
  GS2C_MilitaryPowerRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_MilitaryPowerRankList_descriptor_,
      GS2C_MilitaryPowerRankList::default_instance_,
      GS2C_MilitaryPowerRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MilitaryPowerRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MilitaryPowerRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_MilitaryPowerRankList));
  GS2C_Achieve_Congratulate_descriptor_ = file->message_type(24);
  static const int GS2C_Achieve_Congratulate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Achieve_Congratulate, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Achieve_Congratulate, to_player_name_),
  };
  GS2C_Achieve_Congratulate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Achieve_Congratulate_descriptor_,
      GS2C_Achieve_Congratulate::default_instance_,
      GS2C_Achieve_Congratulate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Achieve_Congratulate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Achieve_Congratulate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Achieve_Congratulate));
  C2GS_Congratulate_Accept_descriptor_ = file->message_type(25);
  static const int C2GS_Congratulate_Accept_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, to_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, suit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, congratulate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, active_time_),
  };
  C2GS_Congratulate_Accept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Congratulate_Accept_descriptor_,
      C2GS_Congratulate_Accept::default_instance_,
      C2GS_Congratulate_Accept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Congratulate_Accept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Congratulate_Accept));
  GS2C_ListOfCurrentCanCongratulate_descriptor_ = file->message_type(26);
  static const int GS2C_ListOfCurrentCanCongratulate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ListOfCurrentCanCongratulate, info_),
  };
  GS2C_ListOfCurrentCanCongratulate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ListOfCurrentCanCongratulate_descriptor_,
      GS2C_ListOfCurrentCanCongratulate::default_instance_,
      GS2C_ListOfCurrentCanCongratulate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ListOfCurrentCanCongratulate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ListOfCurrentCanCongratulate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ListOfCurrentCanCongratulate));
  GS2C_Congratulate_Accept_Rsp_descriptor_ = file->message_type(27);
  static const int GS2C_Congratulate_Accept_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Congratulate_Accept_Rsp, reward_),
  };
  GS2C_Congratulate_Accept_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Congratulate_Accept_Rsp_descriptor_,
      GS2C_Congratulate_Accept_Rsp::default_instance_,
      GS2C_Congratulate_Accept_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Congratulate_Accept_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Congratulate_Accept_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Congratulate_Accept_Rsp));
  GxDB_CongratulateInfo_descriptor_ = file->message_type(28);
  static const int GxDB_CongratulateInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateInfo, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateInfo, is_achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateInfo, is_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateInfo, been_congratulated_count_),
  };
  GxDB_CongratulateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_CongratulateInfo_descriptor_,
      GxDB_CongratulateInfo::default_instance_,
      GxDB_CongratulateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_CongratulateInfo));
  GxDB_CongratulateRewardLog_descriptor_ = file->message_type(29);
  static const int GxDB_CongratulateRewardLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateRewardLog, info_),
  };
  GxDB_CongratulateRewardLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_CongratulateRewardLog_descriptor_,
      GxDB_CongratulateRewardLog::default_instance_,
      GxDB_CongratulateRewardLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateRewardLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateRewardLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_CongratulateRewardLog));
  GxDB_CongratulateBeenCongratualted_descriptor_ = file->message_type(30);
  static const int GxDB_CongratulateBeenCongratualted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateBeenCongratualted, info_),
  };
  GxDB_CongratulateBeenCongratualted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_CongratulateBeenCongratualted_descriptor_,
      GxDB_CongratulateBeenCongratualted::default_instance_,
      GxDB_CongratulateBeenCongratualted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateBeenCongratualted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CongratulateBeenCongratualted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_CongratulateBeenCongratualted));
  GS2C_Lottery_Daily_Reward_descriptor_ = file->message_type(31);
  static const int GS2C_Lottery_Daily_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Lottery_Daily_Reward, table_id_),
  };
  GS2C_Lottery_Daily_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Lottery_Daily_Reward_descriptor_,
      GS2C_Lottery_Daily_Reward::default_instance_,
      GS2C_Lottery_Daily_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Lottery_Daily_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Lottery_Daily_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Lottery_Daily_Reward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExploitRankBoxDrop_descriptor_, &ExploitRankBoxDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankRewardStatus_descriptor_, &RankRewardStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Exploit_Rank_Open_Box_descriptor_, &C2GS_Exploit_Rank_Open_Box::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Exploit_Rank_Open_Box_descriptor_, &GS2C_Exploit_Rank_Open_Box::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Trick_Rank_Get_Reward_descriptor_, &GS2C_Trick_Rank_Get_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Occupy_Rank_Get_Reward_descriptor_, &GS2C_Occupy_Rank_Get_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExploitRank_descriptor_, &ExploitRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Exploit_Rank_List_descriptor_, &GS2C_Exploit_Rank_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrickRank_descriptor_, &TrickRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Trick_Rank_List_descriptor_, &GS2C_Trick_Rank_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupyRank_descriptor_, &OccupyRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Occupy_Rank_List_descriptor_, &GS2C_Occupy_Rank_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowData_descriptor_, &ShowData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_CountryOccupyCityNum_descriptor_, &GS2C_CountryOccupyCityNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_PersonalAddSoldier_descriptor_, &GS2C_PersonalAddSoldier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_PersonalOccupyCityNum_descriptor_, &GS2C_PersonalOccupyCityNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterInfo_descriptor_, &CharacterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMsg_descriptor_, &CharacterMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SiegeArmyInfo_descriptor_, &SiegeArmyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SiegeArmyMsg_descriptor_, &SiegeArmyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShenQiInfo_descriptor_, &ShenQiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShenQiMsg_descriptor_, &ShenQiMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MilitaryPowerPack_descriptor_, &MilitaryPowerPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_MilitaryPowerRankList_descriptor_, &GS2C_MilitaryPowerRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Achieve_Congratulate_descriptor_, &GS2C_Achieve_Congratulate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Congratulate_Accept_descriptor_, &C2GS_Congratulate_Accept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ListOfCurrentCanCongratulate_descriptor_, &GS2C_ListOfCurrentCanCongratulate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Congratulate_Accept_Rsp_descriptor_, &GS2C_Congratulate_Accept_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_CongratulateInfo_descriptor_, &GxDB_CongratulateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_CongratulateRewardLog_descriptor_, &GxDB_CongratulateRewardLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_CongratulateBeenCongratualted_descriptor_, &GxDB_CongratulateBeenCongratualted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Lottery_Daily_Reward_descriptor_, &GS2C_Lottery_Daily_Reward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Rank_2eproto() {
  delete ExploitRankBoxDrop::default_instance_;
  delete ExploitRankBoxDrop_reflection_;
  delete RankRewardStatus::default_instance_;
  delete RankRewardStatus_reflection_;
  delete C2GS_Exploit_Rank_Open_Box::default_instance_;
  delete C2GS_Exploit_Rank_Open_Box_reflection_;
  delete GS2C_Exploit_Rank_Open_Box::default_instance_;
  delete GS2C_Exploit_Rank_Open_Box_reflection_;
  delete GS2C_Trick_Rank_Get_Reward::default_instance_;
  delete GS2C_Trick_Rank_Get_Reward_reflection_;
  delete GS2C_Occupy_Rank_Get_Reward::default_instance_;
  delete GS2C_Occupy_Rank_Get_Reward_reflection_;
  delete ExploitRank::default_instance_;
  delete ExploitRank_reflection_;
  delete GS2C_Exploit_Rank_List::default_instance_;
  delete GS2C_Exploit_Rank_List_reflection_;
  delete TrickRank::default_instance_;
  delete TrickRank_reflection_;
  delete GS2C_Trick_Rank_List::default_instance_;
  delete GS2C_Trick_Rank_List_reflection_;
  delete OccupyRank::default_instance_;
  delete OccupyRank_reflection_;
  delete GS2C_Occupy_Rank_List::default_instance_;
  delete GS2C_Occupy_Rank_List_reflection_;
  delete ShowData::default_instance_;
  delete ShowData_reflection_;
  delete GS2C_CountryOccupyCityNum::default_instance_;
  delete GS2C_CountryOccupyCityNum_reflection_;
  delete GS2C_PersonalAddSoldier::default_instance_;
  delete GS2C_PersonalAddSoldier_reflection_;
  delete GS2C_PersonalOccupyCityNum::default_instance_;
  delete GS2C_PersonalOccupyCityNum_reflection_;
  delete CharacterInfo::default_instance_;
  delete CharacterInfo_reflection_;
  delete CharacterMsg::default_instance_;
  delete CharacterMsg_reflection_;
  delete SiegeArmyInfo::default_instance_;
  delete SiegeArmyInfo_reflection_;
  delete SiegeArmyMsg::default_instance_;
  delete SiegeArmyMsg_reflection_;
  delete ShenQiInfo::default_instance_;
  delete ShenQiInfo_reflection_;
  delete ShenQiMsg::default_instance_;
  delete ShenQiMsg_reflection_;
  delete MilitaryPowerPack::default_instance_;
  delete MilitaryPowerPack_reflection_;
  delete GS2C_MilitaryPowerRankList::default_instance_;
  delete GS2C_MilitaryPowerRankList_reflection_;
  delete GS2C_Achieve_Congratulate::default_instance_;
  delete GS2C_Achieve_Congratulate_reflection_;
  delete C2GS_Congratulate_Accept::default_instance_;
  delete C2GS_Congratulate_Accept_reflection_;
  delete GS2C_ListOfCurrentCanCongratulate::default_instance_;
  delete GS2C_ListOfCurrentCanCongratulate_reflection_;
  delete GS2C_Congratulate_Accept_Rsp::default_instance_;
  delete GS2C_Congratulate_Accept_Rsp_reflection_;
  delete GxDB_CongratulateInfo::default_instance_;
  delete GxDB_CongratulateInfo_reflection_;
  delete GxDB_CongratulateRewardLog::default_instance_;
  delete GxDB_CongratulateRewardLog_reflection_;
  delete GxDB_CongratulateBeenCongratualted::default_instance_;
  delete GxDB_CongratulateBeenCongratualted_reflection_;
  delete GS2C_Lottery_Daily_Reward::default_instance_;
  delete GS2C_Lottery_Daily_Reward_reflection_;
}

void protobuf_AddDesc_Rank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nRank.proto\022\002pb\032\017CommomDef.proto\"=\n\022Exp"
    "loitRankBoxDrop\022\n\n\002id\030\001 \002(\r\022\013\n\003cnt\030\002 \002(\r"
    "\022\016\n\006strike\030\003 \001(\r\"0\n\020RankRewardStatus\022\014\n\004"
    "step\030\001 \002(\r\022\016\n\006reward\030\002 \002(\r\"8\n\032C2GS_Explo"
    "it_Rank_Open_Box\022\n\n\002id\030\001 \002(\r\022\016\n\006is_all\030\002"
    " \001(\010\"O\n\032GS2C_Exploit_Rank_Open_Box\022$\n\004dr"
    "op\030\001 \003(\0132\026.pb.ExploitRankBoxDrop\022\013\n\003ret\030"
    "\002 \001(\r\"h\n\032GS2C_Trick_Rank_Get_Reward\022$\n\004d"
    "rop\030\001 \002(\0132\026.pb.ExploitRankBoxDrop\022$\n\006rew"
    "ard\030\002 \003(\0132\024.pb.RankRewardStatus\"i\n\033GS2C_"
    "Occupy_Rank_Get_Reward\022$\n\004drop\030\001 \002(\0132\026.p"
    "b.ExploitRankBoxDrop\022$\n\006reward\030\002 \003(\0132\024.p"
    "b.RankRewardStatus\"z\n\013ExploitRank\022\r\n\005IsN"
    "ew\030\001 \001(\010\022\n\n\002id\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\022\n\n\002lv"
    "\030\004 \002(\r\022\021\n\tvip_level\030\006 \002(\r\022\017\n\007exploit\030\005 \002"
    "(\r\022\022\n\nheadIconId\030\007 \001(\r\"7\n\026GS2C_Exploit_R"
    "ank_List\022\035\n\004list\030\001 \003(\0132\017.pb.ExploitRank\""
    "v\n\tTrickRank\022\r\n\005IsNew\030\001 \001(\010\022\n\n\002id\030\002 \002(\r\022"
    "\014\n\004name\030\003 \002(\t\022\n\n\002lv\030\004 \002(\r\022\r\n\005trick\030\005 \002(\r"
    "\022\021\n\tvip_level\030\006 \002(\r\022\022\n\nheadIconId\030\007 \001(\r\""
    "Y\n\024GS2C_Trick_Rank_List\022\033\n\004list\030\001 \003(\0132\r."
    "pb.TrickRank\022$\n\006reward\030\002 \003(\0132\024.pb.RankRe"
    "wardStatus\"\211\001\n\nOccupyRank\022\r\n\005IsNew\030\001 \001(\010"
    "\022\n\n\002id\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\022\n\n\002lv\030\004 \002(\r\022\017"
    "\n\007highest\030\005 \002(\r\022\016\n\006occupy\030\006 \002(\r\022\021\n\tvip_l"
    "evel\030\007 \002(\r\022\022\n\nheadIconId\030\010 \001(\r\"[\n\025GS2C_O"
    "ccupy_Rank_List\022\034\n\004list\030\001 \003(\0132\016.pb.Occup"
    "yRank\022$\n\006reward\030\002 \003(\0132\024.pb.RankRewardSta"
    "tus\"y\n\010ShowData\022\014\n\004rank\030\001 \001(\r\022\n\n\002lv\030\002 \001("
    "\r\022\022\n\ncountry_id\030\003 \001(\r\022\r\n\005value\030\004 \001(\r\022\016\n\006"
    "vip_lv\030\005 \001(\r\022\014\n\004name\030\006 \001(\t\022\022\n\nheadIconId"
    "\030\007 \001(\r\"N\n\031GS2C_CountryOccupyCityNum\022\017\n\007n"
    "r_worm\030\001 \002(\r\022\020\n\010nr_human\030\002 \002(\r\022\016\n\006nr_god"
    "\030\003 \002(\r\"e\n\027GS2C_PersonalAddSoldier\022)\n\023ran"
    "k_of_add_soldier\030\001 \003(\0132\014.pb.ShowData\022\037\n\t"
    "self_info\030\002 \001(\0132\014.pb.ShowData\"f\n\032GS2C_Pe"
    "rsonalOccupyCityNum\022\'\n\021rank_of_take_city"
    "\030\001 \003(\0132\014.pb.ShowData\022\037\n\tself_info\030\002 \001(\0132"
    "\014.pb.ShowData\"<\n\rCharacterInfo\022\024\n\014charac"
    "ter_lv\030\001 \001(\r\022\025\n\rchar_proto_id\030\002 \001(\r\"9\n\014C"
    "haracterMsg\022)\n\016character_info\030\001 \003(\0132\021.pb"
    ".CharacterInfo\"8\n\rSiegeArmyInfo\022\020\n\010siege"
    "_lv\030\001 \001(\r\022\025\n\rsiege_char_id\030\002 \001(\r\":\n\014Sieg"
    "eArmyMsg\022*\n\017siege_army_info\030\001 \003(\0132\021.pb.S"
    "iegeArmyInfo\"2\n\nShenQiInfo\022\021\n\tshenqi_lv\030"
    "\001 \001(\r\022\021\n\tshenqi_id\030\002 \001(\r\"1\n\tShenQiMsg\022$\n"
    "\014shen_qi_info\030\001 \003(\0132\016.pb.ShenQiInfo\"\260\001\n\021"
    "MilitaryPowerPack\022)\n\023military_power_rank"
    "\030\001 \001(\0132\014.pb.ShowData\022\"\n\010char_msg\030\002 \001(\0132\020"
    ".pb.CharacterMsg\022)\n\017siege_army_info\030\003 \001("
    "\0132\020.pb.SiegeArmyMsg\022!\n\nshenqi_msg\030\004 \001(\0132"
    "\r.pb.ShenQiMsg\"z\n\032GS2C_MilitaryPowerRank"
    "List\0222\n\023military_power_list\030\001 \003(\0132\025.pb.M"
    "ilitaryPowerPack\022(\n\tself_info\030\002 \001(\0132\025.pb"
    ".MilitaryPowerPack\"_\n\031GS2C_Achieve_Congr"
    "atulate\022*\n\004info\030\001 \001(\0132\034.pb.C2GS_Congratu"
    "late_Accept\022\026\n\016to_player_name\030\002 \001(\t\"\247\001\n\030"
    "C2GS_Congratulate_Accept\022\024\n\014to_player_id"
    "\030\001 \001(\004\022\014\n\004rank\030\002 \001(\r\022\017\n\007suit_id\030\003 \001(\r\022\031\n"
    "\021congratulate_type\030\004 \001(\r\022\020\n\010table_id\030\005 \001"
    "(\r\022\024\n\014operate_type\030\006 \001(\r\022\023\n\013active_time\030"
    "\007 \001(\004\"P\n!GS2C_ListOfCurrentCanCongratula"
    "te\022+\n\004info\030\001 \001(\0132\035.pb.GS2C_Achieve_Congr"
    "atulate\"<\n\034GS2C_Congratulate_Accept_Rsp\022"
    "\034\n\006reward\030\001 \003(\0132\014.pb.StReward\"r\n\025GxDB_Co"
    "ngratulateInfo\022\020\n\010table_id\030\001 \001(\r\022\022\n\nis_a"
    "chieve\030\002 \001(\r\022\021\n\tis_reward\030\003 \001(\r\022 \n\030been_"
    "congratulated_count\030\004 \001(\r\"E\n\032GxDB_Congra"
    "tulateRewardLog\022\'\n\004info\030\001 \003(\0132\031.pb.GxDB_"
    "CongratulateInfo\"P\n\"GxDB_CongratulateBee"
    "nCongratualted\022*\n\004info\030\001 \003(\0132\034.pb.C2GS_C"
    "ongratulate_Accept\"-\n\031GS2C_Lottery_Daily"
    "_Reward\022\020\n\010table_id\030\001 \003(\r", 2905);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Rank.proto", &protobuf_RegisterTypes);
  ExploitRankBoxDrop::default_instance_ = new ExploitRankBoxDrop();
  RankRewardStatus::default_instance_ = new RankRewardStatus();
  C2GS_Exploit_Rank_Open_Box::default_instance_ = new C2GS_Exploit_Rank_Open_Box();
  GS2C_Exploit_Rank_Open_Box::default_instance_ = new GS2C_Exploit_Rank_Open_Box();
  GS2C_Trick_Rank_Get_Reward::default_instance_ = new GS2C_Trick_Rank_Get_Reward();
  GS2C_Occupy_Rank_Get_Reward::default_instance_ = new GS2C_Occupy_Rank_Get_Reward();
  ExploitRank::default_instance_ = new ExploitRank();
  GS2C_Exploit_Rank_List::default_instance_ = new GS2C_Exploit_Rank_List();
  TrickRank::default_instance_ = new TrickRank();
  GS2C_Trick_Rank_List::default_instance_ = new GS2C_Trick_Rank_List();
  OccupyRank::default_instance_ = new OccupyRank();
  GS2C_Occupy_Rank_List::default_instance_ = new GS2C_Occupy_Rank_List();
  ShowData::default_instance_ = new ShowData();
  GS2C_CountryOccupyCityNum::default_instance_ = new GS2C_CountryOccupyCityNum();
  GS2C_PersonalAddSoldier::default_instance_ = new GS2C_PersonalAddSoldier();
  GS2C_PersonalOccupyCityNum::default_instance_ = new GS2C_PersonalOccupyCityNum();
  CharacterInfo::default_instance_ = new CharacterInfo();
  CharacterMsg::default_instance_ = new CharacterMsg();
  SiegeArmyInfo::default_instance_ = new SiegeArmyInfo();
  SiegeArmyMsg::default_instance_ = new SiegeArmyMsg();
  ShenQiInfo::default_instance_ = new ShenQiInfo();
  ShenQiMsg::default_instance_ = new ShenQiMsg();
  MilitaryPowerPack::default_instance_ = new MilitaryPowerPack();
  GS2C_MilitaryPowerRankList::default_instance_ = new GS2C_MilitaryPowerRankList();
  GS2C_Achieve_Congratulate::default_instance_ = new GS2C_Achieve_Congratulate();
  C2GS_Congratulate_Accept::default_instance_ = new C2GS_Congratulate_Accept();
  GS2C_ListOfCurrentCanCongratulate::default_instance_ = new GS2C_ListOfCurrentCanCongratulate();
  GS2C_Congratulate_Accept_Rsp::default_instance_ = new GS2C_Congratulate_Accept_Rsp();
  GxDB_CongratulateInfo::default_instance_ = new GxDB_CongratulateInfo();
  GxDB_CongratulateRewardLog::default_instance_ = new GxDB_CongratulateRewardLog();
  GxDB_CongratulateBeenCongratualted::default_instance_ = new GxDB_CongratulateBeenCongratualted();
  GS2C_Lottery_Daily_Reward::default_instance_ = new GS2C_Lottery_Daily_Reward();
  ExploitRankBoxDrop::default_instance_->InitAsDefaultInstance();
  RankRewardStatus::default_instance_->InitAsDefaultInstance();
  C2GS_Exploit_Rank_Open_Box::default_instance_->InitAsDefaultInstance();
  GS2C_Exploit_Rank_Open_Box::default_instance_->InitAsDefaultInstance();
  GS2C_Trick_Rank_Get_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Occupy_Rank_Get_Reward::default_instance_->InitAsDefaultInstance();
  ExploitRank::default_instance_->InitAsDefaultInstance();
  GS2C_Exploit_Rank_List::default_instance_->InitAsDefaultInstance();
  TrickRank::default_instance_->InitAsDefaultInstance();
  GS2C_Trick_Rank_List::default_instance_->InitAsDefaultInstance();
  OccupyRank::default_instance_->InitAsDefaultInstance();
  GS2C_Occupy_Rank_List::default_instance_->InitAsDefaultInstance();
  ShowData::default_instance_->InitAsDefaultInstance();
  GS2C_CountryOccupyCityNum::default_instance_->InitAsDefaultInstance();
  GS2C_PersonalAddSoldier::default_instance_->InitAsDefaultInstance();
  GS2C_PersonalOccupyCityNum::default_instance_->InitAsDefaultInstance();
  CharacterInfo::default_instance_->InitAsDefaultInstance();
  CharacterMsg::default_instance_->InitAsDefaultInstance();
  SiegeArmyInfo::default_instance_->InitAsDefaultInstance();
  SiegeArmyMsg::default_instance_->InitAsDefaultInstance();
  ShenQiInfo::default_instance_->InitAsDefaultInstance();
  ShenQiMsg::default_instance_->InitAsDefaultInstance();
  MilitaryPowerPack::default_instance_->InitAsDefaultInstance();
  GS2C_MilitaryPowerRankList::default_instance_->InitAsDefaultInstance();
  GS2C_Achieve_Congratulate::default_instance_->InitAsDefaultInstance();
  C2GS_Congratulate_Accept::default_instance_->InitAsDefaultInstance();
  GS2C_ListOfCurrentCanCongratulate::default_instance_->InitAsDefaultInstance();
  GS2C_Congratulate_Accept_Rsp::default_instance_->InitAsDefaultInstance();
  GxDB_CongratulateInfo::default_instance_->InitAsDefaultInstance();
  GxDB_CongratulateRewardLog::default_instance_->InitAsDefaultInstance();
  GxDB_CongratulateBeenCongratualted::default_instance_->InitAsDefaultInstance();
  GS2C_Lottery_Daily_Reward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Rank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Rank_2eproto {
  StaticDescriptorInitializer_Rank_2eproto() {
    protobuf_AddDesc_Rank_2eproto();
  }
} static_descriptor_initializer_Rank_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExploitRankBoxDrop::kIdFieldNumber;
const int ExploitRankBoxDrop::kCntFieldNumber;
const int ExploitRankBoxDrop::kStrikeFieldNumber;
#endif  // !_MSC_VER

ExploitRankBoxDrop::ExploitRankBoxDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExploitRankBoxDrop::InitAsDefaultInstance() {
}

ExploitRankBoxDrop::ExploitRankBoxDrop(const ExploitRankBoxDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExploitRankBoxDrop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cnt_ = 0u;
  strike_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExploitRankBoxDrop::~ExploitRankBoxDrop() {
  SharedDtor();
}

void ExploitRankBoxDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExploitRankBoxDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploitRankBoxDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploitRankBoxDrop_descriptor_;
}

const ExploitRankBoxDrop& ExploitRankBoxDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

ExploitRankBoxDrop* ExploitRankBoxDrop::default_instance_ = NULL;

ExploitRankBoxDrop* ExploitRankBoxDrop::New() const {
  return new ExploitRankBoxDrop;
}

void ExploitRankBoxDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cnt_ = 0u;
    strike_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExploitRankBoxDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cnt;
        break;
      }

      // required uint32 cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strike;
        break;
      }

      // optional uint32 strike = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strike_)));
          set_has_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExploitRankBoxDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cnt = 2;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cnt(), output);
  }

  // optional uint32 strike = 3;
  if (has_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->strike(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExploitRankBoxDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cnt = 2;
  if (has_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cnt(), target);
  }

  // optional uint32 strike = 3;
  if (has_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->strike(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExploitRankBoxDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cnt = 2;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

    // optional uint32 strike = 3;
    if (has_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strike());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploitRankBoxDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExploitRankBoxDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExploitRankBoxDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExploitRankBoxDrop::MergeFrom(const ExploitRankBoxDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
    if (from.has_strike()) {
      set_strike(from.strike());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExploitRankBoxDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploitRankBoxDrop::CopyFrom(const ExploitRankBoxDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploitRankBoxDrop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExploitRankBoxDrop::Swap(ExploitRankBoxDrop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cnt_, other->cnt_);
    std::swap(strike_, other->strike_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExploitRankBoxDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploitRankBoxDrop_descriptor_;
  metadata.reflection = ExploitRankBoxDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankRewardStatus::kStepFieldNumber;
const int RankRewardStatus::kRewardFieldNumber;
#endif  // !_MSC_VER

RankRewardStatus::RankRewardStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankRewardStatus::InitAsDefaultInstance() {
}

RankRewardStatus::RankRewardStatus(const RankRewardStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankRewardStatus::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0u;
  reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankRewardStatus::~RankRewardStatus() {
  SharedDtor();
}

void RankRewardStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankRewardStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankRewardStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankRewardStatus_descriptor_;
}

const RankRewardStatus& RankRewardStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

RankRewardStatus* RankRewardStatus::default_instance_ = NULL;

RankRewardStatus* RankRewardStatus::New() const {
  return new RankRewardStatus;
}

void RankRewardStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_ = 0u;
    reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankRewardStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward;
        break;
      }

      // required uint32 reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankRewardStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->step(), output);
  }

  // required uint32 reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankRewardStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->step(), target);
  }

  // required uint32 reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankRewardStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // required uint32 reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRewardStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankRewardStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankRewardStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankRewardStatus::MergeFrom(const RankRewardStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankRewardStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRewardStatus::CopyFrom(const RankRewardStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRewardStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RankRewardStatus::Swap(RankRewardStatus* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankRewardStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankRewardStatus_descriptor_;
  metadata.reflection = RankRewardStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Exploit_Rank_Open_Box::kIdFieldNumber;
const int C2GS_Exploit_Rank_Open_Box::kIsAllFieldNumber;
#endif  // !_MSC_VER

C2GS_Exploit_Rank_Open_Box::C2GS_Exploit_Rank_Open_Box()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Exploit_Rank_Open_Box::InitAsDefaultInstance() {
}

C2GS_Exploit_Rank_Open_Box::C2GS_Exploit_Rank_Open_Box(const C2GS_Exploit_Rank_Open_Box& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Exploit_Rank_Open_Box::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is_all_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Exploit_Rank_Open_Box::~C2GS_Exploit_Rank_Open_Box() {
  SharedDtor();
}

void C2GS_Exploit_Rank_Open_Box::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Exploit_Rank_Open_Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Exploit_Rank_Open_Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Exploit_Rank_Open_Box_descriptor_;
}

const C2GS_Exploit_Rank_Open_Box& C2GS_Exploit_Rank_Open_Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

C2GS_Exploit_Rank_Open_Box* C2GS_Exploit_Rank_Open_Box::default_instance_ = NULL;

C2GS_Exploit_Rank_Open_Box* C2GS_Exploit_Rank_Open_Box::New() const {
  return new C2GS_Exploit_Rank_Open_Box;
}

void C2GS_Exploit_Rank_Open_Box::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    is_all_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Exploit_Rank_Open_Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_all;
        break;
      }

      // optional bool is_all = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_all_)));
          set_has_is_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Exploit_Rank_Open_Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool is_all = 2;
  if (has_is_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_all(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Exploit_Rank_Open_Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool is_all = 2;
  if (has_is_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_all(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Exploit_Rank_Open_Box::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool is_all = 2;
    if (has_is_all()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Exploit_Rank_Open_Box::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Exploit_Rank_Open_Box* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Exploit_Rank_Open_Box*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Exploit_Rank_Open_Box::MergeFrom(const C2GS_Exploit_Rank_Open_Box& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_all()) {
      set_is_all(from.is_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Exploit_Rank_Open_Box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Exploit_Rank_Open_Box::CopyFrom(const C2GS_Exploit_Rank_Open_Box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Exploit_Rank_Open_Box::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Exploit_Rank_Open_Box::Swap(C2GS_Exploit_Rank_Open_Box* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_all_, other->is_all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Exploit_Rank_Open_Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Exploit_Rank_Open_Box_descriptor_;
  metadata.reflection = C2GS_Exploit_Rank_Open_Box_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Exploit_Rank_Open_Box::kDropFieldNumber;
const int GS2C_Exploit_Rank_Open_Box::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Exploit_Rank_Open_Box::GS2C_Exploit_Rank_Open_Box()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Exploit_Rank_Open_Box::InitAsDefaultInstance() {
}

GS2C_Exploit_Rank_Open_Box::GS2C_Exploit_Rank_Open_Box(const GS2C_Exploit_Rank_Open_Box& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Exploit_Rank_Open_Box::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Exploit_Rank_Open_Box::~GS2C_Exploit_Rank_Open_Box() {
  SharedDtor();
}

void GS2C_Exploit_Rank_Open_Box::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Exploit_Rank_Open_Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Exploit_Rank_Open_Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Exploit_Rank_Open_Box_descriptor_;
}

const GS2C_Exploit_Rank_Open_Box& GS2C_Exploit_Rank_Open_Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Exploit_Rank_Open_Box* GS2C_Exploit_Rank_Open_Box::default_instance_ = NULL;

GS2C_Exploit_Rank_Open_Box* GS2C_Exploit_Rank_Open_Box::New() const {
  return new GS2C_Exploit_Rank_Open_Box;
}

void GS2C_Exploit_Rank_Open_Box::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 0u;
  }
  drop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Exploit_Rank_Open_Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ExploitRankBoxDrop drop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drop;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Exploit_Rank_Open_Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.ExploitRankBoxDrop drop = 1;
  for (int i = 0; i < this->drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drop(i), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Exploit_Rank_Open_Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.ExploitRankBoxDrop drop = 1;
  for (int i = 0; i < this->drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drop(i), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Exploit_Rank_Open_Box::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .pb.ExploitRankBoxDrop drop = 1;
  total_size += 1 * this->drop_size();
  for (int i = 0; i < this->drop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Exploit_Rank_Open_Box::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Exploit_Rank_Open_Box* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Exploit_Rank_Open_Box*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Exploit_Rank_Open_Box::MergeFrom(const GS2C_Exploit_Rank_Open_Box& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_.MergeFrom(from.drop_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Exploit_Rank_Open_Box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Exploit_Rank_Open_Box::CopyFrom(const GS2C_Exploit_Rank_Open_Box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Exploit_Rank_Open_Box::IsInitialized() const {

  for (int i = 0; i < drop_size(); i++) {
    if (!this->drop(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Exploit_Rank_Open_Box::Swap(GS2C_Exploit_Rank_Open_Box* other) {
  if (other != this) {
    drop_.Swap(&other->drop_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Exploit_Rank_Open_Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Exploit_Rank_Open_Box_descriptor_;
  metadata.reflection = GS2C_Exploit_Rank_Open_Box_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Trick_Rank_Get_Reward::kDropFieldNumber;
const int GS2C_Trick_Rank_Get_Reward::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Trick_Rank_Get_Reward::GS2C_Trick_Rank_Get_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Trick_Rank_Get_Reward::InitAsDefaultInstance() {
  drop_ = const_cast< ::pb::ExploitRankBoxDrop*>(&::pb::ExploitRankBoxDrop::default_instance());
}

GS2C_Trick_Rank_Get_Reward::GS2C_Trick_Rank_Get_Reward(const GS2C_Trick_Rank_Get_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Trick_Rank_Get_Reward::SharedCtor() {
  _cached_size_ = 0;
  drop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Trick_Rank_Get_Reward::~GS2C_Trick_Rank_Get_Reward() {
  SharedDtor();
}

void GS2C_Trick_Rank_Get_Reward::SharedDtor() {
  if (this != default_instance_) {
    delete drop_;
  }
}

void GS2C_Trick_Rank_Get_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Trick_Rank_Get_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Trick_Rank_Get_Reward_descriptor_;
}

const GS2C_Trick_Rank_Get_Reward& GS2C_Trick_Rank_Get_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Trick_Rank_Get_Reward* GS2C_Trick_Rank_Get_Reward::default_instance_ = NULL;

GS2C_Trick_Rank_Get_Reward* GS2C_Trick_Rank_Get_Reward::New() const {
  return new GS2C_Trick_Rank_Get_Reward;
}

void GS2C_Trick_Rank_Get_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drop()) {
      if (drop_ != NULL) drop_->::pb::ExploitRankBoxDrop::Clear();
    }
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Trick_Rank_Get_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ExploitRankBoxDrop drop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .pb.RankRewardStatus reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Trick_Rank_Get_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.ExploitRankBoxDrop drop = 1;
  if (has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drop(), output);
  }

  // repeated .pb.RankRewardStatus reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Trick_Rank_Get_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.ExploitRankBoxDrop drop = 1;
  if (has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drop(), target);
  }

  // repeated .pb.RankRewardStatus reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Trick_Rank_Get_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ExploitRankBoxDrop drop = 1;
    if (has_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drop());
    }

  }
  // repeated .pb.RankRewardStatus reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Trick_Rank_Get_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Trick_Rank_Get_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Trick_Rank_Get_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Trick_Rank_Get_Reward::MergeFrom(const GS2C_Trick_Rank_Get_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drop()) {
      mutable_drop()->::pb::ExploitRankBoxDrop::MergeFrom(from.drop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Trick_Rank_Get_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Trick_Rank_Get_Reward::CopyFrom(const GS2C_Trick_Rank_Get_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Trick_Rank_Get_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_drop()) {
    if (!this->drop().IsInitialized()) return false;
  }
  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Trick_Rank_Get_Reward::Swap(GS2C_Trick_Rank_Get_Reward* other) {
  if (other != this) {
    std::swap(drop_, other->drop_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Trick_Rank_Get_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Trick_Rank_Get_Reward_descriptor_;
  metadata.reflection = GS2C_Trick_Rank_Get_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Occupy_Rank_Get_Reward::kDropFieldNumber;
const int GS2C_Occupy_Rank_Get_Reward::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Occupy_Rank_Get_Reward::GS2C_Occupy_Rank_Get_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Occupy_Rank_Get_Reward::InitAsDefaultInstance() {
  drop_ = const_cast< ::pb::ExploitRankBoxDrop*>(&::pb::ExploitRankBoxDrop::default_instance());
}

GS2C_Occupy_Rank_Get_Reward::GS2C_Occupy_Rank_Get_Reward(const GS2C_Occupy_Rank_Get_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Occupy_Rank_Get_Reward::SharedCtor() {
  _cached_size_ = 0;
  drop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Occupy_Rank_Get_Reward::~GS2C_Occupy_Rank_Get_Reward() {
  SharedDtor();
}

void GS2C_Occupy_Rank_Get_Reward::SharedDtor() {
  if (this != default_instance_) {
    delete drop_;
  }
}

void GS2C_Occupy_Rank_Get_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Occupy_Rank_Get_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Occupy_Rank_Get_Reward_descriptor_;
}

const GS2C_Occupy_Rank_Get_Reward& GS2C_Occupy_Rank_Get_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Occupy_Rank_Get_Reward* GS2C_Occupy_Rank_Get_Reward::default_instance_ = NULL;

GS2C_Occupy_Rank_Get_Reward* GS2C_Occupy_Rank_Get_Reward::New() const {
  return new GS2C_Occupy_Rank_Get_Reward;
}

void GS2C_Occupy_Rank_Get_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drop()) {
      if (drop_ != NULL) drop_->::pb::ExploitRankBoxDrop::Clear();
    }
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Occupy_Rank_Get_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ExploitRankBoxDrop drop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .pb.RankRewardStatus reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Occupy_Rank_Get_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.ExploitRankBoxDrop drop = 1;
  if (has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drop(), output);
  }

  // repeated .pb.RankRewardStatus reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Occupy_Rank_Get_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.ExploitRankBoxDrop drop = 1;
  if (has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drop(), target);
  }

  // repeated .pb.RankRewardStatus reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Occupy_Rank_Get_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ExploitRankBoxDrop drop = 1;
    if (has_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drop());
    }

  }
  // repeated .pb.RankRewardStatus reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Occupy_Rank_Get_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Occupy_Rank_Get_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Occupy_Rank_Get_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Occupy_Rank_Get_Reward::MergeFrom(const GS2C_Occupy_Rank_Get_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drop()) {
      mutable_drop()->::pb::ExploitRankBoxDrop::MergeFrom(from.drop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Occupy_Rank_Get_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Occupy_Rank_Get_Reward::CopyFrom(const GS2C_Occupy_Rank_Get_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Occupy_Rank_Get_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_drop()) {
    if (!this->drop().IsInitialized()) return false;
  }
  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Occupy_Rank_Get_Reward::Swap(GS2C_Occupy_Rank_Get_Reward* other) {
  if (other != this) {
    std::swap(drop_, other->drop_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Occupy_Rank_Get_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Occupy_Rank_Get_Reward_descriptor_;
  metadata.reflection = GS2C_Occupy_Rank_Get_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExploitRank::kIsNewFieldNumber;
const int ExploitRank::kIdFieldNumber;
const int ExploitRank::kNameFieldNumber;
const int ExploitRank::kLvFieldNumber;
const int ExploitRank::kVipLevelFieldNumber;
const int ExploitRank::kExploitFieldNumber;
const int ExploitRank::kHeadIconIdFieldNumber;
#endif  // !_MSC_VER

ExploitRank::ExploitRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExploitRank::InitAsDefaultInstance() {
}

ExploitRank::ExploitRank(const ExploitRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExploitRank::SharedCtor() {
  _cached_size_ = 0;
  isnew_ = false;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  vip_level_ = 0u;
  exploit_ = 0u;
  headiconid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExploitRank::~ExploitRank() {
  SharedDtor();
}

void ExploitRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ExploitRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploitRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploitRank_descriptor_;
}

const ExploitRank& ExploitRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

ExploitRank* ExploitRank::default_instance_ = NULL;

ExploitRank* ExploitRank::New() const {
  return new ExploitRank;
}

void ExploitRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isnew_ = false;
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    vip_level_ = 0u;
    exploit_ = 0u;
    headiconid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExploitRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsNew = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // required uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exploit;
        break;
      }

      // required uint32 exploit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip_level;
        break;
      }

      // required uint32 vip_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_headIconId;
        break;
      }

      // optional uint32 headIconId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headiconid_)));
          set_has_headiconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExploitRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsNew = 1;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isnew(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // required uint32 exploit = 5;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exploit(), output);
  }

  // required uint32 vip_level = 6;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vip_level(), output);
  }

  // optional uint32 headIconId = 7;
  if (has_headiconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->headiconid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExploitRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsNew = 1;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isnew(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // required uint32 exploit = 5;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->exploit(), target);
  }

  // required uint32 vip_level = 6;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vip_level(), target);
  }

  // optional uint32 headIconId = 7;
  if (has_headiconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->headiconid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExploitRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsNew = 1;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 vip_level = 6;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // required uint32 exploit = 5;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploit());
    }

    // optional uint32 headIconId = 7;
    if (has_headiconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headiconid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploitRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExploitRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExploitRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExploitRank::MergeFrom(const ExploitRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_headiconid()) {
      set_headiconid(from.headiconid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExploitRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploitRank::CopyFrom(const ExploitRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploitRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void ExploitRank::Swap(ExploitRank* other) {
  if (other != this) {
    std::swap(isnew_, other->isnew_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(exploit_, other->exploit_);
    std::swap(headiconid_, other->headiconid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExploitRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploitRank_descriptor_;
  metadata.reflection = ExploitRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Exploit_Rank_List::kListFieldNumber;
#endif  // !_MSC_VER

GS2C_Exploit_Rank_List::GS2C_Exploit_Rank_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Exploit_Rank_List::InitAsDefaultInstance() {
}

GS2C_Exploit_Rank_List::GS2C_Exploit_Rank_List(const GS2C_Exploit_Rank_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Exploit_Rank_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Exploit_Rank_List::~GS2C_Exploit_Rank_List() {
  SharedDtor();
}

void GS2C_Exploit_Rank_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Exploit_Rank_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Exploit_Rank_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Exploit_Rank_List_descriptor_;
}

const GS2C_Exploit_Rank_List& GS2C_Exploit_Rank_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Exploit_Rank_List* GS2C_Exploit_Rank_List::default_instance_ = NULL;

GS2C_Exploit_Rank_List* GS2C_Exploit_Rank_List::New() const {
  return new GS2C_Exploit_Rank_List;
}

void GS2C_Exploit_Rank_List::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Exploit_Rank_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ExploitRank list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Exploit_Rank_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.ExploitRank list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Exploit_Rank_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.ExploitRank list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Exploit_Rank_List::ByteSize() const {
  int total_size = 0;

  // repeated .pb.ExploitRank list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Exploit_Rank_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Exploit_Rank_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Exploit_Rank_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Exploit_Rank_List::MergeFrom(const GS2C_Exploit_Rank_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Exploit_Rank_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Exploit_Rank_List::CopyFrom(const GS2C_Exploit_Rank_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Exploit_Rank_List::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Exploit_Rank_List::Swap(GS2C_Exploit_Rank_List* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Exploit_Rank_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Exploit_Rank_List_descriptor_;
  metadata.reflection = GS2C_Exploit_Rank_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrickRank::kIsNewFieldNumber;
const int TrickRank::kIdFieldNumber;
const int TrickRank::kNameFieldNumber;
const int TrickRank::kLvFieldNumber;
const int TrickRank::kTrickFieldNumber;
const int TrickRank::kVipLevelFieldNumber;
const int TrickRank::kHeadIconIdFieldNumber;
#endif  // !_MSC_VER

TrickRank::TrickRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrickRank::InitAsDefaultInstance() {
}

TrickRank::TrickRank(const TrickRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrickRank::SharedCtor() {
  _cached_size_ = 0;
  isnew_ = false;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  trick_ = 0u;
  vip_level_ = 0u;
  headiconid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrickRank::~TrickRank() {
  SharedDtor();
}

void TrickRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TrickRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrickRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrickRank_descriptor_;
}

const TrickRank& TrickRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

TrickRank* TrickRank::default_instance_ = NULL;

TrickRank* TrickRank::New() const {
  return new TrickRank;
}

void TrickRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isnew_ = false;
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    trick_ = 0u;
    vip_level_ = 0u;
    headiconid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrickRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsNew = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // required uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_trick;
        break;
      }

      // required uint32 trick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trick_)));
          set_has_trick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip_level;
        break;
      }

      // required uint32 vip_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_headIconId;
        break;
      }

      // optional uint32 headIconId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headiconid_)));
          set_has_headiconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrickRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsNew = 1;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isnew(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // required uint32 trick = 5;
  if (has_trick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trick(), output);
  }

  // required uint32 vip_level = 6;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vip_level(), output);
  }

  // optional uint32 headIconId = 7;
  if (has_headiconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->headiconid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrickRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsNew = 1;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isnew(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // required uint32 trick = 5;
  if (has_trick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trick(), target);
  }

  // required uint32 vip_level = 6;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vip_level(), target);
  }

  // optional uint32 headIconId = 7;
  if (has_headiconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->headiconid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrickRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsNew = 1;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 trick = 5;
    if (has_trick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trick());
    }

    // required uint32 vip_level = 6;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 headIconId = 7;
    if (has_headiconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headiconid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrickRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrickRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrickRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrickRank::MergeFrom(const TrickRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_trick()) {
      set_trick(from.trick());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_headiconid()) {
      set_headiconid(from.headiconid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrickRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrickRank::CopyFrom(const TrickRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrickRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void TrickRank::Swap(TrickRank* other) {
  if (other != this) {
    std::swap(isnew_, other->isnew_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(trick_, other->trick_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(headiconid_, other->headiconid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrickRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrickRank_descriptor_;
  metadata.reflection = TrickRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Trick_Rank_List::kListFieldNumber;
const int GS2C_Trick_Rank_List::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Trick_Rank_List::GS2C_Trick_Rank_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Trick_Rank_List::InitAsDefaultInstance() {
}

GS2C_Trick_Rank_List::GS2C_Trick_Rank_List(const GS2C_Trick_Rank_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Trick_Rank_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Trick_Rank_List::~GS2C_Trick_Rank_List() {
  SharedDtor();
}

void GS2C_Trick_Rank_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Trick_Rank_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Trick_Rank_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Trick_Rank_List_descriptor_;
}

const GS2C_Trick_Rank_List& GS2C_Trick_Rank_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Trick_Rank_List* GS2C_Trick_Rank_List::default_instance_ = NULL;

GS2C_Trick_Rank_List* GS2C_Trick_Rank_List::New() const {
  return new GS2C_Trick_Rank_List;
}

void GS2C_Trick_Rank_List::Clear() {
  list_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Trick_Rank_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TrickRank list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .pb.RankRewardStatus reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Trick_Rank_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.TrickRank list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // repeated .pb.RankRewardStatus reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Trick_Rank_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.TrickRank list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // repeated .pb.RankRewardStatus reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Trick_Rank_List::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TrickRank list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .pb.RankRewardStatus reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Trick_Rank_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Trick_Rank_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Trick_Rank_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Trick_Rank_List::MergeFrom(const GS2C_Trick_Rank_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  reward_.MergeFrom(from.reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Trick_Rank_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Trick_Rank_List::CopyFrom(const GS2C_Trick_Rank_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Trick_Rank_List::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Trick_Rank_List::Swap(GS2C_Trick_Rank_List* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Trick_Rank_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Trick_Rank_List_descriptor_;
  metadata.reflection = GS2C_Trick_Rank_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupyRank::kIsNewFieldNumber;
const int OccupyRank::kIdFieldNumber;
const int OccupyRank::kNameFieldNumber;
const int OccupyRank::kLvFieldNumber;
const int OccupyRank::kHighestFieldNumber;
const int OccupyRank::kOccupyFieldNumber;
const int OccupyRank::kVipLevelFieldNumber;
const int OccupyRank::kHeadIconIdFieldNumber;
#endif  // !_MSC_VER

OccupyRank::OccupyRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupyRank::InitAsDefaultInstance() {
}

OccupyRank::OccupyRank(const OccupyRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupyRank::SharedCtor() {
  _cached_size_ = 0;
  isnew_ = false;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  highest_ = 0u;
  occupy_ = 0u;
  vip_level_ = 0u;
  headiconid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupyRank::~OccupyRank() {
  SharedDtor();
}

void OccupyRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void OccupyRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupyRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupyRank_descriptor_;
}

const OccupyRank& OccupyRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

OccupyRank* OccupyRank::default_instance_ = NULL;

OccupyRank* OccupyRank::New() const {
  return new OccupyRank;
}

void OccupyRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isnew_ = false;
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    highest_ = 0u;
    occupy_ = 0u;
    vip_level_ = 0u;
    headiconid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupyRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsNew = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // required uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_highest;
        break;
      }

      // required uint32 highest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_)));
          set_has_highest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_occupy;
        break;
      }

      // required uint32 occupy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_)));
          set_has_occupy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }

      // required uint32 vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headIconId;
        break;
      }

      // optional uint32 headIconId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headiconid_)));
          set_has_headiconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupyRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsNew = 1;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isnew(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // required uint32 highest = 5;
  if (has_highest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->highest(), output);
  }

  // required uint32 occupy = 6;
  if (has_occupy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->occupy(), output);
  }

  // required uint32 vip_level = 7;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vip_level(), output);
  }

  // optional uint32 headIconId = 8;
  if (has_headiconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->headiconid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupyRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsNew = 1;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isnew(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // required uint32 highest = 5;
  if (has_highest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->highest(), target);
  }

  // required uint32 occupy = 6;
  if (has_occupy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->occupy(), target);
  }

  // required uint32 vip_level = 7;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->vip_level(), target);
  }

  // optional uint32 headIconId = 8;
  if (has_headiconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->headiconid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupyRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsNew = 1;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 highest = 5;
    if (has_highest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest());
    }

    // required uint32 occupy = 6;
    if (has_occupy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy());
    }

    // required uint32 vip_level = 7;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 headIconId = 8;
    if (has_headiconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headiconid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupyRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupyRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupyRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupyRank::MergeFrom(const OccupyRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_highest()) {
      set_highest(from.highest());
    }
    if (from.has_occupy()) {
      set_occupy(from.occupy());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_headiconid()) {
      set_headiconid(from.headiconid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupyRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupyRank::CopyFrom(const OccupyRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupyRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  return true;
}

void OccupyRank::Swap(OccupyRank* other) {
  if (other != this) {
    std::swap(isnew_, other->isnew_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(highest_, other->highest_);
    std::swap(occupy_, other->occupy_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(headiconid_, other->headiconid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupyRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupyRank_descriptor_;
  metadata.reflection = OccupyRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Occupy_Rank_List::kListFieldNumber;
const int GS2C_Occupy_Rank_List::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Occupy_Rank_List::GS2C_Occupy_Rank_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Occupy_Rank_List::InitAsDefaultInstance() {
}

GS2C_Occupy_Rank_List::GS2C_Occupy_Rank_List(const GS2C_Occupy_Rank_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Occupy_Rank_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Occupy_Rank_List::~GS2C_Occupy_Rank_List() {
  SharedDtor();
}

void GS2C_Occupy_Rank_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Occupy_Rank_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Occupy_Rank_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Occupy_Rank_List_descriptor_;
}

const GS2C_Occupy_Rank_List& GS2C_Occupy_Rank_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Occupy_Rank_List* GS2C_Occupy_Rank_List::default_instance_ = NULL;

GS2C_Occupy_Rank_List* GS2C_Occupy_Rank_List::New() const {
  return new GS2C_Occupy_Rank_List;
}

void GS2C_Occupy_Rank_List::Clear() {
  list_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Occupy_Rank_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.OccupyRank list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .pb.RankRewardStatus reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Occupy_Rank_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.OccupyRank list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // repeated .pb.RankRewardStatus reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Occupy_Rank_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.OccupyRank list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // repeated .pb.RankRewardStatus reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Occupy_Rank_List::ByteSize() const {
  int total_size = 0;

  // repeated .pb.OccupyRank list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .pb.RankRewardStatus reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Occupy_Rank_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Occupy_Rank_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Occupy_Rank_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Occupy_Rank_List::MergeFrom(const GS2C_Occupy_Rank_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  reward_.MergeFrom(from.reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Occupy_Rank_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Occupy_Rank_List::CopyFrom(const GS2C_Occupy_Rank_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Occupy_Rank_List::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Occupy_Rank_List::Swap(GS2C_Occupy_Rank_List* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Occupy_Rank_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Occupy_Rank_List_descriptor_;
  metadata.reflection = GS2C_Occupy_Rank_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowData::kRankFieldNumber;
const int ShowData::kLvFieldNumber;
const int ShowData::kCountryIdFieldNumber;
const int ShowData::kValueFieldNumber;
const int ShowData::kVipLvFieldNumber;
const int ShowData::kNameFieldNumber;
const int ShowData::kHeadIconIdFieldNumber;
#endif  // !_MSC_VER

ShowData::ShowData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShowData::InitAsDefaultInstance() {
}

ShowData::ShowData(const ShowData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShowData::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  lv_ = 0u;
  country_id_ = 0u;
  value_ = 0u;
  vip_lv_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headiconid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowData::~ShowData() {
  SharedDtor();
}

void ShowData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ShowData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowData_descriptor_;
}

const ShowData& ShowData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

ShowData* ShowData::default_instance_ = NULL;

ShowData* ShowData::New() const {
  return new ShowData;
}

void ShowData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    lv_ = 0u;
    country_id_ = 0u;
    value_ = 0u;
    vip_lv_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headiconid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional uint32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_lv;
        break;
      }

      // optional uint32 vip_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_headIconId;
        break;
      }

      // optional uint32 headIconId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headiconid_)));
          set_has_headiconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShowData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // optional uint32 country_id = 3;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country_id(), output);
  }

  // optional uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // optional uint32 vip_lv = 5;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip_lv(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional uint32 headIconId = 7;
  if (has_headiconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->headiconid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShowData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  // optional uint32 country_id = 3;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country_id(), target);
  }

  // optional uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // optional uint32 vip_lv = 5;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip_lv(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 headIconId = 7;
  if (has_headiconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->headiconid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShowData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 country_id = 3;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 vip_lv = 5;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 headIconId = 7;
    if (has_headiconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headiconid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowData::MergeFrom(const ShowData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headiconid()) {
      set_headiconid(from.headiconid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowData::CopyFrom(const ShowData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowData::IsInitialized() const {

  return true;
}

void ShowData::Swap(ShowData* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(lv_, other->lv_);
    std::swap(country_id_, other->country_id_);
    std::swap(value_, other->value_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(name_, other->name_);
    std::swap(headiconid_, other->headiconid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowData_descriptor_;
  metadata.reflection = ShowData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_CountryOccupyCityNum::kNrWormFieldNumber;
const int GS2C_CountryOccupyCityNum::kNrHumanFieldNumber;
const int GS2C_CountryOccupyCityNum::kNrGodFieldNumber;
#endif  // !_MSC_VER

GS2C_CountryOccupyCityNum::GS2C_CountryOccupyCityNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_CountryOccupyCityNum::InitAsDefaultInstance() {
}

GS2C_CountryOccupyCityNum::GS2C_CountryOccupyCityNum(const GS2C_CountryOccupyCityNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_CountryOccupyCityNum::SharedCtor() {
  _cached_size_ = 0;
  nr_worm_ = 0u;
  nr_human_ = 0u;
  nr_god_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_CountryOccupyCityNum::~GS2C_CountryOccupyCityNum() {
  SharedDtor();
}

void GS2C_CountryOccupyCityNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_CountryOccupyCityNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_CountryOccupyCityNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_CountryOccupyCityNum_descriptor_;
}

const GS2C_CountryOccupyCityNum& GS2C_CountryOccupyCityNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_CountryOccupyCityNum* GS2C_CountryOccupyCityNum::default_instance_ = NULL;

GS2C_CountryOccupyCityNum* GS2C_CountryOccupyCityNum::New() const {
  return new GS2C_CountryOccupyCityNum;
}

void GS2C_CountryOccupyCityNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nr_worm_ = 0u;
    nr_human_ = 0u;
    nr_god_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_CountryOccupyCityNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nr_worm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nr_worm_)));
          set_has_nr_worm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nr_human;
        break;
      }

      // required uint32 nr_human = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_human:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nr_human_)));
          set_has_nr_human();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nr_god;
        break;
      }

      // required uint32 nr_god = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_god:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nr_god_)));
          set_has_nr_god();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_CountryOccupyCityNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nr_worm = 1;
  if (has_nr_worm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nr_worm(), output);
  }

  // required uint32 nr_human = 2;
  if (has_nr_human()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nr_human(), output);
  }

  // required uint32 nr_god = 3;
  if (has_nr_god()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nr_god(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_CountryOccupyCityNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nr_worm = 1;
  if (has_nr_worm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nr_worm(), target);
  }

  // required uint32 nr_human = 2;
  if (has_nr_human()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nr_human(), target);
  }

  // required uint32 nr_god = 3;
  if (has_nr_god()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nr_god(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_CountryOccupyCityNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nr_worm = 1;
    if (has_nr_worm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nr_worm());
    }

    // required uint32 nr_human = 2;
    if (has_nr_human()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nr_human());
    }

    // required uint32 nr_god = 3;
    if (has_nr_god()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nr_god());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_CountryOccupyCityNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_CountryOccupyCityNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_CountryOccupyCityNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_CountryOccupyCityNum::MergeFrom(const GS2C_CountryOccupyCityNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nr_worm()) {
      set_nr_worm(from.nr_worm());
    }
    if (from.has_nr_human()) {
      set_nr_human(from.nr_human());
    }
    if (from.has_nr_god()) {
      set_nr_god(from.nr_god());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_CountryOccupyCityNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_CountryOccupyCityNum::CopyFrom(const GS2C_CountryOccupyCityNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_CountryOccupyCityNum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GS2C_CountryOccupyCityNum::Swap(GS2C_CountryOccupyCityNum* other) {
  if (other != this) {
    std::swap(nr_worm_, other->nr_worm_);
    std::swap(nr_human_, other->nr_human_);
    std::swap(nr_god_, other->nr_god_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_CountryOccupyCityNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_CountryOccupyCityNum_descriptor_;
  metadata.reflection = GS2C_CountryOccupyCityNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_PersonalAddSoldier::kRankOfAddSoldierFieldNumber;
const int GS2C_PersonalAddSoldier::kSelfInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_PersonalAddSoldier::GS2C_PersonalAddSoldier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_PersonalAddSoldier::InitAsDefaultInstance() {
  self_info_ = const_cast< ::pb::ShowData*>(&::pb::ShowData::default_instance());
}

GS2C_PersonalAddSoldier::GS2C_PersonalAddSoldier(const GS2C_PersonalAddSoldier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_PersonalAddSoldier::SharedCtor() {
  _cached_size_ = 0;
  self_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_PersonalAddSoldier::~GS2C_PersonalAddSoldier() {
  SharedDtor();
}

void GS2C_PersonalAddSoldier::SharedDtor() {
  if (this != default_instance_) {
    delete self_info_;
  }
}

void GS2C_PersonalAddSoldier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_PersonalAddSoldier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_PersonalAddSoldier_descriptor_;
}

const GS2C_PersonalAddSoldier& GS2C_PersonalAddSoldier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_PersonalAddSoldier* GS2C_PersonalAddSoldier::default_instance_ = NULL;

GS2C_PersonalAddSoldier* GS2C_PersonalAddSoldier::New() const {
  return new GS2C_PersonalAddSoldier;
}

void GS2C_PersonalAddSoldier::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_self_info()) {
      if (self_info_ != NULL) self_info_->::pb::ShowData::Clear();
    }
  }
  rank_of_add_soldier_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_PersonalAddSoldier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ShowData rank_of_add_soldier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_of_add_soldier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_of_add_soldier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_of_add_soldier;
        if (input->ExpectTag(18)) goto parse_self_info;
        break;
      }

      // optional .pb.ShowData self_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_PersonalAddSoldier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.ShowData rank_of_add_soldier = 1;
  for (int i = 0; i < this->rank_of_add_soldier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_of_add_soldier(i), output);
  }

  // optional .pb.ShowData self_info = 2;
  if (has_self_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_PersonalAddSoldier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.ShowData rank_of_add_soldier = 1;
  for (int i = 0; i < this->rank_of_add_soldier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_of_add_soldier(i), target);
  }

  // optional .pb.ShowData self_info = 2;
  if (has_self_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_PersonalAddSoldier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.ShowData self_info = 2;
    if (has_self_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_info());
    }

  }
  // repeated .pb.ShowData rank_of_add_soldier = 1;
  total_size += 1 * this->rank_of_add_soldier_size();
  for (int i = 0; i < this->rank_of_add_soldier_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_of_add_soldier(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_PersonalAddSoldier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_PersonalAddSoldier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_PersonalAddSoldier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_PersonalAddSoldier::MergeFrom(const GS2C_PersonalAddSoldier& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_of_add_soldier_.MergeFrom(from.rank_of_add_soldier_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self_info()) {
      mutable_self_info()->::pb::ShowData::MergeFrom(from.self_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_PersonalAddSoldier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_PersonalAddSoldier::CopyFrom(const GS2C_PersonalAddSoldier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_PersonalAddSoldier::IsInitialized() const {

  return true;
}

void GS2C_PersonalAddSoldier::Swap(GS2C_PersonalAddSoldier* other) {
  if (other != this) {
    rank_of_add_soldier_.Swap(&other->rank_of_add_soldier_);
    std::swap(self_info_, other->self_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_PersonalAddSoldier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_PersonalAddSoldier_descriptor_;
  metadata.reflection = GS2C_PersonalAddSoldier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_PersonalOccupyCityNum::kRankOfTakeCityFieldNumber;
const int GS2C_PersonalOccupyCityNum::kSelfInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_PersonalOccupyCityNum::GS2C_PersonalOccupyCityNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_PersonalOccupyCityNum::InitAsDefaultInstance() {
  self_info_ = const_cast< ::pb::ShowData*>(&::pb::ShowData::default_instance());
}

GS2C_PersonalOccupyCityNum::GS2C_PersonalOccupyCityNum(const GS2C_PersonalOccupyCityNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_PersonalOccupyCityNum::SharedCtor() {
  _cached_size_ = 0;
  self_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_PersonalOccupyCityNum::~GS2C_PersonalOccupyCityNum() {
  SharedDtor();
}

void GS2C_PersonalOccupyCityNum::SharedDtor() {
  if (this != default_instance_) {
    delete self_info_;
  }
}

void GS2C_PersonalOccupyCityNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_PersonalOccupyCityNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_PersonalOccupyCityNum_descriptor_;
}

const GS2C_PersonalOccupyCityNum& GS2C_PersonalOccupyCityNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_PersonalOccupyCityNum* GS2C_PersonalOccupyCityNum::default_instance_ = NULL;

GS2C_PersonalOccupyCityNum* GS2C_PersonalOccupyCityNum::New() const {
  return new GS2C_PersonalOccupyCityNum;
}

void GS2C_PersonalOccupyCityNum::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_self_info()) {
      if (self_info_ != NULL) self_info_->::pb::ShowData::Clear();
    }
  }
  rank_of_take_city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_PersonalOccupyCityNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ShowData rank_of_take_city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_of_take_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_of_take_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_of_take_city;
        if (input->ExpectTag(18)) goto parse_self_info;
        break;
      }

      // optional .pb.ShowData self_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_PersonalOccupyCityNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.ShowData rank_of_take_city = 1;
  for (int i = 0; i < this->rank_of_take_city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_of_take_city(i), output);
  }

  // optional .pb.ShowData self_info = 2;
  if (has_self_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_PersonalOccupyCityNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.ShowData rank_of_take_city = 1;
  for (int i = 0; i < this->rank_of_take_city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_of_take_city(i), target);
  }

  // optional .pb.ShowData self_info = 2;
  if (has_self_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_PersonalOccupyCityNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.ShowData self_info = 2;
    if (has_self_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_info());
    }

  }
  // repeated .pb.ShowData rank_of_take_city = 1;
  total_size += 1 * this->rank_of_take_city_size();
  for (int i = 0; i < this->rank_of_take_city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_of_take_city(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_PersonalOccupyCityNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_PersonalOccupyCityNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_PersonalOccupyCityNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_PersonalOccupyCityNum::MergeFrom(const GS2C_PersonalOccupyCityNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_of_take_city_.MergeFrom(from.rank_of_take_city_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self_info()) {
      mutable_self_info()->::pb::ShowData::MergeFrom(from.self_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_PersonalOccupyCityNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_PersonalOccupyCityNum::CopyFrom(const GS2C_PersonalOccupyCityNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_PersonalOccupyCityNum::IsInitialized() const {

  return true;
}

void GS2C_PersonalOccupyCityNum::Swap(GS2C_PersonalOccupyCityNum* other) {
  if (other != this) {
    rank_of_take_city_.Swap(&other->rank_of_take_city_);
    std::swap(self_info_, other->self_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_PersonalOccupyCityNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_PersonalOccupyCityNum_descriptor_;
  metadata.reflection = GS2C_PersonalOccupyCityNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterInfo::kCharacterLvFieldNumber;
const int CharacterInfo::kCharProtoIdFieldNumber;
#endif  // !_MSC_VER

CharacterInfo::CharacterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterInfo::InitAsDefaultInstance() {
}

CharacterInfo::CharacterInfo(const CharacterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterInfo::SharedCtor() {
  _cached_size_ = 0;
  character_lv_ = 0u;
  char_proto_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterInfo::~CharacterInfo() {
  SharedDtor();
}

void CharacterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfo_descriptor_;
}

const CharacterInfo& CharacterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

CharacterInfo* CharacterInfo::default_instance_ = NULL;

CharacterInfo* CharacterInfo::New() const {
  return new CharacterInfo;
}

void CharacterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_lv_ = 0u;
    char_proto_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 character_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_lv_)));
          set_has_character_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_proto_id;
        break;
      }

      // optional uint32 char_proto_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_proto_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_proto_id_)));
          set_has_char_proto_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 character_lv = 1;
  if (has_character_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_lv(), output);
  }

  // optional uint32 char_proto_id = 2;
  if (has_char_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 character_lv = 1;
  if (has_character_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_lv(), target);
  }

  // optional uint32 char_proto_id = 2;
  if (has_char_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 character_lv = 1;
    if (has_character_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_lv());
    }

    // optional uint32 char_proto_id = 2;
    if (has_char_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterInfo::MergeFrom(const CharacterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_lv()) {
      set_character_lv(from.character_lv());
    }
    if (from.has_char_proto_id()) {
      set_char_proto_id(from.char_proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterInfo::CopyFrom(const CharacterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfo::IsInitialized() const {

  return true;
}

void CharacterInfo::Swap(CharacterInfo* other) {
  if (other != this) {
    std::swap(character_lv_, other->character_lv_);
    std::swap(char_proto_id_, other->char_proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterInfo_descriptor_;
  metadata.reflection = CharacterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMsg::kCharacterInfoFieldNumber;
#endif  // !_MSC_VER

CharacterMsg::CharacterMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMsg::InitAsDefaultInstance() {
}

CharacterMsg::CharacterMsg(const CharacterMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMsg::~CharacterMsg() {
  SharedDtor();
}

void CharacterMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMsg_descriptor_;
}

const CharacterMsg& CharacterMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

CharacterMsg* CharacterMsg::default_instance_ = NULL;

CharacterMsg* CharacterMsg::New() const {
  return new CharacterMsg;
}

void CharacterMsg::Clear() {
  character_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CharacterInfo character_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_character_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_character_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CharacterInfo character_info = 1;
  for (int i = 0; i < this->character_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->character_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CharacterInfo character_info = 1;
  for (int i = 0; i < this->character_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->character_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CharacterInfo character_info = 1;
  total_size += 1 * this->character_info_size();
  for (int i = 0; i < this->character_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->character_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMsg::MergeFrom(const CharacterMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  character_info_.MergeFrom(from.character_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMsg::CopyFrom(const CharacterMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMsg::IsInitialized() const {

  return true;
}

void CharacterMsg::Swap(CharacterMsg* other) {
  if (other != this) {
    character_info_.Swap(&other->character_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMsg_descriptor_;
  metadata.reflection = CharacterMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SiegeArmyInfo::kSiegeLvFieldNumber;
const int SiegeArmyInfo::kSiegeCharIdFieldNumber;
#endif  // !_MSC_VER

SiegeArmyInfo::SiegeArmyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SiegeArmyInfo::InitAsDefaultInstance() {
}

SiegeArmyInfo::SiegeArmyInfo(const SiegeArmyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SiegeArmyInfo::SharedCtor() {
  _cached_size_ = 0;
  siege_lv_ = 0u;
  siege_char_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SiegeArmyInfo::~SiegeArmyInfo() {
  SharedDtor();
}

void SiegeArmyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SiegeArmyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiegeArmyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiegeArmyInfo_descriptor_;
}

const SiegeArmyInfo& SiegeArmyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

SiegeArmyInfo* SiegeArmyInfo::default_instance_ = NULL;

SiegeArmyInfo* SiegeArmyInfo::New() const {
  return new SiegeArmyInfo;
}

void SiegeArmyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    siege_lv_ = 0u;
    siege_char_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SiegeArmyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 siege_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &siege_lv_)));
          set_has_siege_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_siege_char_id;
        break;
      }

      // optional uint32 siege_char_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_siege_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &siege_char_id_)));
          set_has_siege_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SiegeArmyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 siege_lv = 1;
  if (has_siege_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->siege_lv(), output);
  }

  // optional uint32 siege_char_id = 2;
  if (has_siege_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->siege_char_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SiegeArmyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 siege_lv = 1;
  if (has_siege_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->siege_lv(), target);
  }

  // optional uint32 siege_char_id = 2;
  if (has_siege_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->siege_char_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SiegeArmyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 siege_lv = 1;
    if (has_siege_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->siege_lv());
    }

    // optional uint32 siege_char_id = 2;
    if (has_siege_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->siege_char_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiegeArmyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SiegeArmyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SiegeArmyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SiegeArmyInfo::MergeFrom(const SiegeArmyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_siege_lv()) {
      set_siege_lv(from.siege_lv());
    }
    if (from.has_siege_char_id()) {
      set_siege_char_id(from.siege_char_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SiegeArmyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiegeArmyInfo::CopyFrom(const SiegeArmyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiegeArmyInfo::IsInitialized() const {

  return true;
}

void SiegeArmyInfo::Swap(SiegeArmyInfo* other) {
  if (other != this) {
    std::swap(siege_lv_, other->siege_lv_);
    std::swap(siege_char_id_, other->siege_char_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SiegeArmyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SiegeArmyInfo_descriptor_;
  metadata.reflection = SiegeArmyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SiegeArmyMsg::kSiegeArmyInfoFieldNumber;
#endif  // !_MSC_VER

SiegeArmyMsg::SiegeArmyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SiegeArmyMsg::InitAsDefaultInstance() {
}

SiegeArmyMsg::SiegeArmyMsg(const SiegeArmyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SiegeArmyMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SiegeArmyMsg::~SiegeArmyMsg() {
  SharedDtor();
}

void SiegeArmyMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SiegeArmyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiegeArmyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiegeArmyMsg_descriptor_;
}

const SiegeArmyMsg& SiegeArmyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

SiegeArmyMsg* SiegeArmyMsg::default_instance_ = NULL;

SiegeArmyMsg* SiegeArmyMsg::New() const {
  return new SiegeArmyMsg;
}

void SiegeArmyMsg::Clear() {
  siege_army_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SiegeArmyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SiegeArmyInfo siege_army_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_siege_army_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_siege_army_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_siege_army_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SiegeArmyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.SiegeArmyInfo siege_army_info = 1;
  for (int i = 0; i < this->siege_army_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->siege_army_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SiegeArmyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.SiegeArmyInfo siege_army_info = 1;
  for (int i = 0; i < this->siege_army_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->siege_army_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SiegeArmyMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.SiegeArmyInfo siege_army_info = 1;
  total_size += 1 * this->siege_army_info_size();
  for (int i = 0; i < this->siege_army_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->siege_army_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiegeArmyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SiegeArmyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SiegeArmyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SiegeArmyMsg::MergeFrom(const SiegeArmyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  siege_army_info_.MergeFrom(from.siege_army_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SiegeArmyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiegeArmyMsg::CopyFrom(const SiegeArmyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiegeArmyMsg::IsInitialized() const {

  return true;
}

void SiegeArmyMsg::Swap(SiegeArmyMsg* other) {
  if (other != this) {
    siege_army_info_.Swap(&other->siege_army_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SiegeArmyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SiegeArmyMsg_descriptor_;
  metadata.reflection = SiegeArmyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShenQiInfo::kShenqiLvFieldNumber;
const int ShenQiInfo::kShenqiIdFieldNumber;
#endif  // !_MSC_VER

ShenQiInfo::ShenQiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShenQiInfo::InitAsDefaultInstance() {
}

ShenQiInfo::ShenQiInfo(const ShenQiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShenQiInfo::SharedCtor() {
  _cached_size_ = 0;
  shenqi_lv_ = 0u;
  shenqi_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShenQiInfo::~ShenQiInfo() {
  SharedDtor();
}

void ShenQiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShenQiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShenQiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShenQiInfo_descriptor_;
}

const ShenQiInfo& ShenQiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

ShenQiInfo* ShenQiInfo::default_instance_ = NULL;

ShenQiInfo* ShenQiInfo::New() const {
  return new ShenQiInfo;
}

void ShenQiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shenqi_lv_ = 0u;
    shenqi_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShenQiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shenqi_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shenqi_lv_)));
          set_has_shenqi_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shenqi_id;
        break;
      }

      // optional uint32 shenqi_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shenqi_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shenqi_id_)));
          set_has_shenqi_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShenQiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shenqi_lv = 1;
  if (has_shenqi_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shenqi_lv(), output);
  }

  // optional uint32 shenqi_id = 2;
  if (has_shenqi_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shenqi_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShenQiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shenqi_lv = 1;
  if (has_shenqi_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shenqi_lv(), target);
  }

  // optional uint32 shenqi_id = 2;
  if (has_shenqi_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shenqi_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShenQiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shenqi_lv = 1;
    if (has_shenqi_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shenqi_lv());
    }

    // optional uint32 shenqi_id = 2;
    if (has_shenqi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shenqi_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShenQiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShenQiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShenQiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShenQiInfo::MergeFrom(const ShenQiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shenqi_lv()) {
      set_shenqi_lv(from.shenqi_lv());
    }
    if (from.has_shenqi_id()) {
      set_shenqi_id(from.shenqi_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShenQiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShenQiInfo::CopyFrom(const ShenQiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShenQiInfo::IsInitialized() const {

  return true;
}

void ShenQiInfo::Swap(ShenQiInfo* other) {
  if (other != this) {
    std::swap(shenqi_lv_, other->shenqi_lv_);
    std::swap(shenqi_id_, other->shenqi_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShenQiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShenQiInfo_descriptor_;
  metadata.reflection = ShenQiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShenQiMsg::kShenQiInfoFieldNumber;
#endif  // !_MSC_VER

ShenQiMsg::ShenQiMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShenQiMsg::InitAsDefaultInstance() {
}

ShenQiMsg::ShenQiMsg(const ShenQiMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShenQiMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShenQiMsg::~ShenQiMsg() {
  SharedDtor();
}

void ShenQiMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShenQiMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShenQiMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShenQiMsg_descriptor_;
}

const ShenQiMsg& ShenQiMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

ShenQiMsg* ShenQiMsg::default_instance_ = NULL;

ShenQiMsg* ShenQiMsg::New() const {
  return new ShenQiMsg;
}

void ShenQiMsg::Clear() {
  shen_qi_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShenQiMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ShenQiInfo shen_qi_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shen_qi_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shen_qi_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shen_qi_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShenQiMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.ShenQiInfo shen_qi_info = 1;
  for (int i = 0; i < this->shen_qi_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shen_qi_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShenQiMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.ShenQiInfo shen_qi_info = 1;
  for (int i = 0; i < this->shen_qi_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shen_qi_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShenQiMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.ShenQiInfo shen_qi_info = 1;
  total_size += 1 * this->shen_qi_info_size();
  for (int i = 0; i < this->shen_qi_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shen_qi_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShenQiMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShenQiMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShenQiMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShenQiMsg::MergeFrom(const ShenQiMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  shen_qi_info_.MergeFrom(from.shen_qi_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShenQiMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShenQiMsg::CopyFrom(const ShenQiMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShenQiMsg::IsInitialized() const {

  return true;
}

void ShenQiMsg::Swap(ShenQiMsg* other) {
  if (other != this) {
    shen_qi_info_.Swap(&other->shen_qi_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShenQiMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShenQiMsg_descriptor_;
  metadata.reflection = ShenQiMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MilitaryPowerPack::kMilitaryPowerRankFieldNumber;
const int MilitaryPowerPack::kCharMsgFieldNumber;
const int MilitaryPowerPack::kSiegeArmyInfoFieldNumber;
const int MilitaryPowerPack::kShenqiMsgFieldNumber;
#endif  // !_MSC_VER

MilitaryPowerPack::MilitaryPowerPack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MilitaryPowerPack::InitAsDefaultInstance() {
  military_power_rank_ = const_cast< ::pb::ShowData*>(&::pb::ShowData::default_instance());
  char_msg_ = const_cast< ::pb::CharacterMsg*>(&::pb::CharacterMsg::default_instance());
  siege_army_info_ = const_cast< ::pb::SiegeArmyMsg*>(&::pb::SiegeArmyMsg::default_instance());
  shenqi_msg_ = const_cast< ::pb::ShenQiMsg*>(&::pb::ShenQiMsg::default_instance());
}

MilitaryPowerPack::MilitaryPowerPack(const MilitaryPowerPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MilitaryPowerPack::SharedCtor() {
  _cached_size_ = 0;
  military_power_rank_ = NULL;
  char_msg_ = NULL;
  siege_army_info_ = NULL;
  shenqi_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilitaryPowerPack::~MilitaryPowerPack() {
  SharedDtor();
}

void MilitaryPowerPack::SharedDtor() {
  if (this != default_instance_) {
    delete military_power_rank_;
    delete char_msg_;
    delete siege_army_info_;
    delete shenqi_msg_;
  }
}

void MilitaryPowerPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MilitaryPowerPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MilitaryPowerPack_descriptor_;
}

const MilitaryPowerPack& MilitaryPowerPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

MilitaryPowerPack* MilitaryPowerPack::default_instance_ = NULL;

MilitaryPowerPack* MilitaryPowerPack::New() const {
  return new MilitaryPowerPack;
}

void MilitaryPowerPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_military_power_rank()) {
      if (military_power_rank_ != NULL) military_power_rank_->::pb::ShowData::Clear();
    }
    if (has_char_msg()) {
      if (char_msg_ != NULL) char_msg_->::pb::CharacterMsg::Clear();
    }
    if (has_siege_army_info()) {
      if (siege_army_info_ != NULL) siege_army_info_->::pb::SiegeArmyMsg::Clear();
    }
    if (has_shenqi_msg()) {
      if (shenqi_msg_ != NULL) shenqi_msg_->::pb::ShenQiMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MilitaryPowerPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ShowData military_power_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_military_power_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_char_msg;
        break;
      }

      // optional .pb.CharacterMsg char_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_siege_army_info;
        break;
      }

      // optional .pb.SiegeArmyMsg siege_army_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_siege_army_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_siege_army_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shenqi_msg;
        break;
      }

      // optional .pb.ShenQiMsg shenqi_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shenqi_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shenqi_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MilitaryPowerPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ShowData military_power_rank = 1;
  if (has_military_power_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->military_power_rank(), output);
  }

  // optional .pb.CharacterMsg char_msg = 2;
  if (has_char_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->char_msg(), output);
  }

  // optional .pb.SiegeArmyMsg siege_army_info = 3;
  if (has_siege_army_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->siege_army_info(), output);
  }

  // optional .pb.ShenQiMsg shenqi_msg = 4;
  if (has_shenqi_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shenqi_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MilitaryPowerPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ShowData military_power_rank = 1;
  if (has_military_power_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->military_power_rank(), target);
  }

  // optional .pb.CharacterMsg char_msg = 2;
  if (has_char_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->char_msg(), target);
  }

  // optional .pb.SiegeArmyMsg siege_army_info = 3;
  if (has_siege_army_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->siege_army_info(), target);
  }

  // optional .pb.ShenQiMsg shenqi_msg = 4;
  if (has_shenqi_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shenqi_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MilitaryPowerPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ShowData military_power_rank = 1;
    if (has_military_power_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->military_power_rank());
    }

    // optional .pb.CharacterMsg char_msg = 2;
    if (has_char_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_msg());
    }

    // optional .pb.SiegeArmyMsg siege_army_info = 3;
    if (has_siege_army_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->siege_army_info());
    }

    // optional .pb.ShenQiMsg shenqi_msg = 4;
    if (has_shenqi_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shenqi_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilitaryPowerPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MilitaryPowerPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MilitaryPowerPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MilitaryPowerPack::MergeFrom(const MilitaryPowerPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_military_power_rank()) {
      mutable_military_power_rank()->::pb::ShowData::MergeFrom(from.military_power_rank());
    }
    if (from.has_char_msg()) {
      mutable_char_msg()->::pb::CharacterMsg::MergeFrom(from.char_msg());
    }
    if (from.has_siege_army_info()) {
      mutable_siege_army_info()->::pb::SiegeArmyMsg::MergeFrom(from.siege_army_info());
    }
    if (from.has_shenqi_msg()) {
      mutable_shenqi_msg()->::pb::ShenQiMsg::MergeFrom(from.shenqi_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MilitaryPowerPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MilitaryPowerPack::CopyFrom(const MilitaryPowerPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilitaryPowerPack::IsInitialized() const {

  return true;
}

void MilitaryPowerPack::Swap(MilitaryPowerPack* other) {
  if (other != this) {
    std::swap(military_power_rank_, other->military_power_rank_);
    std::swap(char_msg_, other->char_msg_);
    std::swap(siege_army_info_, other->siege_army_info_);
    std::swap(shenqi_msg_, other->shenqi_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MilitaryPowerPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MilitaryPowerPack_descriptor_;
  metadata.reflection = MilitaryPowerPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_MilitaryPowerRankList::kMilitaryPowerListFieldNumber;
const int GS2C_MilitaryPowerRankList::kSelfInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_MilitaryPowerRankList::GS2C_MilitaryPowerRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_MilitaryPowerRankList::InitAsDefaultInstance() {
  self_info_ = const_cast< ::pb::MilitaryPowerPack*>(&::pb::MilitaryPowerPack::default_instance());
}

GS2C_MilitaryPowerRankList::GS2C_MilitaryPowerRankList(const GS2C_MilitaryPowerRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_MilitaryPowerRankList::SharedCtor() {
  _cached_size_ = 0;
  self_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_MilitaryPowerRankList::~GS2C_MilitaryPowerRankList() {
  SharedDtor();
}

void GS2C_MilitaryPowerRankList::SharedDtor() {
  if (this != default_instance_) {
    delete self_info_;
  }
}

void GS2C_MilitaryPowerRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_MilitaryPowerRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_MilitaryPowerRankList_descriptor_;
}

const GS2C_MilitaryPowerRankList& GS2C_MilitaryPowerRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_MilitaryPowerRankList* GS2C_MilitaryPowerRankList::default_instance_ = NULL;

GS2C_MilitaryPowerRankList* GS2C_MilitaryPowerRankList::New() const {
  return new GS2C_MilitaryPowerRankList;
}

void GS2C_MilitaryPowerRankList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_self_info()) {
      if (self_info_ != NULL) self_info_->::pb::MilitaryPowerPack::Clear();
    }
  }
  military_power_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_MilitaryPowerRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.MilitaryPowerPack military_power_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_military_power_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_military_power_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_military_power_list;
        if (input->ExpectTag(18)) goto parse_self_info;
        break;
      }

      // optional .pb.MilitaryPowerPack self_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_MilitaryPowerRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.MilitaryPowerPack military_power_list = 1;
  for (int i = 0; i < this->military_power_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->military_power_list(i), output);
  }

  // optional .pb.MilitaryPowerPack self_info = 2;
  if (has_self_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_MilitaryPowerRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.MilitaryPowerPack military_power_list = 1;
  for (int i = 0; i < this->military_power_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->military_power_list(i), target);
  }

  // optional .pb.MilitaryPowerPack self_info = 2;
  if (has_self_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_MilitaryPowerRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.MilitaryPowerPack self_info = 2;
    if (has_self_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_info());
    }

  }
  // repeated .pb.MilitaryPowerPack military_power_list = 1;
  total_size += 1 * this->military_power_list_size();
  for (int i = 0; i < this->military_power_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->military_power_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_MilitaryPowerRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_MilitaryPowerRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_MilitaryPowerRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_MilitaryPowerRankList::MergeFrom(const GS2C_MilitaryPowerRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  military_power_list_.MergeFrom(from.military_power_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self_info()) {
      mutable_self_info()->::pb::MilitaryPowerPack::MergeFrom(from.self_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_MilitaryPowerRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_MilitaryPowerRankList::CopyFrom(const GS2C_MilitaryPowerRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_MilitaryPowerRankList::IsInitialized() const {

  return true;
}

void GS2C_MilitaryPowerRankList::Swap(GS2C_MilitaryPowerRankList* other) {
  if (other != this) {
    military_power_list_.Swap(&other->military_power_list_);
    std::swap(self_info_, other->self_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_MilitaryPowerRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_MilitaryPowerRankList_descriptor_;
  metadata.reflection = GS2C_MilitaryPowerRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Achieve_Congratulate::kInfoFieldNumber;
const int GS2C_Achieve_Congratulate::kToPlayerNameFieldNumber;
#endif  // !_MSC_VER

GS2C_Achieve_Congratulate::GS2C_Achieve_Congratulate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Achieve_Congratulate::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::C2GS_Congratulate_Accept*>(&::pb::C2GS_Congratulate_Accept::default_instance());
}

GS2C_Achieve_Congratulate::GS2C_Achieve_Congratulate(const GS2C_Achieve_Congratulate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Achieve_Congratulate::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  to_player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Achieve_Congratulate::~GS2C_Achieve_Congratulate() {
  SharedDtor();
}

void GS2C_Achieve_Congratulate::SharedDtor() {
  if (to_player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_player_name_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void GS2C_Achieve_Congratulate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Achieve_Congratulate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Achieve_Congratulate_descriptor_;
}

const GS2C_Achieve_Congratulate& GS2C_Achieve_Congratulate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Achieve_Congratulate* GS2C_Achieve_Congratulate::default_instance_ = NULL;

GS2C_Achieve_Congratulate* GS2C_Achieve_Congratulate::New() const {
  return new GS2C_Achieve_Congratulate;
}

void GS2C_Achieve_Congratulate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::pb::C2GS_Congratulate_Accept::Clear();
    }
    if (has_to_player_name()) {
      if (to_player_name_ != &::google::protobuf::internal::kEmptyString) {
        to_player_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Achieve_Congratulate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.C2GS_Congratulate_Accept info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to_player_name;
        break;
      }

      // optional string to_player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_player_name().data(), this->to_player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Achieve_Congratulate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.C2GS_Congratulate_Accept info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional string to_player_name = 2;
  if (has_to_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_player_name().data(), this->to_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to_player_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Achieve_Congratulate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.C2GS_Congratulate_Accept info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional string to_player_name = 2;
  if (has_to_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_player_name().data(), this->to_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_player_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Achieve_Congratulate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.C2GS_Congratulate_Accept info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional string to_player_name = 2;
    if (has_to_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_player_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Achieve_Congratulate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Achieve_Congratulate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Achieve_Congratulate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Achieve_Congratulate::MergeFrom(const GS2C_Achieve_Congratulate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::C2GS_Congratulate_Accept::MergeFrom(from.info());
    }
    if (from.has_to_player_name()) {
      set_to_player_name(from.to_player_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Achieve_Congratulate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Achieve_Congratulate::CopyFrom(const GS2C_Achieve_Congratulate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Achieve_Congratulate::IsInitialized() const {

  return true;
}

void GS2C_Achieve_Congratulate::Swap(GS2C_Achieve_Congratulate* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(to_player_name_, other->to_player_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Achieve_Congratulate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Achieve_Congratulate_descriptor_;
  metadata.reflection = GS2C_Achieve_Congratulate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Congratulate_Accept::kToPlayerIdFieldNumber;
const int C2GS_Congratulate_Accept::kRankFieldNumber;
const int C2GS_Congratulate_Accept::kSuitIdFieldNumber;
const int C2GS_Congratulate_Accept::kCongratulateTypeFieldNumber;
const int C2GS_Congratulate_Accept::kTableIdFieldNumber;
const int C2GS_Congratulate_Accept::kOperateTypeFieldNumber;
const int C2GS_Congratulate_Accept::kActiveTimeFieldNumber;
#endif  // !_MSC_VER

C2GS_Congratulate_Accept::C2GS_Congratulate_Accept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Congratulate_Accept::InitAsDefaultInstance() {
}

C2GS_Congratulate_Accept::C2GS_Congratulate_Accept(const C2GS_Congratulate_Accept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Congratulate_Accept::SharedCtor() {
  _cached_size_ = 0;
  to_player_id_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  suit_id_ = 0u;
  congratulate_type_ = 0u;
  table_id_ = 0u;
  operate_type_ = 0u;
  active_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Congratulate_Accept::~C2GS_Congratulate_Accept() {
  SharedDtor();
}

void C2GS_Congratulate_Accept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Congratulate_Accept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Congratulate_Accept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Congratulate_Accept_descriptor_;
}

const C2GS_Congratulate_Accept& C2GS_Congratulate_Accept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

C2GS_Congratulate_Accept* C2GS_Congratulate_Accept::default_instance_ = NULL;

C2GS_Congratulate_Accept* C2GS_Congratulate_Accept::New() const {
  return new C2GS_Congratulate_Accept;
}

void C2GS_Congratulate_Accept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_player_id_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    suit_id_ = 0u;
    congratulate_type_ = 0u;
    table_id_ = 0u;
    operate_type_ = 0u;
    active_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Congratulate_Accept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 to_player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_player_id_)));
          set_has_to_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suit_id;
        break;
      }

      // optional uint32 suit_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_congratulate_type;
        break;
      }

      // optional uint32 congratulate_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_congratulate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &congratulate_type_)));
          set_has_congratulate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_table_id;
        break;
      }

      // optional uint32 table_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_active_time;
        break;
      }

      // optional uint64 active_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Congratulate_Accept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 to_player_id = 1;
  if (has_to_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->to_player_id(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 suit_id = 3;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->suit_id(), output);
  }

  // optional uint32 congratulate_type = 4;
  if (has_congratulate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->congratulate_type(), output);
  }

  // optional uint32 table_id = 5;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->table_id(), output);
  }

  // optional uint32 operate_type = 6;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->operate_type(), output);
  }

  // optional uint64 active_time = 7;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->active_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Congratulate_Accept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 to_player_id = 1;
  if (has_to_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->to_player_id(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 suit_id = 3;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->suit_id(), target);
  }

  // optional uint32 congratulate_type = 4;
  if (has_congratulate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->congratulate_type(), target);
  }

  // optional uint32 table_id = 5;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->table_id(), target);
  }

  // optional uint32 operate_type = 6;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->operate_type(), target);
  }

  // optional uint64 active_time = 7;
  if (has_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->active_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Congratulate_Accept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 to_player_id = 1;
    if (has_to_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_player_id());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 suit_id = 3;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suit_id());
    }

    // optional uint32 congratulate_type = 4;
    if (has_congratulate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->congratulate_type());
    }

    // optional uint32 table_id = 5;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 operate_type = 6;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // optional uint64 active_time = 7;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Congratulate_Accept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Congratulate_Accept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Congratulate_Accept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Congratulate_Accept::MergeFrom(const C2GS_Congratulate_Accept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_player_id()) {
      set_to_player_id(from.to_player_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
    if (from.has_congratulate_type()) {
      set_congratulate_type(from.congratulate_type());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Congratulate_Accept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Congratulate_Accept::CopyFrom(const C2GS_Congratulate_Accept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Congratulate_Accept::IsInitialized() const {

  return true;
}

void C2GS_Congratulate_Accept::Swap(C2GS_Congratulate_Accept* other) {
  if (other != this) {
    std::swap(to_player_id_, other->to_player_id_);
    std::swap(rank_, other->rank_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(congratulate_type_, other->congratulate_type_);
    std::swap(table_id_, other->table_id_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(active_time_, other->active_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Congratulate_Accept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Congratulate_Accept_descriptor_;
  metadata.reflection = C2GS_Congratulate_Accept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ListOfCurrentCanCongratulate::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_ListOfCurrentCanCongratulate::GS2C_ListOfCurrentCanCongratulate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ListOfCurrentCanCongratulate::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::GS2C_Achieve_Congratulate*>(&::pb::GS2C_Achieve_Congratulate::default_instance());
}

GS2C_ListOfCurrentCanCongratulate::GS2C_ListOfCurrentCanCongratulate(const GS2C_ListOfCurrentCanCongratulate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ListOfCurrentCanCongratulate::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ListOfCurrentCanCongratulate::~GS2C_ListOfCurrentCanCongratulate() {
  SharedDtor();
}

void GS2C_ListOfCurrentCanCongratulate::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GS2C_ListOfCurrentCanCongratulate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ListOfCurrentCanCongratulate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ListOfCurrentCanCongratulate_descriptor_;
}

const GS2C_ListOfCurrentCanCongratulate& GS2C_ListOfCurrentCanCongratulate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_ListOfCurrentCanCongratulate* GS2C_ListOfCurrentCanCongratulate::default_instance_ = NULL;

GS2C_ListOfCurrentCanCongratulate* GS2C_ListOfCurrentCanCongratulate::New() const {
  return new GS2C_ListOfCurrentCanCongratulate;
}

void GS2C_ListOfCurrentCanCongratulate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::pb::GS2C_Achieve_Congratulate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ListOfCurrentCanCongratulate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.GS2C_Achieve_Congratulate info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ListOfCurrentCanCongratulate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.GS2C_Achieve_Congratulate info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ListOfCurrentCanCongratulate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.GS2C_Achieve_Congratulate info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ListOfCurrentCanCongratulate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.GS2C_Achieve_Congratulate info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ListOfCurrentCanCongratulate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ListOfCurrentCanCongratulate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ListOfCurrentCanCongratulate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ListOfCurrentCanCongratulate::MergeFrom(const GS2C_ListOfCurrentCanCongratulate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::GS2C_Achieve_Congratulate::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ListOfCurrentCanCongratulate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ListOfCurrentCanCongratulate::CopyFrom(const GS2C_ListOfCurrentCanCongratulate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ListOfCurrentCanCongratulate::IsInitialized() const {

  return true;
}

void GS2C_ListOfCurrentCanCongratulate::Swap(GS2C_ListOfCurrentCanCongratulate* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ListOfCurrentCanCongratulate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ListOfCurrentCanCongratulate_descriptor_;
  metadata.reflection = GS2C_ListOfCurrentCanCongratulate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Congratulate_Accept_Rsp::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Congratulate_Accept_Rsp::GS2C_Congratulate_Accept_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Congratulate_Accept_Rsp::InitAsDefaultInstance() {
}

GS2C_Congratulate_Accept_Rsp::GS2C_Congratulate_Accept_Rsp(const GS2C_Congratulate_Accept_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Congratulate_Accept_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Congratulate_Accept_Rsp::~GS2C_Congratulate_Accept_Rsp() {
  SharedDtor();
}

void GS2C_Congratulate_Accept_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Congratulate_Accept_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Congratulate_Accept_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Congratulate_Accept_Rsp_descriptor_;
}

const GS2C_Congratulate_Accept_Rsp& GS2C_Congratulate_Accept_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Congratulate_Accept_Rsp* GS2C_Congratulate_Accept_Rsp::default_instance_ = NULL;

GS2C_Congratulate_Accept_Rsp* GS2C_Congratulate_Accept_Rsp::New() const {
  return new GS2C_Congratulate_Accept_Rsp;
}

void GS2C_Congratulate_Accept_Rsp::Clear() {
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Congratulate_Accept_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Congratulate_Accept_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Congratulate_Accept_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Congratulate_Accept_Rsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.StReward reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Congratulate_Accept_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Congratulate_Accept_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Congratulate_Accept_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Congratulate_Accept_Rsp::MergeFrom(const GS2C_Congratulate_Accept_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Congratulate_Accept_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Congratulate_Accept_Rsp::CopyFrom(const GS2C_Congratulate_Accept_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Congratulate_Accept_Rsp::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Congratulate_Accept_Rsp::Swap(GS2C_Congratulate_Accept_Rsp* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Congratulate_Accept_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Congratulate_Accept_Rsp_descriptor_;
  metadata.reflection = GS2C_Congratulate_Accept_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_CongratulateInfo::kTableIdFieldNumber;
const int GxDB_CongratulateInfo::kIsAchieveFieldNumber;
const int GxDB_CongratulateInfo::kIsRewardFieldNumber;
const int GxDB_CongratulateInfo::kBeenCongratulatedCountFieldNumber;
#endif  // !_MSC_VER

GxDB_CongratulateInfo::GxDB_CongratulateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_CongratulateInfo::InitAsDefaultInstance() {
}

GxDB_CongratulateInfo::GxDB_CongratulateInfo(const GxDB_CongratulateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_CongratulateInfo::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  is_achieve_ = 0u;
  is_reward_ = 0u;
  been_congratulated_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_CongratulateInfo::~GxDB_CongratulateInfo() {
  SharedDtor();
}

void GxDB_CongratulateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_CongratulateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_CongratulateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_CongratulateInfo_descriptor_;
}

const GxDB_CongratulateInfo& GxDB_CongratulateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GxDB_CongratulateInfo* GxDB_CongratulateInfo::default_instance_ = NULL;

GxDB_CongratulateInfo* GxDB_CongratulateInfo::New() const {
  return new GxDB_CongratulateInfo;
}

void GxDB_CongratulateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    is_achieve_ = 0u;
    is_reward_ = 0u;
    been_congratulated_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_CongratulateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_achieve;
        break;
      }

      // optional uint32 is_achieve = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_achieve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_achieve_)));
          set_has_is_achieve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_reward;
        break;
      }

      // optional uint32 is_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_reward_)));
          set_has_is_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_been_congratulated_count;
        break;
      }

      // optional uint32 been_congratulated_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_been_congratulated_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &been_congratulated_count_)));
          set_has_been_congratulated_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_CongratulateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // optional uint32 is_achieve = 2;
  if (has_is_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_achieve(), output);
  }

  // optional uint32 is_reward = 3;
  if (has_is_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_reward(), output);
  }

  // optional uint32 been_congratulated_count = 4;
  if (has_been_congratulated_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->been_congratulated_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_CongratulateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // optional uint32 is_achieve = 2;
  if (has_is_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_achieve(), target);
  }

  // optional uint32 is_reward = 3;
  if (has_is_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_reward(), target);
  }

  // optional uint32 been_congratulated_count = 4;
  if (has_been_congratulated_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->been_congratulated_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_CongratulateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 is_achieve = 2;
    if (has_is_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_achieve());
    }

    // optional uint32 is_reward = 3;
    if (has_is_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_reward());
    }

    // optional uint32 been_congratulated_count = 4;
    if (has_been_congratulated_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->been_congratulated_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_CongratulateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_CongratulateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_CongratulateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_CongratulateInfo::MergeFrom(const GxDB_CongratulateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_is_achieve()) {
      set_is_achieve(from.is_achieve());
    }
    if (from.has_is_reward()) {
      set_is_reward(from.is_reward());
    }
    if (from.has_been_congratulated_count()) {
      set_been_congratulated_count(from.been_congratulated_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_CongratulateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_CongratulateInfo::CopyFrom(const GxDB_CongratulateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_CongratulateInfo::IsInitialized() const {

  return true;
}

void GxDB_CongratulateInfo::Swap(GxDB_CongratulateInfo* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(is_achieve_, other->is_achieve_);
    std::swap(is_reward_, other->is_reward_);
    std::swap(been_congratulated_count_, other->been_congratulated_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_CongratulateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_CongratulateInfo_descriptor_;
  metadata.reflection = GxDB_CongratulateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_CongratulateRewardLog::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_CongratulateRewardLog::GxDB_CongratulateRewardLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_CongratulateRewardLog::InitAsDefaultInstance() {
}

GxDB_CongratulateRewardLog::GxDB_CongratulateRewardLog(const GxDB_CongratulateRewardLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_CongratulateRewardLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_CongratulateRewardLog::~GxDB_CongratulateRewardLog() {
  SharedDtor();
}

void GxDB_CongratulateRewardLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_CongratulateRewardLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_CongratulateRewardLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_CongratulateRewardLog_descriptor_;
}

const GxDB_CongratulateRewardLog& GxDB_CongratulateRewardLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GxDB_CongratulateRewardLog* GxDB_CongratulateRewardLog::default_instance_ = NULL;

GxDB_CongratulateRewardLog* GxDB_CongratulateRewardLog::New() const {
  return new GxDB_CongratulateRewardLog;
}

void GxDB_CongratulateRewardLog::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_CongratulateRewardLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_CongratulateInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_CongratulateRewardLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_CongratulateInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_CongratulateRewardLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_CongratulateInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_CongratulateRewardLog::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_CongratulateInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_CongratulateRewardLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_CongratulateRewardLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_CongratulateRewardLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_CongratulateRewardLog::MergeFrom(const GxDB_CongratulateRewardLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_CongratulateRewardLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_CongratulateRewardLog::CopyFrom(const GxDB_CongratulateRewardLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_CongratulateRewardLog::IsInitialized() const {

  return true;
}

void GxDB_CongratulateRewardLog::Swap(GxDB_CongratulateRewardLog* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_CongratulateRewardLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_CongratulateRewardLog_descriptor_;
  metadata.reflection = GxDB_CongratulateRewardLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_CongratulateBeenCongratualted::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_CongratulateBeenCongratualted::GxDB_CongratulateBeenCongratualted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_CongratulateBeenCongratualted::InitAsDefaultInstance() {
}

GxDB_CongratulateBeenCongratualted::GxDB_CongratulateBeenCongratualted(const GxDB_CongratulateBeenCongratualted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_CongratulateBeenCongratualted::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_CongratulateBeenCongratualted::~GxDB_CongratulateBeenCongratualted() {
  SharedDtor();
}

void GxDB_CongratulateBeenCongratualted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_CongratulateBeenCongratualted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_CongratulateBeenCongratualted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_CongratulateBeenCongratualted_descriptor_;
}

const GxDB_CongratulateBeenCongratualted& GxDB_CongratulateBeenCongratualted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GxDB_CongratulateBeenCongratualted* GxDB_CongratulateBeenCongratualted::default_instance_ = NULL;

GxDB_CongratulateBeenCongratualted* GxDB_CongratulateBeenCongratualted::New() const {
  return new GxDB_CongratulateBeenCongratualted;
}

void GxDB_CongratulateBeenCongratualted::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_CongratulateBeenCongratualted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.C2GS_Congratulate_Accept info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_CongratulateBeenCongratualted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.C2GS_Congratulate_Accept info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_CongratulateBeenCongratualted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.C2GS_Congratulate_Accept info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_CongratulateBeenCongratualted::ByteSize() const {
  int total_size = 0;

  // repeated .pb.C2GS_Congratulate_Accept info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_CongratulateBeenCongratualted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_CongratulateBeenCongratualted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_CongratulateBeenCongratualted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_CongratulateBeenCongratualted::MergeFrom(const GxDB_CongratulateBeenCongratualted& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_CongratulateBeenCongratualted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_CongratulateBeenCongratualted::CopyFrom(const GxDB_CongratulateBeenCongratualted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_CongratulateBeenCongratualted::IsInitialized() const {

  return true;
}

void GxDB_CongratulateBeenCongratualted::Swap(GxDB_CongratulateBeenCongratualted* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_CongratulateBeenCongratualted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_CongratulateBeenCongratualted_descriptor_;
  metadata.reflection = GxDB_CongratulateBeenCongratualted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Lottery_Daily_Reward::kTableIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Lottery_Daily_Reward::GS2C_Lottery_Daily_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Lottery_Daily_Reward::InitAsDefaultInstance() {
}

GS2C_Lottery_Daily_Reward::GS2C_Lottery_Daily_Reward(const GS2C_Lottery_Daily_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Lottery_Daily_Reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Lottery_Daily_Reward::~GS2C_Lottery_Daily_Reward() {
  SharedDtor();
}

void GS2C_Lottery_Daily_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Lottery_Daily_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Lottery_Daily_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Lottery_Daily_Reward_descriptor_;
}

const GS2C_Lottery_Daily_Reward& GS2C_Lottery_Daily_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GS2C_Lottery_Daily_Reward* GS2C_Lottery_Daily_Reward::default_instance_ = NULL;

GS2C_Lottery_Daily_Reward* GS2C_Lottery_Daily_Reward::New() const {
  return new GS2C_Lottery_Daily_Reward;
}

void GS2C_Lottery_Daily_Reward::Clear() {
  table_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Lottery_Daily_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_table_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_table_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_table_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Lottery_Daily_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 table_id = 1;
  for (int i = 0; i < this->table_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->table_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Lottery_Daily_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 table_id = 1;
  for (int i = 0; i < this->table_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->table_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Lottery_Daily_Reward::ByteSize() const {
  int total_size = 0;

  // repeated uint32 table_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->table_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->table_id(i));
    }
    total_size += 1 * this->table_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Lottery_Daily_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Lottery_Daily_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Lottery_Daily_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Lottery_Daily_Reward::MergeFrom(const GS2C_Lottery_Daily_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_id_.MergeFrom(from.table_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Lottery_Daily_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Lottery_Daily_Reward::CopyFrom(const GS2C_Lottery_Daily_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Lottery_Daily_Reward::IsInitialized() const {

  return true;
}

void GS2C_Lottery_Daily_Reward::Swap(GS2C_Lottery_Daily_Reward* other) {
  if (other != this) {
    table_id_.Swap(&other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Lottery_Daily_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Lottery_Daily_Reward_descriptor_;
  metadata.reflection = GS2C_Lottery_Daily_Reward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
