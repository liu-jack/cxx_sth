// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Smithy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Smithy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SubSmelter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSmelter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Smithy_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Smithy_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Smithy_Smelter_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Smithy_Smelter_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Smithy_Sub_Smelter_LevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Smithy_Sub_Smelter_LevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Smithy_Build_By_Silver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Smithy_Build_By_Silver_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Smithy_2eproto() {
  protobuf_AddDesc_Smithy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Smithy.proto");
  GOOGLE_CHECK(file != NULL);
  SubSmelter_descriptor_ = file->message_type(0);
  static const int SubSmelter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSmelter, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSmelter, smelt_times_),
  };
  SubSmelter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubSmelter_descriptor_,
      SubSmelter::default_instance_,
      SubSmelter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSmelter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSmelter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubSmelter));
  GS2C_Smithy_All_Info_descriptor_ = file->message_type(1);
  static const int GS2C_Smithy_All_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Smithy_All_Info, levle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Smithy_All_Info, silver_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Smithy_All_Info, sub_smelter_),
  };
  GS2C_Smithy_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Smithy_All_Info_descriptor_,
      GS2C_Smithy_All_Info::default_instance_,
      GS2C_Smithy_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Smithy_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Smithy_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Smithy_All_Info));
  C2GS_Smithy_Smelter_Do_descriptor_ = file->message_type(2);
  static const int C2GS_Smithy_Smelter_Do_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Smelter_Do, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Smelter_Do, item_id_),
  };
  C2GS_Smithy_Smelter_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Smithy_Smelter_Do_descriptor_,
      C2GS_Smithy_Smelter_Do::default_instance_,
      C2GS_Smithy_Smelter_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Smelter_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Smelter_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Smithy_Smelter_Do));
  C2GS_Smithy_Sub_Smelter_LevelUp_descriptor_ = file->message_type(3);
  static const int C2GS_Smithy_Sub_Smelter_LevelUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Sub_Smelter_LevelUp, idx_),
  };
  C2GS_Smithy_Sub_Smelter_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Smithy_Sub_Smelter_LevelUp_descriptor_,
      C2GS_Smithy_Sub_Smelter_LevelUp::default_instance_,
      C2GS_Smithy_Sub_Smelter_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Sub_Smelter_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Sub_Smelter_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Smithy_Sub_Smelter_LevelUp));
  C2GS_Smithy_Build_By_Silver_descriptor_ = file->message_type(4);
  static const int C2GS_Smithy_Build_By_Silver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Build_By_Silver, is_fast_),
  };
  C2GS_Smithy_Build_By_Silver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Smithy_Build_By_Silver_descriptor_,
      C2GS_Smithy_Build_By_Silver::default_instance_,
      C2GS_Smithy_Build_By_Silver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Build_By_Silver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Smithy_Build_By_Silver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Smithy_Build_By_Silver));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Smithy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubSmelter_descriptor_, &SubSmelter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Smithy_All_Info_descriptor_, &GS2C_Smithy_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Smithy_Smelter_Do_descriptor_, &C2GS_Smithy_Smelter_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Smithy_Sub_Smelter_LevelUp_descriptor_, &C2GS_Smithy_Sub_Smelter_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Smithy_Build_By_Silver_descriptor_, &C2GS_Smithy_Build_By_Silver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Smithy_2eproto() {
  delete SubSmelter::default_instance_;
  delete SubSmelter_reflection_;
  delete GS2C_Smithy_All_Info::default_instance_;
  delete GS2C_Smithy_All_Info_reflection_;
  delete C2GS_Smithy_Smelter_Do::default_instance_;
  delete C2GS_Smithy_Smelter_Do_reflection_;
  delete C2GS_Smithy_Sub_Smelter_LevelUp::default_instance_;
  delete C2GS_Smithy_Sub_Smelter_LevelUp_reflection_;
  delete C2GS_Smithy_Build_By_Silver::default_instance_;
  delete C2GS_Smithy_Build_By_Silver_reflection_;
}

void protobuf_AddDesc_Smithy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Smithy.proto\022\002pb\032\017CommomDef.proto\"/\n\nS"
    "ubSmelter\022\014\n\004star\030\001 \002(\r\022\023\n\013smelt_times\030\002"
    " \002(\r\"_\n\024GS2C_Smithy_All_Info\022\r\n\005levle\030\001 "
    "\001(\r\022\023\n\013silver_coin\030\002 \001(\r\022#\n\013sub_smelter\030"
    "\003 \003(\0132\016.pb.SubSmelter\"6\n\026C2GS_Smithy_Sme"
    "lter_Do\022\013\n\003idx\030\001 \002(\r\022\017\n\007item_id\030\002 \003(\r\".\n"
    "\037C2GS_Smithy_Sub_Smelter_LevelUp\022\013\n\003idx\030"
    "\001 \002(\r\".\n\033C2GS_Smithy_Build_By_Silver\022\017\n\007"
    "is_fast\030\001 \002(\010", 333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Smithy.proto", &protobuf_RegisterTypes);
  SubSmelter::default_instance_ = new SubSmelter();
  GS2C_Smithy_All_Info::default_instance_ = new GS2C_Smithy_All_Info();
  C2GS_Smithy_Smelter_Do::default_instance_ = new C2GS_Smithy_Smelter_Do();
  C2GS_Smithy_Sub_Smelter_LevelUp::default_instance_ = new C2GS_Smithy_Sub_Smelter_LevelUp();
  C2GS_Smithy_Build_By_Silver::default_instance_ = new C2GS_Smithy_Build_By_Silver();
  SubSmelter::default_instance_->InitAsDefaultInstance();
  GS2C_Smithy_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Smithy_Smelter_Do::default_instance_->InitAsDefaultInstance();
  C2GS_Smithy_Sub_Smelter_LevelUp::default_instance_->InitAsDefaultInstance();
  C2GS_Smithy_Build_By_Silver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Smithy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Smithy_2eproto {
  StaticDescriptorInitializer_Smithy_2eproto() {
    protobuf_AddDesc_Smithy_2eproto();
  }
} static_descriptor_initializer_Smithy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubSmelter::kStarFieldNumber;
const int SubSmelter::kSmeltTimesFieldNumber;
#endif  // !_MSC_VER

SubSmelter::SubSmelter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubSmelter::InitAsDefaultInstance() {
}

SubSmelter::SubSmelter(const SubSmelter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubSmelter::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  smelt_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSmelter::~SubSmelter() {
  SharedDtor();
}

void SubSmelter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubSmelter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSmelter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSmelter_descriptor_;
}

const SubSmelter& SubSmelter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Smithy_2eproto();
  return *default_instance_;
}

SubSmelter* SubSmelter::default_instance_ = NULL;

SubSmelter* SubSmelter::New() const {
  return new SubSmelter;
}

void SubSmelter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_ = 0u;
    smelt_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubSmelter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 star = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_smelt_times;
        break;
      }

      // required uint32 smelt_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smelt_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smelt_times_)));
          set_has_smelt_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubSmelter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }

  // required uint32 smelt_times = 2;
  if (has_smelt_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->smelt_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubSmelter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }

  // required uint32 smelt_times = 2;
  if (has_smelt_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->smelt_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubSmelter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 smelt_times = 2;
    if (has_smelt_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->smelt_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSmelter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubSmelter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubSmelter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubSmelter::MergeFrom(const SubSmelter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_smelt_times()) {
      set_smelt_times(from.smelt_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubSmelter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSmelter::CopyFrom(const SubSmelter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSmelter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubSmelter::Swap(SubSmelter* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(smelt_times_, other->smelt_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubSmelter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSmelter_descriptor_;
  metadata.reflection = SubSmelter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Smithy_All_Info::kLevleFieldNumber;
const int GS2C_Smithy_All_Info::kSilverCoinFieldNumber;
const int GS2C_Smithy_All_Info::kSubSmelterFieldNumber;
#endif  // !_MSC_VER

GS2C_Smithy_All_Info::GS2C_Smithy_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Smithy_All_Info::InitAsDefaultInstance() {
}

GS2C_Smithy_All_Info::GS2C_Smithy_All_Info(const GS2C_Smithy_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Smithy_All_Info::SharedCtor() {
  _cached_size_ = 0;
  levle_ = 0u;
  silver_coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Smithy_All_Info::~GS2C_Smithy_All_Info() {
  SharedDtor();
}

void GS2C_Smithy_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Smithy_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Smithy_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Smithy_All_Info_descriptor_;
}

const GS2C_Smithy_All_Info& GS2C_Smithy_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Smithy_2eproto();
  return *default_instance_;
}

GS2C_Smithy_All_Info* GS2C_Smithy_All_Info::default_instance_ = NULL;

GS2C_Smithy_All_Info* GS2C_Smithy_All_Info::New() const {
  return new GS2C_Smithy_All_Info;
}

void GS2C_Smithy_All_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levle_ = 0u;
    silver_coin_ = 0u;
  }
  sub_smelter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Smithy_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levle_)));
          set_has_levle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_silver_coin;
        break;
      }

      // optional uint32 silver_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silver_coin_)));
          set_has_silver_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sub_smelter;
        break;
      }

      // repeated .pb.SubSmelter sub_smelter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_smelter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_smelter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sub_smelter;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Smithy_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levle = 1;
  if (has_levle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levle(), output);
  }

  // optional uint32 silver_coin = 2;
  if (has_silver_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->silver_coin(), output);
  }

  // repeated .pb.SubSmelter sub_smelter = 3;
  for (int i = 0; i < this->sub_smelter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sub_smelter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Smithy_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levle = 1;
  if (has_levle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levle(), target);
  }

  // optional uint32 silver_coin = 2;
  if (has_silver_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->silver_coin(), target);
  }

  // repeated .pb.SubSmelter sub_smelter = 3;
  for (int i = 0; i < this->sub_smelter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sub_smelter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Smithy_All_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levle = 1;
    if (has_levle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levle());
    }

    // optional uint32 silver_coin = 2;
    if (has_silver_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silver_coin());
    }

  }
  // repeated .pb.SubSmelter sub_smelter = 3;
  total_size += 1 * this->sub_smelter_size();
  for (int i = 0; i < this->sub_smelter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_smelter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Smithy_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Smithy_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Smithy_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Smithy_All_Info::MergeFrom(const GS2C_Smithy_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_smelter_.MergeFrom(from.sub_smelter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levle()) {
      set_levle(from.levle());
    }
    if (from.has_silver_coin()) {
      set_silver_coin(from.silver_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Smithy_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Smithy_All_Info::CopyFrom(const GS2C_Smithy_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Smithy_All_Info::IsInitialized() const {

  for (int i = 0; i < sub_smelter_size(); i++) {
    if (!this->sub_smelter(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Smithy_All_Info::Swap(GS2C_Smithy_All_Info* other) {
  if (other != this) {
    std::swap(levle_, other->levle_);
    std::swap(silver_coin_, other->silver_coin_);
    sub_smelter_.Swap(&other->sub_smelter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Smithy_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Smithy_All_Info_descriptor_;
  metadata.reflection = GS2C_Smithy_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Smithy_Smelter_Do::kIdxFieldNumber;
const int C2GS_Smithy_Smelter_Do::kItemIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Smithy_Smelter_Do::C2GS_Smithy_Smelter_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Smithy_Smelter_Do::InitAsDefaultInstance() {
}

C2GS_Smithy_Smelter_Do::C2GS_Smithy_Smelter_Do(const C2GS_Smithy_Smelter_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Smithy_Smelter_Do::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Smithy_Smelter_Do::~C2GS_Smithy_Smelter_Do() {
  SharedDtor();
}

void C2GS_Smithy_Smelter_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Smithy_Smelter_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Smithy_Smelter_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Smithy_Smelter_Do_descriptor_;
}

const C2GS_Smithy_Smelter_Do& C2GS_Smithy_Smelter_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Smithy_2eproto();
  return *default_instance_;
}

C2GS_Smithy_Smelter_Do* C2GS_Smithy_Smelter_Do::default_instance_ = NULL;

C2GS_Smithy_Smelter_Do* C2GS_Smithy_Smelter_Do::New() const {
  return new C2GS_Smithy_Smelter_Do;
}

void C2GS_Smithy_Smelter_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Smithy_Smelter_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // repeated uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Smithy_Smelter_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // repeated uint32 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->item_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Smithy_Smelter_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // repeated uint32 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->item_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Smithy_Smelter_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  // repeated uint32 item_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Smithy_Smelter_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Smithy_Smelter_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Smithy_Smelter_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Smithy_Smelter_Do::MergeFrom(const C2GS_Smithy_Smelter_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Smithy_Smelter_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Smithy_Smelter_Do::CopyFrom(const C2GS_Smithy_Smelter_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Smithy_Smelter_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Smithy_Smelter_Do::Swap(C2GS_Smithy_Smelter_Do* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    item_id_.Swap(&other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Smithy_Smelter_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Smithy_Smelter_Do_descriptor_;
  metadata.reflection = C2GS_Smithy_Smelter_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Smithy_Sub_Smelter_LevelUp::kIdxFieldNumber;
#endif  // !_MSC_VER

C2GS_Smithy_Sub_Smelter_LevelUp::C2GS_Smithy_Sub_Smelter_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Smithy_Sub_Smelter_LevelUp::InitAsDefaultInstance() {
}

C2GS_Smithy_Sub_Smelter_LevelUp::C2GS_Smithy_Sub_Smelter_LevelUp(const C2GS_Smithy_Sub_Smelter_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Smithy_Sub_Smelter_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Smithy_Sub_Smelter_LevelUp::~C2GS_Smithy_Sub_Smelter_LevelUp() {
  SharedDtor();
}

void C2GS_Smithy_Sub_Smelter_LevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Smithy_Sub_Smelter_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Smithy_Sub_Smelter_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Smithy_Sub_Smelter_LevelUp_descriptor_;
}

const C2GS_Smithy_Sub_Smelter_LevelUp& C2GS_Smithy_Sub_Smelter_LevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Smithy_2eproto();
  return *default_instance_;
}

C2GS_Smithy_Sub_Smelter_LevelUp* C2GS_Smithy_Sub_Smelter_LevelUp::default_instance_ = NULL;

C2GS_Smithy_Sub_Smelter_LevelUp* C2GS_Smithy_Sub_Smelter_LevelUp::New() const {
  return new C2GS_Smithy_Sub_Smelter_LevelUp;
}

void C2GS_Smithy_Sub_Smelter_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Smithy_Sub_Smelter_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Smithy_Sub_Smelter_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Smithy_Sub_Smelter_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Smithy_Sub_Smelter_LevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Smithy_Sub_Smelter_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Smithy_Sub_Smelter_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Smithy_Sub_Smelter_LevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Smithy_Sub_Smelter_LevelUp::MergeFrom(const C2GS_Smithy_Sub_Smelter_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Smithy_Sub_Smelter_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Smithy_Sub_Smelter_LevelUp::CopyFrom(const C2GS_Smithy_Sub_Smelter_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Smithy_Sub_Smelter_LevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Smithy_Sub_Smelter_LevelUp::Swap(C2GS_Smithy_Sub_Smelter_LevelUp* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Smithy_Sub_Smelter_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Smithy_Sub_Smelter_LevelUp_descriptor_;
  metadata.reflection = C2GS_Smithy_Sub_Smelter_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Smithy_Build_By_Silver::kIsFastFieldNumber;
#endif  // !_MSC_VER

C2GS_Smithy_Build_By_Silver::C2GS_Smithy_Build_By_Silver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Smithy_Build_By_Silver::InitAsDefaultInstance() {
}

C2GS_Smithy_Build_By_Silver::C2GS_Smithy_Build_By_Silver(const C2GS_Smithy_Build_By_Silver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Smithy_Build_By_Silver::SharedCtor() {
  _cached_size_ = 0;
  is_fast_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Smithy_Build_By_Silver::~C2GS_Smithy_Build_By_Silver() {
  SharedDtor();
}

void C2GS_Smithy_Build_By_Silver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Smithy_Build_By_Silver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Smithy_Build_By_Silver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Smithy_Build_By_Silver_descriptor_;
}

const C2GS_Smithy_Build_By_Silver& C2GS_Smithy_Build_By_Silver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Smithy_2eproto();
  return *default_instance_;
}

C2GS_Smithy_Build_By_Silver* C2GS_Smithy_Build_By_Silver::default_instance_ = NULL;

C2GS_Smithy_Build_By_Silver* C2GS_Smithy_Build_By_Silver::New() const {
  return new C2GS_Smithy_Build_By_Silver;
}

void C2GS_Smithy_Build_By_Silver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_fast_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Smithy_Build_By_Silver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_fast = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fast_)));
          set_has_is_fast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Smithy_Build_By_Silver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_fast = 1;
  if (has_is_fast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_fast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Smithy_Build_By_Silver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_fast = 1;
  if (has_is_fast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_fast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Smithy_Build_By_Silver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_fast = 1;
    if (has_is_fast()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Smithy_Build_By_Silver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Smithy_Build_By_Silver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Smithy_Build_By_Silver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Smithy_Build_By_Silver::MergeFrom(const C2GS_Smithy_Build_By_Silver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_fast()) {
      set_is_fast(from.is_fast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Smithy_Build_By_Silver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Smithy_Build_By_Silver::CopyFrom(const C2GS_Smithy_Build_By_Silver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Smithy_Build_By_Silver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Smithy_Build_By_Silver::Swap(C2GS_Smithy_Build_By_Silver* other) {
  if (other != this) {
    std::swap(is_fast_, other->is_fast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Smithy_Build_By_Silver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Smithy_Build_By_Silver_descriptor_;
  metadata.reflection = C2GS_Smithy_Build_By_Silver_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
