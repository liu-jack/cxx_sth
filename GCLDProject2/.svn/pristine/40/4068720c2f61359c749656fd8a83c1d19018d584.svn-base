// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InterServer.proto

#ifndef PROTOBUF_InterServer_2eproto__INCLUDED
#define PROTOBUF_InterServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Stage.pb.h"
#include "Fuben.pb.h"
#include "Item.pb.h"
#include "Mail.pb.h"
#include "CommomDef.pb.h"
#include "City.pb.h"
#include "Country.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_InterServer_2eproto();
void protobuf_AssignDesc_InterServer_2eproto();
void protobuf_ShutdownFile_InterServer_2eproto();

class Address;
class GetEventLogServersRet;
class PingInfo;
class PongInfo;
class SG2C_RegisterInfo;
class SG2C_RegisterInfoRet;
class SG2C_GetLoinServersRet;
class SG2C_GetCrossServersRet;
class SG2C_Exchange_Gift_Code;
class SG2C_Exchange_Gift_Code_Ret;
class SG2C_FeedBack;
class SG2C_FeedBack_Ret;
class SC2G_activity_proto;
class SC2G_activity_plan;
class SC2G_server_open_time;
class SC2G_activity_reward;
class SC2G_activity_package;
class SC2G_activity_package_Update;
class SC2G_ReloadPayItem;
class MSG_activity_update_info;
class SG2E_RegisterInfo;
class SG2E_RegisterInfoRet;
class SG2B_RegisterInfo;
class SG2B_RegisterInfoRet;
class SG2R_RegisterInfo;
class SG2R_RegisterInfoRet;
class SG2R_RegisterPlayerInfoRet;
class SR2C_RegisterInfo;
class SR2C_RegisterInfoRet;
class SR2C_GetLobbyServersRet;
class SR2B_RegisterInfo;
class SR2B_RegisterInfoRet;
class CountryWithAddress;
class SL2G_DevideCrossServers;
class SR2E_RegisterInfo;
class SR2E_RegisterInfoRet;
class SB2C_RegisterInfo;
class SB2C_RegisterInfoRet;
class SB2E_RegisterInfo;
class SB2E_RegisterInfoRet;
class SL2C_RegisterInfo;
class SL2C_RegisterInfoRet;
class SL2E_RegisterInfo;
class SL2E_RegisterInfoRet;
class SE2C_RegisterInfo;
class SE2C_RegisterInfoRet;
class EventParm;
class Server_Event;
class Server_Events;
class Version;
class OneVersionInfo;
class SG2L_RegisterInfo;
class SG2L_RegisterInfoRet;
class SG2D_RegisterInfo;
class SG2D_RegisterInfoRet;
class SG2D_GetPlayerList;
class SG2L_UpdatePlayerLockType;
class SG2D_CreatePlayer;
class SG2D_SelectPlayer;
class SG2D_Player_Id;
class SG2D_UpdataStageLevel;
class SG2D_Forbiden_Player;
class SD2G_Forbiden_Player_Ret;
class SG2D_UpdataFuBenBase;
class SG2D_UpdataFuBenResource;
class SG2D_UpdataFuBenPassStage;
class Country_Info_Devide;
class SD2G_Country_AllInfo;
class SG2B_Country_Info;
class SB2G_Country_War_Info;
class SG2R_Country_AllInfo;
class GobalValue;
class ServerGobalValue;
class BroadcastHeader;
class SW2C2L_UpdateServerInfo;
class SG2C2L_UpdatePerformanceInfo;
class SG2D_Broadcast_Info;
class SG2G_Mail_SendMail;
class SG2D_MailInfoData;
class SG2D_MailsOperate;
class SG2D_Check_Mail_Recivers_Exist;
class SD2G_Check_Mail_Recivers_Exist_Rspone;
class SG2D_Friend_Operate;
class SD2G_Friend_Operate_Res;
class SG2D_Crusade_Stage;
class GS2C_Select_Country_Rsp;
class SD2G_All_player_has_sync;
class Activity_Occupy_City_Num;
class SD2G_Activity_Occupy_City_Num;
class SR2G_AwardTakePlayer;

enum EventParm_ParmType {
  EventParm_ParmType_INT32 = 0,
  EventParm_ParmType_UINT32 = 1,
  EventParm_ParmType_INT64 = 2,
  EventParm_ParmType_UINT64 = 3,
  EventParm_ParmType_STRING = 4,
  EventParm_ParmType_FLOAT = 5
};
bool EventParm_ParmType_IsValid(int value);
const EventParm_ParmType EventParm_ParmType_ParmType_MIN = EventParm_ParmType_INT32;
const EventParm_ParmType EventParm_ParmType_ParmType_MAX = EventParm_ParmType_FLOAT;
const int EventParm_ParmType_ParmType_ARRAYSIZE = EventParm_ParmType_ParmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventParm_ParmType_descriptor();
inline const ::std::string& EventParm_ParmType_Name(EventParm_ParmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventParm_ParmType_descriptor(), value);
}
inline bool EventParm_ParmType_Parse(
    const ::std::string& name, EventParm_ParmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventParm_ParmType>(
    EventParm_ParmType_descriptor(), name, value);
}
enum RegisterResult {
  SERVER_REGISTER_OK = 0,
  SERVER_REGISTER_FAIL_ID = 1,
  SERVER_REGISTER_FAIL_ADDRESS = 2,
  SERVER_REGISTER_FAIL_DIFF_CENTER_ID = 3
};
bool RegisterResult_IsValid(int value);
const RegisterResult RegisterResult_MIN = SERVER_REGISTER_OK;
const RegisterResult RegisterResult_MAX = SERVER_REGISTER_FAIL_DIFF_CENTER_ID;
const int RegisterResult_ARRAYSIZE = RegisterResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegisterResult_descriptor();
inline const ::std::string& RegisterResult_Name(RegisterResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegisterResult_descriptor(), value);
}
inline bool RegisterResult_Parse(
    const ::std::string& name, RegisterResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegisterResult>(
    RegisterResult_descriptor(), name, value);
}
enum ACCOUNT_LOCK_TYPE {
  ACCOUNT_LOCK_TYPE_NONE = 0,
  ACCOUNT_LOCK_SPEAK = 1,
  ACCOUNT_LOCK_TYPE_LOCKED = 2
};
bool ACCOUNT_LOCK_TYPE_IsValid(int value);
const ACCOUNT_LOCK_TYPE ACCOUNT_LOCK_TYPE_MIN = ACCOUNT_LOCK_TYPE_NONE;
const ACCOUNT_LOCK_TYPE ACCOUNT_LOCK_TYPE_MAX = ACCOUNT_LOCK_TYPE_LOCKED;
const int ACCOUNT_LOCK_TYPE_ARRAYSIZE = ACCOUNT_LOCK_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACCOUNT_LOCK_TYPE_descriptor();
inline const ::std::string& ACCOUNT_LOCK_TYPE_Name(ACCOUNT_LOCK_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACCOUNT_LOCK_TYPE_descriptor(), value);
}
inline bool ACCOUNT_LOCK_TYPE_Parse(
    const ::std::string& name, ACCOUNT_LOCK_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACCOUNT_LOCK_TYPE>(
    ACCOUNT_LOCK_TYPE_descriptor(), name, value);
}
enum ACCOUNT_LOCK_OP_TYPE {
  ACCOUNT_OP_LOCK_SPEAK = 1,
  ACCOUNT_OP_UNLOCK_SPEAK = 2,
  ACCOUNT_OP_LOCK = 3,
  ACCOUNT_OP_UNLOCK = 4,
  ACCOUNT_OP_KICK_OFF_LINE = 5
};
bool ACCOUNT_LOCK_OP_TYPE_IsValid(int value);
const ACCOUNT_LOCK_OP_TYPE ACCOUNT_LOCK_OP_TYPE_MIN = ACCOUNT_OP_LOCK_SPEAK;
const ACCOUNT_LOCK_OP_TYPE ACCOUNT_LOCK_OP_TYPE_MAX = ACCOUNT_OP_KICK_OFF_LINE;
const int ACCOUNT_LOCK_OP_TYPE_ARRAYSIZE = ACCOUNT_LOCK_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACCOUNT_LOCK_OP_TYPE_descriptor();
inline const ::std::string& ACCOUNT_LOCK_OP_TYPE_Name(ACCOUNT_LOCK_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACCOUNT_LOCK_OP_TYPE_descriptor(), value);
}
inline bool ACCOUNT_LOCK_OP_TYPE_Parse(
    const ::std::string& name, ACCOUNT_LOCK_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACCOUNT_LOCK_OP_TYPE>(
    ACCOUNT_LOCK_OP_TYPE_descriptor(), name, value);
}
enum ValueType {
  VALUE_TYPE_INT64 = 0,
  VALUE_TYPE_INT = 1,
  VALUE_TYPE_STR = 2
};
bool ValueType_IsValid(int value);
const ValueType ValueType_MIN = VALUE_TYPE_INT64;
const ValueType ValueType_MAX = VALUE_TYPE_STR;
const int ValueType_ARRAYSIZE = ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueType_descriptor();
inline const ::std::string& ValueType_Name(ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueType_descriptor(), value);
}
inline bool ValueType_Parse(
    const ::std::string& name, ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueType>(
    ValueType_descriptor(), name, value);
}
enum ValueIndex {
  VALUE_INDEX_ARENA_DAY_REWARD_TIME = 0,
  VALUE_INDEX_ARENA_MONTH_REWARD_TIME = 1,
  VALUE_INDEX_ARENA_QUARTERLY_REWARD_TIME = 2,
  VALUE_INDEX_PLAYER_DAILY_RESET_TIME = 3,
  VALUE_INDEX_IS_OPEN_CROSS_WAR = 4
};
bool ValueIndex_IsValid(int value);
const ValueIndex ValueIndex_MIN = VALUE_INDEX_ARENA_DAY_REWARD_TIME;
const ValueIndex ValueIndex_MAX = VALUE_INDEX_IS_OPEN_CROSS_WAR;
const int ValueIndex_ARRAYSIZE = ValueIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueIndex_descriptor();
inline const ::std::string& ValueIndex_Name(ValueIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueIndex_descriptor(), value);
}
inline bool ValueIndex_Parse(
    const ::std::string& name, ValueIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueIndex>(
    ValueIndex_descriptor(), name, value);
}
enum BROADCAST_TYPE {
  UPDATE_GAME_SERVER_PERFORMANCE_INFO = 1,
  UPDATE_GAME_SERVER_LOCKED_ACCOUNT_INFO = 2,
  UPDATE_GAME_SERVER_LIST_INFO = 3,
  UPDATE_GAME_SERVER_VERSION_INFO = 4,
  UPDATE_GAME_SERVER_TESTER_ACCOUNT_IDS = 5
};
bool BROADCAST_TYPE_IsValid(int value);
const BROADCAST_TYPE BROADCAST_TYPE_MIN = UPDATE_GAME_SERVER_PERFORMANCE_INFO;
const BROADCAST_TYPE BROADCAST_TYPE_MAX = UPDATE_GAME_SERVER_TESTER_ACCOUNT_IDS;
const int BROADCAST_TYPE_ARRAYSIZE = BROADCAST_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* BROADCAST_TYPE_descriptor();
inline const ::std::string& BROADCAST_TYPE_Name(BROADCAST_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    BROADCAST_TYPE_descriptor(), value);
}
inline bool BROADCAST_TYPE_Parse(
    const ::std::string& name, BROADCAST_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BROADCAST_TYPE>(
    BROADCAST_TYPE_descriptor(), name, value);
}
// ===================================================================

class Address : public ::google::protobuf::Message {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  void Swap(Address* other);

  // implements Message ----------------------------------------------

  Address* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.Address)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static Address* default_instance_;
};
// -------------------------------------------------------------------

class GetEventLogServersRet : public ::google::protobuf::Message {
 public:
  GetEventLogServersRet();
  virtual ~GetEventLogServersRet();

  GetEventLogServersRet(const GetEventLogServersRet& from);

  inline GetEventLogServersRet& operator=(const GetEventLogServersRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetEventLogServersRet& default_instance();

  void Swap(GetEventLogServersRet* other);

  // implements Message ----------------------------------------------

  GetEventLogServersRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetEventLogServersRet& from);
  void MergeFrom(const GetEventLogServersRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Address addresses = 1;
  inline bool has_addresses() const;
  inline void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  inline const ::pb::Address& addresses() const;
  inline ::pb::Address* mutable_addresses();
  inline ::pb::Address* release_addresses();
  inline void set_allocated_addresses(::pb::Address* addresses);

  // @@protoc_insertion_point(class_scope:pb.GetEventLogServersRet)
 private:
  inline void set_has_addresses();
  inline void clear_has_addresses();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Address* addresses_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static GetEventLogServersRet* default_instance_;
};
// -------------------------------------------------------------------

class PingInfo : public ::google::protobuf::Message {
 public:
  PingInfo();
  virtual ~PingInfo();

  PingInfo(const PingInfo& from);

  inline PingInfo& operator=(const PingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingInfo& default_instance();

  void Swap(PingInfo* other);

  // implements Message ----------------------------------------------

  PingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingInfo& from);
  void MergeFrom(const PingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time_ms = 1;
  inline bool has_time_ms() const;
  inline void clear_time_ms();
  static const int kTimeMsFieldNumber = 1;
  inline ::google::protobuf::uint64 time_ms() const;
  inline void set_time_ms(::google::protobuf::uint64 value);

  // optional uint64 delay_time_ms = 2;
  inline bool has_delay_time_ms() const;
  inline void clear_delay_time_ms();
  static const int kDelayTimeMsFieldNumber = 2;
  inline ::google::protobuf::uint64 delay_time_ms() const;
  inline void set_delay_time_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.PingInfo)
 private:
  inline void set_has_time_ms();
  inline void clear_has_time_ms();
  inline void set_has_delay_time_ms();
  inline void clear_has_delay_time_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_ms_;
  ::google::protobuf::uint64 delay_time_ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static PingInfo* default_instance_;
};
// -------------------------------------------------------------------

class PongInfo : public ::google::protobuf::Message {
 public:
  PongInfo();
  virtual ~PongInfo();

  PongInfo(const PongInfo& from);

  inline PongInfo& operator=(const PongInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PongInfo& default_instance();

  void Swap(PongInfo* other);

  // implements Message ----------------------------------------------

  PongInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PongInfo& from);
  void MergeFrom(const PongInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time_ms = 1;
  inline bool has_time_ms() const;
  inline void clear_time_ms();
  static const int kTimeMsFieldNumber = 1;
  inline ::google::protobuf::uint64 time_ms() const;
  inline void set_time_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.PongInfo)
 private:
  inline void set_has_time_ms();
  inline void clear_has_time_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static PongInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2C_RegisterInfo : public ::google::protobuf::Message {
 public:
  SG2C_RegisterInfo();
  virtual ~SG2C_RegisterInfo();

  SG2C_RegisterInfo(const SG2C_RegisterInfo& from);

  inline SG2C_RegisterInfo& operator=(const SG2C_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C_RegisterInfo& default_instance();

  void Swap(SG2C_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SG2C_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C_RegisterInfo& from);
  void MergeFrom(const SG2C_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // repeated string names = 4;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 4;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:pb.SG2C_RegisterInfo)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* port_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::int32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2C_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SG2C_RegisterInfoRet();
  virtual ~SG2C_RegisterInfoRet();

  SG2C_RegisterInfoRet(const SG2C_RegisterInfoRet& from);

  inline SG2C_RegisterInfoRet& operator=(const SG2C_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C_RegisterInfoRet& default_instance();

  void Swap(SG2C_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SG2C_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C_RegisterInfoRet& from);
  void MergeFrom(const SG2C_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // optional int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // optional string web_url = 3;
  inline bool has_web_url() const;
  inline void clear_web_url();
  static const int kWebUrlFieldNumber = 3;
  inline const ::std::string& web_url() const;
  inline void set_web_url(const ::std::string& value);
  inline void set_web_url(const char* value);
  inline void set_web_url(const char* value, size_t size);
  inline ::std::string* mutable_web_url();
  inline ::std::string* release_web_url();
  inline void set_allocated_web_url(::std::string* web_url);

  // @@protoc_insertion_point(class_scope:pb.SG2C_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_web_url();
  inline void clear_has_web_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::int32 region_id_;
  ::std::string* web_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2C_GetLoinServersRet : public ::google::protobuf::Message {
 public:
  SG2C_GetLoinServersRet();
  virtual ~SG2C_GetLoinServersRet();

  SG2C_GetLoinServersRet(const SG2C_GetLoinServersRet& from);

  inline SG2C_GetLoinServersRet& operator=(const SG2C_GetLoinServersRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C_GetLoinServersRet& default_instance();

  void Swap(SG2C_GetLoinServersRet* other);

  // implements Message ----------------------------------------------

  SG2C_GetLoinServersRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C_GetLoinServersRet& from);
  void MergeFrom(const SG2C_GetLoinServersRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Address addresses = 1;
  inline int addresses_size() const;
  inline void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  inline const ::pb::Address& addresses(int index) const;
  inline ::pb::Address* mutable_addresses(int index);
  inline ::pb::Address* add_addresses();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Address >&
      addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Address >*
      mutable_addresses();

  // @@protoc_insertion_point(class_scope:pb.SG2C_GetLoinServersRet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Address > addresses_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C_GetLoinServersRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2C_GetCrossServersRet : public ::google::protobuf::Message {
 public:
  SG2C_GetCrossServersRet();
  virtual ~SG2C_GetCrossServersRet();

  SG2C_GetCrossServersRet(const SG2C_GetCrossServersRet& from);

  inline SG2C_GetCrossServersRet& operator=(const SG2C_GetCrossServersRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C_GetCrossServersRet& default_instance();

  void Swap(SG2C_GetCrossServersRet* other);

  // implements Message ----------------------------------------------

  SG2C_GetCrossServersRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C_GetCrossServersRet& from);
  void MergeFrom(const SG2C_GetCrossServersRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Address addresses = 1;
  inline int addresses_size() const;
  inline void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  inline const ::pb::Address& addresses(int index) const;
  inline ::pb::Address* mutable_addresses(int index);
  inline ::pb::Address* add_addresses();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Address >&
      addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Address >*
      mutable_addresses();

  // @@protoc_insertion_point(class_scope:pb.SG2C_GetCrossServersRet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Address > addresses_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C_GetCrossServersRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2C_Exchange_Gift_Code : public ::google::protobuf::Message {
 public:
  SG2C_Exchange_Gift_Code();
  virtual ~SG2C_Exchange_Gift_Code();

  SG2C_Exchange_Gift_Code(const SG2C_Exchange_Gift_Code& from);

  inline SG2C_Exchange_Gift_Code& operator=(const SG2C_Exchange_Gift_Code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C_Exchange_Gift_Code& default_instance();

  void Swap(SG2C_Exchange_Gift_Code* other);

  // implements Message ----------------------------------------------

  SG2C_Exchange_Gift_Code* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C_Exchange_Gift_Code& from);
  void MergeFrom(const SG2C_Exchange_Gift_Code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // required string gift_code = 2;
  inline bool has_gift_code() const;
  inline void clear_gift_code();
  static const int kGiftCodeFieldNumber = 2;
  inline const ::std::string& gift_code() const;
  inline void set_gift_code(const ::std::string& value);
  inline void set_gift_code(const char* value);
  inline void set_gift_code(const char* value, size_t size);
  inline ::std::string* mutable_gift_code();
  inline ::std::string* release_gift_code();
  inline void set_allocated_gift_code(::std::string* gift_code);

  // optional int32 channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2C_Exchange_Gift_Code)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_gift_code();
  inline void clear_has_gift_code();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::std::string* gift_code_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C_Exchange_Gift_Code* default_instance_;
};
// -------------------------------------------------------------------

class SG2C_Exchange_Gift_Code_Ret : public ::google::protobuf::Message {
 public:
  SG2C_Exchange_Gift_Code_Ret();
  virtual ~SG2C_Exchange_Gift_Code_Ret();

  SG2C_Exchange_Gift_Code_Ret(const SG2C_Exchange_Gift_Code_Ret& from);

  inline SG2C_Exchange_Gift_Code_Ret& operator=(const SG2C_Exchange_Gift_Code_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C_Exchange_Gift_Code_Ret& default_instance();

  void Swap(SG2C_Exchange_Gift_Code_Ret* other);

  // implements Message ----------------------------------------------

  SG2C_Exchange_Gift_Code_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C_Exchange_Gift_Code_Ret& from);
  void MergeFrom(const SG2C_Exchange_Gift_Code_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_success = 1;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  inline bool is_success() const;
  inline void set_is_success(bool value);

  // required uint64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional string giftName = 3;
  inline bool has_giftname() const;
  inline void clear_giftname();
  static const int kGiftNameFieldNumber = 3;
  inline const ::std::string& giftname() const;
  inline void set_giftname(const ::std::string& value);
  inline void set_giftname(const char* value);
  inline void set_giftname(const char* value, size_t size);
  inline ::std::string* mutable_giftname();
  inline ::std::string* release_giftname();
  inline void set_allocated_giftname(::std::string* giftname);

  // optional string gifts = 4;
  inline bool has_gifts() const;
  inline void clear_gifts();
  static const int kGiftsFieldNumber = 4;
  inline const ::std::string& gifts() const;
  inline void set_gifts(const ::std::string& value);
  inline void set_gifts(const char* value);
  inline void set_gifts(const char* value, size_t size);
  inline ::std::string* mutable_gifts();
  inline ::std::string* release_gifts();
  inline void set_allocated_gifts(::std::string* gifts);

  // optional int32 error_code = 5;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2C_Exchange_Gift_Code_Ret)
 private:
  inline void set_has_is_success();
  inline void clear_has_is_success();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_giftname();
  inline void clear_has_giftname();
  inline void set_has_gifts();
  inline void clear_has_gifts();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::std::string* giftname_;
  bool is_success_;
  ::google::protobuf::int32 error_code_;
  ::std::string* gifts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C_Exchange_Gift_Code_Ret* default_instance_;
};
// -------------------------------------------------------------------

class SG2C_FeedBack : public ::google::protobuf::Message {
 public:
  SG2C_FeedBack();
  virtual ~SG2C_FeedBack();

  SG2C_FeedBack(const SG2C_FeedBack& from);

  inline SG2C_FeedBack& operator=(const SG2C_FeedBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C_FeedBack& default_instance();

  void Swap(SG2C_FeedBack* other);

  // implements Message ----------------------------------------------

  SG2C_FeedBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C_FeedBack& from);
  void MergeFrom(const SG2C_FeedBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional string feedback = 3;
  inline bool has_feedback() const;
  inline void clear_feedback();
  static const int kFeedbackFieldNumber = 3;
  inline const ::std::string& feedback() const;
  inline void set_feedback(const ::std::string& value);
  inline void set_feedback(const char* value);
  inline void set_feedback(const char* value, size_t size);
  inline ::std::string* mutable_feedback();
  inline ::std::string* release_feedback();
  inline void set_allocated_feedback(::std::string* feedback);

  // @@protoc_insertion_point(class_scope:pb.SG2C_FeedBack)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_feedback();
  inline void clear_has_feedback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::std::string* player_name_;
  ::std::string* feedback_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C_FeedBack* default_instance_;
};
// -------------------------------------------------------------------

class SG2C_FeedBack_Ret : public ::google::protobuf::Message {
 public:
  SG2C_FeedBack_Ret();
  virtual ~SG2C_FeedBack_Ret();

  SG2C_FeedBack_Ret(const SG2C_FeedBack_Ret& from);

  inline SG2C_FeedBack_Ret& operator=(const SG2C_FeedBack_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C_FeedBack_Ret& default_instance();

  void Swap(SG2C_FeedBack_Ret* other);

  // implements Message ----------------------------------------------

  SG2C_FeedBack_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C_FeedBack_Ret& from);
  void MergeFrom(const SG2C_FeedBack_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_success = 1;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  inline bool is_success() const;
  inline void set_is_success(bool value);

  // required uint64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional int32 error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2C_FeedBack_Ret)
 private:
  inline void set_has_is_success();
  inline void clear_has_is_success();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  bool is_success_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C_FeedBack_Ret* default_instance_;
};
// -------------------------------------------------------------------

class SC2G_activity_proto : public ::google::protobuf::Message {
 public:
  SC2G_activity_proto();
  virtual ~SC2G_activity_proto();

  SC2G_activity_proto(const SC2G_activity_proto& from);

  inline SC2G_activity_proto& operator=(const SC2G_activity_proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC2G_activity_proto& default_instance();

  void Swap(SC2G_activity_proto* other);

  // implements Message ----------------------------------------------

  SC2G_activity_proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC2G_activity_proto& from);
  void MergeFrom(const SC2G_activity_proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint64 table_id() const;
  inline void set_table_id(::google::protobuf::uint64 value);

  // optional uint32 act_type_id = 2;
  inline bool has_act_type_id() const;
  inline void clear_act_type_id();
  static const int kActTypeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 act_type_id() const;
  inline void set_act_type_id(::google::protobuf::uint32 value);

  // optional uint32 reward_type = 3;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 reward_type() const;
  inline void set_reward_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SC2G_activity_proto)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_act_type_id();
  inline void clear_has_act_type_id();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::uint32 act_type_id_;
  ::google::protobuf::uint32 reward_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SC2G_activity_proto* default_instance_;
};
// -------------------------------------------------------------------

class SC2G_activity_plan : public ::google::protobuf::Message {
 public:
  SC2G_activity_plan();
  virtual ~SC2G_activity_plan();

  SC2G_activity_plan(const SC2G_activity_plan& from);

  inline SC2G_activity_plan& operator=(const SC2G_activity_plan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC2G_activity_plan& default_instance();

  void Swap(SC2G_activity_plan* other);

  // implements Message ----------------------------------------------

  SC2G_activity_plan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC2G_activity_plan& from);
  void MergeFrom(const SC2G_activity_plan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 table_id = 12;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 12;
  inline ::google::protobuf::uint64 table_id() const;
  inline void set_table_id(::google::protobuf::uint64 value);

  // optional uint32 activity_id = 1;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 activity_id() const;
  inline void set_activity_id(::google::protobuf::uint32 value);

  // optional uint32 open_way = 2;
  inline bool has_open_way() const;
  inline void clear_open_way();
  static const int kOpenWayFieldNumber = 2;
  inline ::google::protobuf::uint32 open_way() const;
  inline void set_open_way(::google::protobuf::uint32 value);

  // optional uint32 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 last_time = 4;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_time() const;
  inline void set_last_time(::google::protobuf::uint32 value);

  // optional uint32 show_time = 5;
  inline bool has_show_time() const;
  inline void clear_show_time();
  static const int kShowTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 show_time() const;
  inline void set_show_time(::google::protobuf::uint32 value);

  // optional uint64 start_date = 6;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 6;
  inline ::google::protobuf::uint64 start_date() const;
  inline void set_start_date(::google::protobuf::uint64 value);

  // optional uint64 end_date = 7;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 7;
  inline ::google::protobuf::uint64 end_date() const;
  inline void set_end_date(::google::protobuf::uint64 value);

  // optional uint64 end_show_date = 8;
  inline bool has_end_show_date() const;
  inline void clear_end_show_date();
  static const int kEndShowDateFieldNumber = 8;
  inline ::google::protobuf::uint64 end_show_date() const;
  inline void set_end_show_date(::google::protobuf::uint64 value);

  // optional string stage_area = 9;
  inline bool has_stage_area() const;
  inline void clear_stage_area();
  static const int kStageAreaFieldNumber = 9;
  inline const ::std::string& stage_area() const;
  inline void set_stage_area(const ::std::string& value);
  inline void set_stage_area(const char* value);
  inline void set_stage_area(const char* value, size_t size);
  inline ::std::string* mutable_stage_area();
  inline ::std::string* release_stage_area();
  inline void set_allocated_stage_area(::std::string* stage_area);

  // optional uint32 need_greater_than_open = 10;
  inline bool has_need_greater_than_open() const;
  inline void clear_need_greater_than_open();
  static const int kNeedGreaterThanOpenFieldNumber = 10;
  inline ::google::protobuf::uint32 need_greater_than_open() const;
  inline void set_need_greater_than_open(::google::protobuf::uint32 value);

  // optional uint32 need_less_than_open = 11;
  inline bool has_need_less_than_open() const;
  inline void clear_need_less_than_open();
  static const int kNeedLessThanOpenFieldNumber = 11;
  inline ::google::protobuf::uint32 need_less_than_open() const;
  inline void set_need_less_than_open(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SC2G_activity_plan)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_open_way();
  inline void clear_has_open_way();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_last_time();
  inline void clear_has_last_time();
  inline void set_has_show_time();
  inline void clear_has_show_time();
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_end_show_date();
  inline void clear_has_end_show_date();
  inline void set_has_stage_area();
  inline void clear_has_stage_area();
  inline void set_has_need_greater_than_open();
  inline void clear_has_need_greater_than_open();
  inline void set_has_need_less_than_open();
  inline void clear_has_need_less_than_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::uint32 activity_id_;
  ::google::protobuf::uint32 open_way_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 last_time_;
  ::google::protobuf::uint64 start_date_;
  ::google::protobuf::uint64 end_date_;
  ::google::protobuf::uint32 show_time_;
  ::google::protobuf::uint32 need_greater_than_open_;
  ::google::protobuf::uint64 end_show_date_;
  ::std::string* stage_area_;
  ::google::protobuf::uint32 need_less_than_open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SC2G_activity_plan* default_instance_;
};
// -------------------------------------------------------------------

class SC2G_server_open_time : public ::google::protobuf::Message {
 public:
  SC2G_server_open_time();
  virtual ~SC2G_server_open_time();

  SC2G_server_open_time(const SC2G_server_open_time& from);

  inline SC2G_server_open_time& operator=(const SC2G_server_open_time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC2G_server_open_time& default_instance();

  void Swap(SC2G_server_open_time* other);

  // implements Message ----------------------------------------------

  SC2G_server_open_time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC2G_server_open_time& from);
  void MergeFrom(const SC2G_server_open_time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 table_id = 3;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 3;
  inline ::google::protobuf::uint64 table_id() const;
  inline void set_table_id(::google::protobuf::uint64 value);

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint64 open_time = 2;
  inline bool has_open_time() const;
  inline void clear_open_time();
  static const int kOpenTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 open_time() const;
  inline void set_open_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.SC2G_server_open_time)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_open_time();
  inline void clear_has_open_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::uint64 open_time_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SC2G_server_open_time* default_instance_;
};
// -------------------------------------------------------------------

class SC2G_activity_reward : public ::google::protobuf::Message {
 public:
  SC2G_activity_reward();
  virtual ~SC2G_activity_reward();

  SC2G_activity_reward(const SC2G_activity_reward& from);

  inline SC2G_activity_reward& operator=(const SC2G_activity_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC2G_activity_reward& default_instance();

  void Swap(SC2G_activity_reward* other);

  // implements Message ----------------------------------------------

  SC2G_activity_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC2G_activity_reward& from);
  void MergeFrom(const SC2G_activity_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint64 table_id() const;
  inline void set_table_id(::google::protobuf::uint64 value);

  // optional uint32 activity_id = 2;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 2;
  inline ::google::protobuf::uint32 activity_id() const;
  inline void set_activity_id(::google::protobuf::uint32 value);

  // optional uint32 cost_price = 3;
  inline bool has_cost_price() const;
  inline void clear_cost_price();
  static const int kCostPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 cost_price() const;
  inline void set_cost_price(::google::protobuf::uint32 value);

  // optional uint32 is_has_discount = 4;
  inline bool has_is_has_discount() const;
  inline void clear_is_has_discount();
  static const int kIsHasDiscountFieldNumber = 4;
  inline ::google::protobuf::uint32 is_has_discount() const;
  inline void set_is_has_discount(::google::protobuf::uint32 value);

  // optional uint32 cost_discount = 5;
  inline bool has_cost_discount() const;
  inline void clear_cost_discount();
  static const int kCostDiscountFieldNumber = 5;
  inline ::google::protobuf::uint32 cost_discount() const;
  inline void set_cost_discount(::google::protobuf::uint32 value);

  // optional uint32 conditon = 6;
  inline bool has_conditon() const;
  inline void clear_conditon();
  static const int kConditonFieldNumber = 6;
  inline ::google::protobuf::uint32 conditon() const;
  inline void set_conditon(::google::protobuf::uint32 value);

  // optional string reward_list = 7;
  inline bool has_reward_list() const;
  inline void clear_reward_list();
  static const int kRewardListFieldNumber = 7;
  inline const ::std::string& reward_list() const;
  inline void set_reward_list(const ::std::string& value);
  inline void set_reward_list(const char* value);
  inline void set_reward_list(const char* value, size_t size);
  inline ::std::string* mutable_reward_list();
  inline ::std::string* release_reward_list();
  inline void set_allocated_reward_list(::std::string* reward_list);

  // @@protoc_insertion_point(class_scope:pb.SC2G_activity_reward)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_cost_price();
  inline void clear_has_cost_price();
  inline void set_has_is_has_discount();
  inline void clear_has_is_has_discount();
  inline void set_has_cost_discount();
  inline void clear_has_cost_discount();
  inline void set_has_conditon();
  inline void clear_has_conditon();
  inline void set_has_reward_list();
  inline void clear_has_reward_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::uint32 activity_id_;
  ::google::protobuf::uint32 cost_price_;
  ::google::protobuf::uint32 is_has_discount_;
  ::google::protobuf::uint32 cost_discount_;
  ::std::string* reward_list_;
  ::google::protobuf::uint32 conditon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SC2G_activity_reward* default_instance_;
};
// -------------------------------------------------------------------

class SC2G_activity_package : public ::google::protobuf::Message {
 public:
  SC2G_activity_package();
  virtual ~SC2G_activity_package();

  SC2G_activity_package(const SC2G_activity_package& from);

  inline SC2G_activity_package& operator=(const SC2G_activity_package& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC2G_activity_package& default_instance();

  void Swap(SC2G_activity_package* other);

  // implements Message ----------------------------------------------

  SC2G_activity_package* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC2G_activity_package& from);
  void MergeFrom(const SC2G_activity_package& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SC2G_activity_proto activity_proto = 1;
  inline int activity_proto_size() const;
  inline void clear_activity_proto();
  static const int kActivityProtoFieldNumber = 1;
  inline const ::pb::SC2G_activity_proto& activity_proto(int index) const;
  inline ::pb::SC2G_activity_proto* mutable_activity_proto(int index);
  inline ::pb::SC2G_activity_proto* add_activity_proto();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_proto >&
      activity_proto() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_proto >*
      mutable_activity_proto();

  // repeated .pb.SC2G_activity_plan activity_plan = 2;
  inline int activity_plan_size() const;
  inline void clear_activity_plan();
  static const int kActivityPlanFieldNumber = 2;
  inline const ::pb::SC2G_activity_plan& activity_plan(int index) const;
  inline ::pb::SC2G_activity_plan* mutable_activity_plan(int index);
  inline ::pb::SC2G_activity_plan* add_activity_plan();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_plan >&
      activity_plan() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_plan >*
      mutable_activity_plan();

  // repeated .pb.SC2G_server_open_time server_open_time = 3;
  inline int server_open_time_size() const;
  inline void clear_server_open_time();
  static const int kServerOpenTimeFieldNumber = 3;
  inline const ::pb::SC2G_server_open_time& server_open_time(int index) const;
  inline ::pb::SC2G_server_open_time* mutable_server_open_time(int index);
  inline ::pb::SC2G_server_open_time* add_server_open_time();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SC2G_server_open_time >&
      server_open_time() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SC2G_server_open_time >*
      mutable_server_open_time();

  // repeated .pb.SC2G_activity_reward activity_reward = 4;
  inline int activity_reward_size() const;
  inline void clear_activity_reward();
  static const int kActivityRewardFieldNumber = 4;
  inline const ::pb::SC2G_activity_reward& activity_reward(int index) const;
  inline ::pb::SC2G_activity_reward* mutable_activity_reward(int index);
  inline ::pb::SC2G_activity_reward* add_activity_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_reward >&
      activity_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_reward >*
      mutable_activity_reward();

  // @@protoc_insertion_point(class_scope:pb.SC2G_activity_package)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_proto > activity_proto_;
  ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_plan > activity_plan_;
  ::google::protobuf::RepeatedPtrField< ::pb::SC2G_server_open_time > server_open_time_;
  ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_reward > activity_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SC2G_activity_package* default_instance_;
};
// -------------------------------------------------------------------

class SC2G_activity_package_Update : public ::google::protobuf::Message {
 public:
  SC2G_activity_package_Update();
  virtual ~SC2G_activity_package_Update();

  SC2G_activity_package_Update(const SC2G_activity_package_Update& from);

  inline SC2G_activity_package_Update& operator=(const SC2G_activity_package_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC2G_activity_package_Update& default_instance();

  void Swap(SC2G_activity_package_Update* other);

  // implements Message ----------------------------------------------

  SC2G_activity_package_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC2G_activity_package_Update& from);
  void MergeFrom(const SC2G_activity_package_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.SC2G_activity_package all_info = 1;
  inline bool has_all_info() const;
  inline void clear_all_info();
  static const int kAllInfoFieldNumber = 1;
  inline const ::pb::SC2G_activity_package& all_info() const;
  inline ::pb::SC2G_activity_package* mutable_all_info();
  inline ::pb::SC2G_activity_package* release_all_info();
  inline void set_allocated_all_info(::pb::SC2G_activity_package* all_info);

  // required uint32 update = 2;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 2;
  inline ::google::protobuf::uint32 update() const;
  inline void set_update(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SC2G_activity_package_Update)
 private:
  inline void set_has_all_info();
  inline void clear_has_all_info();
  inline void set_has_update();
  inline void clear_has_update();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::SC2G_activity_package* all_info_;
  ::google::protobuf::uint32 update_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SC2G_activity_package_Update* default_instance_;
};
// -------------------------------------------------------------------

class SC2G_ReloadPayItem : public ::google::protobuf::Message {
 public:
  SC2G_ReloadPayItem();
  virtual ~SC2G_ReloadPayItem();

  SC2G_ReloadPayItem(const SC2G_ReloadPayItem& from);

  inline SC2G_ReloadPayItem& operator=(const SC2G_ReloadPayItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC2G_ReloadPayItem& default_instance();

  void Swap(SC2G_ReloadPayItem* other);

  // implements Message ----------------------------------------------

  SC2G_ReloadPayItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC2G_ReloadPayItem& from);
  void MergeFrom(const SC2G_ReloadPayItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SC2G_ReloadPayItem)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SC2G_ReloadPayItem* default_instance_;
};
// -------------------------------------------------------------------

class MSG_activity_update_info : public ::google::protobuf::Message {
 public:
  MSG_activity_update_info();
  virtual ~MSG_activity_update_info();

  MSG_activity_update_info(const MSG_activity_update_info& from);

  inline MSG_activity_update_info& operator=(const MSG_activity_update_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_activity_update_info& default_instance();

  void Swap(MSG_activity_update_info* other);

  // implements Message ----------------------------------------------

  MSG_activity_update_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_activity_update_info& from);
  void MergeFrom(const MSG_activity_update_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 activity_id = 1;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 activity_id() const;
  inline void set_activity_id(::google::protobuf::uint32 value);

  // required uint32 open_way = 2;
  inline bool has_open_way() const;
  inline void clear_open_way();
  static const int kOpenWayFieldNumber = 2;
  inline ::google::protobuf::uint32 open_way() const;
  inline void set_open_way(::google::protobuf::uint32 value);

  // optional uint32 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 last_time = 4;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_time() const;
  inline void set_last_time(::google::protobuf::uint32 value);

  // optional uint32 show_time = 5;
  inline bool has_show_time() const;
  inline void clear_show_time();
  static const int kShowTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 show_time() const;
  inline void set_show_time(::google::protobuf::uint32 value);

  // optional uint64 start_date = 6;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 6;
  inline ::google::protobuf::uint64 start_date() const;
  inline void set_start_date(::google::protobuf::uint64 value);

  // optional uint64 end_date = 7;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 7;
  inline ::google::protobuf::uint64 end_date() const;
  inline void set_end_date(::google::protobuf::uint64 value);

  // optional uint64 end_show_date = 8;
  inline bool has_end_show_date() const;
  inline void clear_end_show_date();
  static const int kEndShowDateFieldNumber = 8;
  inline ::google::protobuf::uint64 end_show_date() const;
  inline void set_end_show_date(::google::protobuf::uint64 value);

  // optional string stage_area = 9;
  inline bool has_stage_area() const;
  inline void clear_stage_area();
  static const int kStageAreaFieldNumber = 9;
  inline const ::std::string& stage_area() const;
  inline void set_stage_area(const ::std::string& value);
  inline void set_stage_area(const char* value);
  inline void set_stage_area(const char* value, size_t size);
  inline ::std::string* mutable_stage_area();
  inline ::std::string* release_stage_area();
  inline void set_allocated_stage_area(::std::string* stage_area);

  // optional uint32 need_greater_than_open = 10;
  inline bool has_need_greater_than_open() const;
  inline void clear_need_greater_than_open();
  static const int kNeedGreaterThanOpenFieldNumber = 10;
  inline ::google::protobuf::uint32 need_greater_than_open() const;
  inline void set_need_greater_than_open(::google::protobuf::uint32 value);

  // optional uint32 need_less_than_open = 11;
  inline bool has_need_less_than_open() const;
  inline void clear_need_less_than_open();
  static const int kNeedLessThanOpenFieldNumber = 11;
  inline ::google::protobuf::uint32 need_less_than_open() const;
  inline void set_need_less_than_open(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.MSG_activity_update_info)
 private:
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_open_way();
  inline void clear_has_open_way();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_last_time();
  inline void clear_has_last_time();
  inline void set_has_show_time();
  inline void clear_has_show_time();
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_end_show_date();
  inline void clear_has_end_show_date();
  inline void set_has_stage_area();
  inline void clear_has_stage_area();
  inline void set_has_need_greater_than_open();
  inline void clear_has_need_greater_than_open();
  inline void set_has_need_less_than_open();
  inline void clear_has_need_less_than_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activity_id_;
  ::google::protobuf::uint32 open_way_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 last_time_;
  ::google::protobuf::uint64 start_date_;
  ::google::protobuf::uint64 end_date_;
  ::google::protobuf::uint32 show_time_;
  ::google::protobuf::uint32 need_greater_than_open_;
  ::google::protobuf::uint64 end_show_date_;
  ::std::string* stage_area_;
  ::google::protobuf::uint32 need_less_than_open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static MSG_activity_update_info* default_instance_;
};
// -------------------------------------------------------------------

class SG2E_RegisterInfo : public ::google::protobuf::Message {
 public:
  SG2E_RegisterInfo();
  virtual ~SG2E_RegisterInfo();

  SG2E_RegisterInfo(const SG2E_RegisterInfo& from);

  inline SG2E_RegisterInfo& operator=(const SG2E_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2E_RegisterInfo& default_instance();

  void Swap(SG2E_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SG2E_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2E_RegisterInfo& from);
  void MergeFrom(const SG2E_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // required int32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.SG2E_RegisterInfo)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 server_id_;
  ::std::string* ip_;
  ::std::string* port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2E_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2E_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SG2E_RegisterInfoRet();
  virtual ~SG2E_RegisterInfoRet();

  SG2E_RegisterInfoRet(const SG2E_RegisterInfoRet& from);

  inline SG2E_RegisterInfoRet& operator=(const SG2E_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2E_RegisterInfoRet& default_instance();

  void Swap(SG2E_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SG2E_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2E_RegisterInfoRet& from);
  void MergeFrom(const SG2E_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // @@protoc_insertion_point(class_scope:pb.SG2E_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2E_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2B_RegisterInfo : public ::google::protobuf::Message {
 public:
  SG2B_RegisterInfo();
  virtual ~SG2B_RegisterInfo();

  SG2B_RegisterInfo(const SG2B_RegisterInfo& from);

  inline SG2B_RegisterInfo& operator=(const SG2B_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2B_RegisterInfo& default_instance();

  void Swap(SG2B_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SG2B_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2B_RegisterInfo& from);
  void MergeFrom(const SG2B_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // repeated string names = 5;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 5;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:pb.SG2B_RegisterInfo)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 region_id_;
  ::std::string* ip_;
  ::std::string* port_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2B_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2B_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SG2B_RegisterInfoRet();
  virtual ~SG2B_RegisterInfoRet();

  SG2B_RegisterInfoRet(const SG2B_RegisterInfoRet& from);

  inline SG2B_RegisterInfoRet& operator=(const SG2B_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2B_RegisterInfoRet& default_instance();

  void Swap(SG2B_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SG2B_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2B_RegisterInfoRet& from);
  void MergeFrom(const SG2B_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // @@protoc_insertion_point(class_scope:pb.SG2B_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2B_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2R_RegisterInfo : public ::google::protobuf::Message {
 public:
  SG2R_RegisterInfo();
  virtual ~SG2R_RegisterInfo();

  SG2R_RegisterInfo(const SG2R_RegisterInfo& from);

  inline SG2R_RegisterInfo& operator=(const SG2R_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2R_RegisterInfo& default_instance();

  void Swap(SG2R_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SG2R_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2R_RegisterInfo& from);
  void MergeFrom(const SG2R_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // repeated string names = 5;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 5;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:pb.SG2R_RegisterInfo)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 region_id_;
  ::std::string* ip_;
  ::std::string* port_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2R_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2R_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SG2R_RegisterInfoRet();
  virtual ~SG2R_RegisterInfoRet();

  SG2R_RegisterInfoRet(const SG2R_RegisterInfoRet& from);

  inline SG2R_RegisterInfoRet& operator=(const SG2R_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2R_RegisterInfoRet& default_instance();

  void Swap(SG2R_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SG2R_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2R_RegisterInfoRet& from);
  void MergeFrom(const SG2R_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // @@protoc_insertion_point(class_scope:pb.SG2R_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2R_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2R_RegisterPlayerInfoRet : public ::google::protobuf::Message {
 public:
  SG2R_RegisterPlayerInfoRet();
  virtual ~SG2R_RegisterPlayerInfoRet();

  SG2R_RegisterPlayerInfoRet(const SG2R_RegisterPlayerInfoRet& from);

  inline SG2R_RegisterPlayerInfoRet& operator=(const SG2R_RegisterPlayerInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2R_RegisterPlayerInfoRet& default_instance();

  void Swap(SG2R_RegisterPlayerInfoRet* other);

  // implements Message ----------------------------------------------

  SG2R_RegisterPlayerInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2R_RegisterPlayerInfoRet& from);
  void MergeFrom(const SG2R_RegisterPlayerInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // required bool is_success = 2;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 2;
  inline bool is_success() const;
  inline void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:pb.SG2R_RegisterPlayerInfoRet)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_is_success();
  inline void clear_has_is_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  bool is_success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2R_RegisterPlayerInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SR2C_RegisterInfo : public ::google::protobuf::Message {
 public:
  SR2C_RegisterInfo();
  virtual ~SR2C_RegisterInfo();

  SR2C_RegisterInfo(const SR2C_RegisterInfo& from);

  inline SR2C_RegisterInfo& operator=(const SR2C_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SR2C_RegisterInfo& default_instance();

  void Swap(SR2C_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SR2C_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SR2C_RegisterInfo& from);
  void MergeFrom(const SR2C_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // repeated string names = 2;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 2;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.SR2C_RegisterInfo)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::std::string* ip_;
  ::std::string* port_;
  ::google::protobuf::int32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SR2C_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SR2C_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SR2C_RegisterInfoRet();
  virtual ~SR2C_RegisterInfoRet();

  SR2C_RegisterInfoRet(const SR2C_RegisterInfoRet& from);

  inline SR2C_RegisterInfoRet& operator=(const SR2C_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SR2C_RegisterInfoRet& default_instance();

  void Swap(SR2C_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SR2C_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SR2C_RegisterInfoRet& from);
  void MergeFrom(const SR2C_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // optional int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SR2C_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::int32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SR2C_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SR2C_GetLobbyServersRet : public ::google::protobuf::Message {
 public:
  SR2C_GetLobbyServersRet();
  virtual ~SR2C_GetLobbyServersRet();

  SR2C_GetLobbyServersRet(const SR2C_GetLobbyServersRet& from);

  inline SR2C_GetLobbyServersRet& operator=(const SR2C_GetLobbyServersRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SR2C_GetLobbyServersRet& default_instance();

  void Swap(SR2C_GetLobbyServersRet* other);

  // implements Message ----------------------------------------------

  SR2C_GetLobbyServersRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SR2C_GetLobbyServersRet& from);
  void MergeFrom(const SR2C_GetLobbyServersRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.SR2C_GetLobbyServersRet)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SR2C_GetLobbyServersRet* default_instance_;
};
// -------------------------------------------------------------------

class SR2B_RegisterInfo : public ::google::protobuf::Message {
 public:
  SR2B_RegisterInfo();
  virtual ~SR2B_RegisterInfo();

  SR2B_RegisterInfo(const SR2B_RegisterInfo& from);

  inline SR2B_RegisterInfo& operator=(const SR2B_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SR2B_RegisterInfo& default_instance();

  void Swap(SR2B_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SR2B_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SR2B_RegisterInfo& from);
  void MergeFrom(const SR2B_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // repeated string names = 5;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 5;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:pb.SR2B_RegisterInfo)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 region_id_;
  ::std::string* ip_;
  ::std::string* port_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SR2B_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SR2B_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SR2B_RegisterInfoRet();
  virtual ~SR2B_RegisterInfoRet();

  SR2B_RegisterInfoRet(const SR2B_RegisterInfoRet& from);

  inline SR2B_RegisterInfoRet& operator=(const SR2B_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SR2B_RegisterInfoRet& default_instance();

  void Swap(SR2B_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SR2B_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SR2B_RegisterInfoRet& from);
  void MergeFrom(const SR2B_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // @@protoc_insertion_point(class_scope:pb.SR2B_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SR2B_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class CountryWithAddress : public ::google::protobuf::Message {
 public:
  CountryWithAddress();
  virtual ~CountryWithAddress();

  CountryWithAddress(const CountryWithAddress& from);

  inline CountryWithAddress& operator=(const CountryWithAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryWithAddress& default_instance();

  void Swap(CountryWithAddress* other);

  // implements Message ----------------------------------------------

  CountryWithAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryWithAddress& from);
  void MergeFrom(const CountryWithAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Address addresses = 1;
  inline bool has_addresses() const;
  inline void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  inline const ::pb::Address& addresses() const;
  inline ::pb::Address* mutable_addresses();
  inline ::pb::Address* release_addresses();
  inline void set_allocated_addresses(::pb::Address* addresses);

  // optional uint32 countryid = 2;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryidFieldNumber = 2;
  inline ::google::protobuf::uint32 countryid() const;
  inline void set_countryid(::google::protobuf::uint32 value);

  // optional uint64 PrepareEndTime = 3;
  inline bool has_prepareendtime() const;
  inline void clear_prepareendtime();
  static const int kPrepareEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 prepareendtime() const;
  inline void set_prepareendtime(::google::protobuf::uint64 value);

  // optional uint32 uniqueid = 4;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 4;
  inline ::google::protobuf::uint32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.CountryWithAddress)
 private:
  inline void set_has_addresses();
  inline void clear_has_addresses();
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_prepareendtime();
  inline void clear_has_prepareendtime();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Address* addresses_;
  ::google::protobuf::uint64 prepareendtime_;
  ::google::protobuf::uint32 countryid_;
  ::google::protobuf::uint32 uniqueid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static CountryWithAddress* default_instance_;
};
// -------------------------------------------------------------------

class SL2G_DevideCrossServers : public ::google::protobuf::Message {
 public:
  SL2G_DevideCrossServers();
  virtual ~SL2G_DevideCrossServers();

  SL2G_DevideCrossServers(const SL2G_DevideCrossServers& from);

  inline SL2G_DevideCrossServers& operator=(const SL2G_DevideCrossServers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL2G_DevideCrossServers& default_instance();

  void Swap(SL2G_DevideCrossServers* other);

  // implements Message ----------------------------------------------

  SL2G_DevideCrossServers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL2G_DevideCrossServers& from);
  void MergeFrom(const SL2G_DevideCrossServers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CountryWithAddress Country_Addresses = 1;
  inline int country_addresses_size() const;
  inline void clear_country_addresses();
  static const int kCountryAddressesFieldNumber = 1;
  inline const ::pb::CountryWithAddress& country_addresses(int index) const;
  inline ::pb::CountryWithAddress* mutable_country_addresses(int index);
  inline ::pb::CountryWithAddress* add_country_addresses();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CountryWithAddress >&
      country_addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CountryWithAddress >*
      mutable_country_addresses();

  // required .pb.CROSS_STATE CurState = 2;
  inline bool has_curstate() const;
  inline void clear_curstate();
  static const int kCurStateFieldNumber = 2;
  inline ::pb::CROSS_STATE curstate() const;
  inline void set_curstate(::pb::CROSS_STATE value);

  // @@protoc_insertion_point(class_scope:pb.SL2G_DevideCrossServers)
 private:
  inline void set_has_curstate();
  inline void clear_has_curstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::CountryWithAddress > country_addresses_;
  int curstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SL2G_DevideCrossServers* default_instance_;
};
// -------------------------------------------------------------------

class SR2E_RegisterInfo : public ::google::protobuf::Message {
 public:
  SR2E_RegisterInfo();
  virtual ~SR2E_RegisterInfo();

  SR2E_RegisterInfo(const SR2E_RegisterInfo& from);

  inline SR2E_RegisterInfo& operator=(const SR2E_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SR2E_RegisterInfo& default_instance();

  void Swap(SR2E_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SR2E_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SR2E_RegisterInfo& from);
  void MergeFrom(const SR2E_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // required int32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.SR2E_RegisterInfo)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 server_id_;
  ::std::string* ip_;
  ::std::string* port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SR2E_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SR2E_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SR2E_RegisterInfoRet();
  virtual ~SR2E_RegisterInfoRet();

  SR2E_RegisterInfoRet(const SR2E_RegisterInfoRet& from);

  inline SR2E_RegisterInfoRet& operator=(const SR2E_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SR2E_RegisterInfoRet& default_instance();

  void Swap(SR2E_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SR2E_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SR2E_RegisterInfoRet& from);
  void MergeFrom(const SR2E_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // @@protoc_insertion_point(class_scope:pb.SR2E_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SR2E_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SB2C_RegisterInfo : public ::google::protobuf::Message {
 public:
  SB2C_RegisterInfo();
  virtual ~SB2C_RegisterInfo();

  SB2C_RegisterInfo(const SB2C_RegisterInfo& from);

  inline SB2C_RegisterInfo& operator=(const SB2C_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SB2C_RegisterInfo& default_instance();

  void Swap(SB2C_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SB2C_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SB2C_RegisterInfo& from);
  void MergeFrom(const SB2C_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.SB2C_RegisterInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SB2C_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SB2C_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SB2C_RegisterInfoRet();
  virtual ~SB2C_RegisterInfoRet();

  SB2C_RegisterInfoRet(const SB2C_RegisterInfoRet& from);

  inline SB2C_RegisterInfoRet& operator=(const SB2C_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SB2C_RegisterInfoRet& default_instance();

  void Swap(SB2C_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SB2C_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SB2C_RegisterInfoRet& from);
  void MergeFrom(const SB2C_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // optional int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SB2C_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::int32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SB2C_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SB2E_RegisterInfo : public ::google::protobuf::Message {
 public:
  SB2E_RegisterInfo();
  virtual ~SB2E_RegisterInfo();

  SB2E_RegisterInfo(const SB2E_RegisterInfo& from);

  inline SB2E_RegisterInfo& operator=(const SB2E_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SB2E_RegisterInfo& default_instance();

  void Swap(SB2E_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SB2E_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SB2E_RegisterInfo& from);
  void MergeFrom(const SB2E_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.SB2E_RegisterInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SB2E_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SB2E_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SB2E_RegisterInfoRet();
  virtual ~SB2E_RegisterInfoRet();

  SB2E_RegisterInfoRet(const SB2E_RegisterInfoRet& from);

  inline SB2E_RegisterInfoRet& operator=(const SB2E_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SB2E_RegisterInfoRet& default_instance();

  void Swap(SB2E_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SB2E_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SB2E_RegisterInfoRet& from);
  void MergeFrom(const SB2E_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // @@protoc_insertion_point(class_scope:pb.SB2E_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SB2E_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SL2C_RegisterInfo : public ::google::protobuf::Message {
 public:
  SL2C_RegisterInfo();
  virtual ~SL2C_RegisterInfo();

  SL2C_RegisterInfo(const SL2C_RegisterInfo& from);

  inline SL2C_RegisterInfo& operator=(const SL2C_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL2C_RegisterInfo& default_instance();

  void Swap(SL2C_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SL2C_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL2C_RegisterInfo& from);
  void MergeFrom(const SL2C_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.SL2C_RegisterInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SL2C_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SL2C_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SL2C_RegisterInfoRet();
  virtual ~SL2C_RegisterInfoRet();

  SL2C_RegisterInfoRet(const SL2C_RegisterInfoRet& from);

  inline SL2C_RegisterInfoRet& operator=(const SL2C_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL2C_RegisterInfoRet& default_instance();

  void Swap(SL2C_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SL2C_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL2C_RegisterInfoRet& from);
  void MergeFrom(const SL2C_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // optional int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // optional string web_url = 3;
  inline bool has_web_url() const;
  inline void clear_web_url();
  static const int kWebUrlFieldNumber = 3;
  inline const ::std::string& web_url() const;
  inline void set_web_url(const ::std::string& value);
  inline void set_web_url(const char* value);
  inline void set_web_url(const char* value, size_t size);
  inline ::std::string* mutable_web_url();
  inline ::std::string* release_web_url();
  inline void set_allocated_web_url(::std::string* web_url);

  // @@protoc_insertion_point(class_scope:pb.SL2C_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_web_url();
  inline void clear_has_web_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::int32 region_id_;
  ::std::string* web_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SL2C_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SL2E_RegisterInfo : public ::google::protobuf::Message {
 public:
  SL2E_RegisterInfo();
  virtual ~SL2E_RegisterInfo();

  SL2E_RegisterInfo(const SL2E_RegisterInfo& from);

  inline SL2E_RegisterInfo& operator=(const SL2E_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL2E_RegisterInfo& default_instance();

  void Swap(SL2E_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SL2E_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL2E_RegisterInfo& from);
  void MergeFrom(const SL2E_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // optional int32 region_id = 3;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 3;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // optional int32 server_id = 4;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SL2E_RegisterInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* port_;
  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SL2E_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SL2E_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SL2E_RegisterInfoRet();
  virtual ~SL2E_RegisterInfoRet();

  SL2E_RegisterInfoRet(const SL2E_RegisterInfoRet& from);

  inline SL2E_RegisterInfoRet& operator=(const SL2E_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL2E_RegisterInfoRet& default_instance();

  void Swap(SL2E_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SL2E_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL2E_RegisterInfoRet& from);
  void MergeFrom(const SL2E_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // @@protoc_insertion_point(class_scope:pb.SL2E_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SL2E_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SE2C_RegisterInfo : public ::google::protobuf::Message {
 public:
  SE2C_RegisterInfo();
  virtual ~SE2C_RegisterInfo();

  SE2C_RegisterInfo(const SE2C_RegisterInfo& from);

  inline SE2C_RegisterInfo& operator=(const SE2C_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SE2C_RegisterInfo& default_instance();

  void Swap(SE2C_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SE2C_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SE2C_RegisterInfo& from);
  void MergeFrom(const SE2C_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:pb.SE2C_RegisterInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SE2C_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SE2C_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SE2C_RegisterInfoRet();
  virtual ~SE2C_RegisterInfoRet();

  SE2C_RegisterInfoRet(const SE2C_RegisterInfoRet& from);

  inline SE2C_RegisterInfoRet& operator=(const SE2C_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SE2C_RegisterInfoRet& default_instance();

  void Swap(SE2C_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SE2C_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SE2C_RegisterInfoRet& from);
  void MergeFrom(const SE2C_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // optional int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SE2C_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::int32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SE2C_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class EventParm : public ::google::protobuf::Message {
 public:
  EventParm();
  virtual ~EventParm();

  EventParm(const EventParm& from);

  inline EventParm& operator=(const EventParm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventParm& default_instance();

  void Swap(EventParm* other);

  // implements Message ----------------------------------------------

  EventParm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventParm& from);
  void MergeFrom(const EventParm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EventParm_ParmType ParmType;
  static const ParmType INT32 = EventParm_ParmType_INT32;
  static const ParmType UINT32 = EventParm_ParmType_UINT32;
  static const ParmType INT64 = EventParm_ParmType_INT64;
  static const ParmType UINT64 = EventParm_ParmType_UINT64;
  static const ParmType STRING = EventParm_ParmType_STRING;
  static const ParmType FLOAT = EventParm_ParmType_FLOAT;
  static inline bool ParmType_IsValid(int value) {
    return EventParm_ParmType_IsValid(value);
  }
  static const ParmType ParmType_MIN =
    EventParm_ParmType_ParmType_MIN;
  static const ParmType ParmType_MAX =
    EventParm_ParmType_ParmType_MAX;
  static const int ParmType_ARRAYSIZE =
    EventParm_ParmType_ParmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ParmType_descriptor() {
    return EventParm_ParmType_descriptor();
  }
  static inline const ::std::string& ParmType_Name(ParmType value) {
    return EventParm_ParmType_Name(value);
  }
  static inline bool ParmType_Parse(const ::std::string& name,
      ParmType* value) {
    return EventParm_ParmType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .pb.EventParm.ParmType parm_type = 1;
  inline bool has_parm_type() const;
  inline void clear_parm_type();
  static const int kParmTypeFieldNumber = 1;
  inline ::pb::EventParm_ParmType parm_type() const;
  inline void set_parm_type(::pb::EventParm_ParmType value);

  // optional int32 value_int32 = 2;
  inline bool has_value_int32() const;
  inline void clear_value_int32();
  static const int kValueInt32FieldNumber = 2;
  inline ::google::protobuf::int32 value_int32() const;
  inline void set_value_int32(::google::protobuf::int32 value);

  // optional uint32 value_uint32 = 3;
  inline bool has_value_uint32() const;
  inline void clear_value_uint32();
  static const int kValueUint32FieldNumber = 3;
  inline ::google::protobuf::uint32 value_uint32() const;
  inline void set_value_uint32(::google::protobuf::uint32 value);

  // optional int64 value_int64 = 4;
  inline bool has_value_int64() const;
  inline void clear_value_int64();
  static const int kValueInt64FieldNumber = 4;
  inline ::google::protobuf::int64 value_int64() const;
  inline void set_value_int64(::google::protobuf::int64 value);

  // optional uint64 value_uint64 = 5;
  inline bool has_value_uint64() const;
  inline void clear_value_uint64();
  static const int kValueUint64FieldNumber = 5;
  inline ::google::protobuf::uint64 value_uint64() const;
  inline void set_value_uint64(::google::protobuf::uint64 value);

  // optional string value_str = 6;
  inline bool has_value_str() const;
  inline void clear_value_str();
  static const int kValueStrFieldNumber = 6;
  inline const ::std::string& value_str() const;
  inline void set_value_str(const ::std::string& value);
  inline void set_value_str(const char* value);
  inline void set_value_str(const char* value, size_t size);
  inline ::std::string* mutable_value_str();
  inline ::std::string* release_value_str();
  inline void set_allocated_value_str(::std::string* value_str);

  // optional float value_float = 7;
  inline bool has_value_float() const;
  inline void clear_value_float();
  static const int kValueFloatFieldNumber = 7;
  inline float value_float() const;
  inline void set_value_float(float value);

  // @@protoc_insertion_point(class_scope:pb.EventParm)
 private:
  inline void set_has_parm_type();
  inline void clear_has_parm_type();
  inline void set_has_value_int32();
  inline void clear_has_value_int32();
  inline void set_has_value_uint32();
  inline void clear_has_value_uint32();
  inline void set_has_value_int64();
  inline void clear_has_value_int64();
  inline void set_has_value_uint64();
  inline void clear_has_value_uint64();
  inline void set_has_value_str();
  inline void clear_has_value_str();
  inline void set_has_value_float();
  inline void clear_has_value_float();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int parm_type_;
  ::google::protobuf::int32 value_int32_;
  ::google::protobuf::int64 value_int64_;
  ::google::protobuf::uint64 value_uint64_;
  ::google::protobuf::uint32 value_uint32_;
  float value_float_;
  ::std::string* value_str_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static EventParm* default_instance_;
};
// -------------------------------------------------------------------

class Server_Event : public ::google::protobuf::Message {
 public:
  Server_Event();
  virtual ~Server_Event();

  Server_Event(const Server_Event& from);

  inline Server_Event& operator=(const Server_Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Server_Event& default_instance();

  void Swap(Server_Event* other);

  // implements Message ----------------------------------------------

  Server_Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server_Event& from);
  void MergeFrom(const Server_Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional uint64 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // optional uint64 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional int64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // repeated .pb.EventParm params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline const ::pb::EventParm& params(int index) const;
  inline ::pb::EventParm* mutable_params(int index);
  inline ::pb::EventParm* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::EventParm >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::EventParm >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:pb.Server_Event)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_id_;
  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::pb::EventParm > params_;
  ::google::protobuf::int32 event_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static Server_Event* default_instance_;
};
// -------------------------------------------------------------------

class Server_Events : public ::google::protobuf::Message {
 public:
  Server_Events();
  virtual ~Server_Events();

  Server_Events(const Server_Events& from);

  inline Server_Events& operator=(const Server_Events& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Server_Events& default_instance();

  void Swap(Server_Events* other);

  // implements Message ----------------------------------------------

  Server_Events* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server_Events& from);
  void MergeFrom(const Server_Events& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Server_Event logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::pb::Server_Event& logs(int index) const;
  inline ::pb::Server_Event* mutable_logs(int index);
  inline ::pb::Server_Event* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Server_Event >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Server_Event >*
      mutable_logs();

  // @@protoc_insertion_point(class_scope:pb.Server_Events)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Server_Event > logs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static Server_Events* default_instance_;
};
// -------------------------------------------------------------------

class Version : public ::google::protobuf::Message {
 public:
  Version();
  virtual ~Version();

  Version(const Version& from);

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Version& default_instance();

  void Swap(Version* other);

  // implements Message ----------------------------------------------

  Version* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional uint32 platform_id = 3;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 3;
  inline ::google::protobuf::uint32 platform_id() const;
  inline void set_platform_id(::google::protobuf::uint32 value);

  // optional uint32 min_version_id = 4;
  inline bool has_min_version_id() const;
  inline void clear_min_version_id();
  static const int kMinVersionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 min_version_id() const;
  inline void set_min_version_id(::google::protobuf::uint32 value);

  // optional uint32 max_version_id = 5;
  inline bool has_max_version_id() const;
  inline void clear_max_version_id();
  static const int kMaxVersionIdFieldNumber = 5;
  inline ::google::protobuf::uint32 max_version_id() const;
  inline void set_max_version_id(::google::protobuf::uint32 value);

  // optional uint32 is_hot_update = 6;
  inline bool has_is_hot_update() const;
  inline void clear_is_hot_update();
  static const int kIsHotUpdateFieldNumber = 6;
  inline ::google::protobuf::uint32 is_hot_update() const;
  inline void set_is_hot_update(::google::protobuf::uint32 value);

  // optional string max_version_address = 7;
  inline bool has_max_version_address() const;
  inline void clear_max_version_address();
  static const int kMaxVersionAddressFieldNumber = 7;
  inline const ::std::string& max_version_address() const;
  inline void set_max_version_address(const ::std::string& value);
  inline void set_max_version_address(const char* value);
  inline void set_max_version_address(const char* value, size_t size);
  inline ::std::string* mutable_max_version_address();
  inline ::std::string* release_max_version_address();
  inline void set_allocated_max_version_address(::std::string* max_version_address);

  // @@protoc_insertion_point(class_scope:pb.Version)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_platform_id();
  inline void clear_has_platform_id();
  inline void set_has_min_version_id();
  inline void clear_has_min_version_id();
  inline void set_has_max_version_id();
  inline void clear_has_max_version_id();
  inline void set_has_is_hot_update();
  inline void clear_has_is_hot_update();
  inline void set_has_max_version_address();
  inline void clear_has_max_version_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 platform_id_;
  ::google::protobuf::uint32 min_version_id_;
  ::google::protobuf::uint32 max_version_id_;
  ::google::protobuf::uint32 is_hot_update_;
  ::std::string* max_version_address_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static Version* default_instance_;
};
// -------------------------------------------------------------------

class OneVersionInfo : public ::google::protobuf::Message {
 public:
  OneVersionInfo();
  virtual ~OneVersionInfo();

  OneVersionInfo(const OneVersionInfo& from);

  inline OneVersionInfo& operator=(const OneVersionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVersionInfo& default_instance();

  void Swap(OneVersionInfo* other);

  // implements Message ----------------------------------------------

  OneVersionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneVersionInfo& from);
  void MergeFrom(const OneVersionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional uint32 platform_id = 3;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 3;
  inline ::google::protobuf::uint32 platform_id() const;
  inline void set_platform_id(::google::protobuf::uint32 value);

  // optional uint32 version_id = 4;
  inline bool has_version_id() const;
  inline void clear_version_id();
  static const int kVersionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 version_id() const;
  inline void set_version_id(::google::protobuf::uint32 value);

  // optional uint32 resource_id = 5;
  inline bool has_resource_id() const;
  inline void clear_resource_id();
  static const int kResourceIdFieldNumber = 5;
  inline ::google::protobuf::uint32 resource_id() const;
  inline void set_resource_id(::google::protobuf::uint32 value);

  // optional string notice_address = 6;
  inline bool has_notice_address() const;
  inline void clear_notice_address();
  static const int kNoticeAddressFieldNumber = 6;
  inline const ::std::string& notice_address() const;
  inline void set_notice_address(const ::std::string& value);
  inline void set_notice_address(const char* value);
  inline void set_notice_address(const char* value, size_t size);
  inline ::std::string* mutable_notice_address();
  inline ::std::string* release_notice_address();
  inline void set_allocated_notice_address(::std::string* notice_address);

  // optional string resource_address = 7;
  inline bool has_resource_address() const;
  inline void clear_resource_address();
  static const int kResourceAddressFieldNumber = 7;
  inline const ::std::string& resource_address() const;
  inline void set_resource_address(const ::std::string& value);
  inline void set_resource_address(const char* value);
  inline void set_resource_address(const char* value, size_t size);
  inline ::std::string* mutable_resource_address();
  inline ::std::string* release_resource_address();
  inline void set_allocated_resource_address(::std::string* resource_address);

  // @@protoc_insertion_point(class_scope:pb.OneVersionInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_platform_id();
  inline void clear_has_platform_id();
  inline void set_has_version_id();
  inline void clear_has_version_id();
  inline void set_has_resource_id();
  inline void clear_has_resource_id();
  inline void set_has_notice_address();
  inline void clear_has_notice_address();
  inline void set_has_resource_address();
  inline void clear_has_resource_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 platform_id_;
  ::google::protobuf::uint32 version_id_;
  ::std::string* notice_address_;
  ::std::string* resource_address_;
  ::google::protobuf::uint32 resource_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static OneVersionInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2L_RegisterInfo : public ::google::protobuf::Message {
 public:
  SG2L_RegisterInfo();
  virtual ~SG2L_RegisterInfo();

  SG2L_RegisterInfo(const SG2L_RegisterInfo& from);

  inline SG2L_RegisterInfo& operator=(const SG2L_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2L_RegisterInfo& default_instance();

  void Swap(SG2L_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SG2L_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2L_RegisterInfo& from);
  void MergeFrom(const SG2L_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // required int32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // required int32 player_count = 5;
  inline bool has_player_count() const;
  inline void clear_player_count();
  static const int kPlayerCountFieldNumber = 5;
  inline ::google::protobuf::int32 player_count() const;
  inline void set_player_count(::google::protobuf::int32 value);

  // required uint64 logical_update_ms = 6;
  inline bool has_logical_update_ms() const;
  inline void clear_logical_update_ms();
  static const int kLogicalUpdateMsFieldNumber = 6;
  inline ::google::protobuf::uint64 logical_update_ms() const;
  inline void set_logical_update_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.SG2L_RegisterInfo)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_player_count();
  inline void clear_has_player_count();
  inline void set_has_logical_update_ms();
  inline void clear_has_logical_update_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 server_id_;
  ::std::string* ip_;
  ::std::string* port_;
  ::google::protobuf::uint64 logical_update_ms_;
  ::google::protobuf::int32 player_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2L_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2L_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SG2L_RegisterInfoRet();
  virtual ~SG2L_RegisterInfoRet();

  SG2L_RegisterInfoRet(const SG2L_RegisterInfoRet& from);

  inline SG2L_RegisterInfoRet& operator=(const SG2L_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2L_RegisterInfoRet& default_instance();

  void Swap(SG2L_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SG2L_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2L_RegisterInfoRet& from);
  void MergeFrom(const SG2L_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // @@protoc_insertion_point(class_scope:pb.SG2L_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2L_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_RegisterInfo : public ::google::protobuf::Message {
 public:
  SG2D_RegisterInfo();
  virtual ~SG2D_RegisterInfo();

  SG2D_RegisterInfo(const SG2D_RegisterInfo& from);

  inline SG2D_RegisterInfo& operator=(const SG2D_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_RegisterInfo& default_instance();

  void Swap(SG2D_RegisterInfo* other);

  // implements Message ----------------------------------------------

  SG2D_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_RegisterInfo& from);
  void MergeFrom(const SG2D_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // repeated string names = 5;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 5;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:pb.SG2D_RegisterInfo)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 region_id_;
  ::std::string* ip_;
  ::std::string* port_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_RegisterInfoRet : public ::google::protobuf::Message {
 public:
  SG2D_RegisterInfoRet();
  virtual ~SG2D_RegisterInfoRet();

  SG2D_RegisterInfoRet(const SG2D_RegisterInfoRet& from);

  inline SG2D_RegisterInfoRet& operator=(const SG2D_RegisterInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_RegisterInfoRet& default_instance();

  void Swap(SG2D_RegisterInfoRet* other);

  // implements Message ----------------------------------------------

  SG2D_RegisterInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_RegisterInfoRet& from);
  void MergeFrom(const SG2D_RegisterInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.RegisterResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::RegisterResult result() const;
  inline void set_result(::pb::RegisterResult value);

  // optional uint32 pvp_table_size = 2;
  inline bool has_pvp_table_size() const;
  inline void clear_pvp_table_size();
  static const int kPvpTableSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 pvp_table_size() const;
  inline void set_pvp_table_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_RegisterInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pvp_table_size();
  inline void clear_has_pvp_table_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 pvp_table_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_RegisterInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_GetPlayerList : public ::google::protobuf::Message {
 public:
  SG2D_GetPlayerList();
  virtual ~SG2D_GetPlayerList();

  SG2D_GetPlayerList(const SG2D_GetPlayerList& from);

  inline SG2D_GetPlayerList& operator=(const SG2D_GetPlayerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_GetPlayerList& default_instance();

  void Swap(SG2D_GetPlayerList* other);

  // implements Message ----------------------------------------------

  SG2D_GetPlayerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_GetPlayerList& from);
  void MergeFrom(const SG2D_GetPlayerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_GetPlayerList)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_GetPlayerList* default_instance_;
};
// -------------------------------------------------------------------

class SG2L_UpdatePlayerLockType : public ::google::protobuf::Message {
 public:
  SG2L_UpdatePlayerLockType();
  virtual ~SG2L_UpdatePlayerLockType();

  SG2L_UpdatePlayerLockType(const SG2L_UpdatePlayerLockType& from);

  inline SG2L_UpdatePlayerLockType& operator=(const SG2L_UpdatePlayerLockType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2L_UpdatePlayerLockType& default_instance();

  void Swap(SG2L_UpdatePlayerLockType* other);

  // implements Message ----------------------------------------------

  SG2L_UpdatePlayerLockType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2L_UpdatePlayerLockType& from);
  void MergeFrom(const SG2L_UpdatePlayerLockType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // required string account_name = 2;
  inline bool has_account_name() const;
  inline void clear_account_name();
  static const int kAccountNameFieldNumber = 2;
  inline const ::std::string& account_name() const;
  inline void set_account_name(const ::std::string& value);
  inline void set_account_name(const char* value);
  inline void set_account_name(const char* value, size_t size);
  inline ::std::string* mutable_account_name();
  inline ::std::string* release_account_name();
  inline void set_allocated_account_name(::std::string* account_name);

  // optional uint64 lock_time = 3;
  inline bool has_lock_time() const;
  inline void clear_lock_time();
  static const int kLockTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 lock_time() const;
  inline void set_lock_time(::google::protobuf::uint64 value);

  // required .pb.ACCOUNT_LOCK_OP_TYPE lockType = 4;
  inline bool has_locktype() const;
  inline void clear_locktype();
  static const int kLockTypeFieldNumber = 4;
  inline ::pb::ACCOUNT_LOCK_OP_TYPE locktype() const;
  inline void set_locktype(::pb::ACCOUNT_LOCK_OP_TYPE value);

  // @@protoc_insertion_point(class_scope:pb.SG2L_UpdatePlayerLockType)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_account_name();
  inline void clear_has_account_name();
  inline void set_has_lock_time();
  inline void clear_has_lock_time();
  inline void set_has_locktype();
  inline void clear_has_locktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_id_;
  ::std::string* account_name_;
  ::google::protobuf::uint64 lock_time_;
  int locktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2L_UpdatePlayerLockType* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_CreatePlayer : public ::google::protobuf::Message {
 public:
  SG2D_CreatePlayer();
  virtual ~SG2D_CreatePlayer();

  SG2D_CreatePlayer(const SG2D_CreatePlayer& from);

  inline SG2D_CreatePlayer& operator=(const SG2D_CreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_CreatePlayer& default_instance();

  void Swap(SG2D_CreatePlayer* other);

  // implements Message ----------------------------------------------

  SG2D_CreatePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_CreatePlayer& from);
  void MergeFrom(const SG2D_CreatePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional uint32 card_solution_id = 4;
  inline bool has_card_solution_id() const;
  inline void clear_card_solution_id();
  static const int kCardSolutionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 card_solution_id() const;
  inline void set_card_solution_id(::google::protobuf::uint32 value);

  // optional string sdk_user_id = 5;
  inline bool has_sdk_user_id() const;
  inline void clear_sdk_user_id();
  static const int kSdkUserIdFieldNumber = 5;
  inline const ::std::string& sdk_user_id() const;
  inline void set_sdk_user_id(const ::std::string& value);
  inline void set_sdk_user_id(const char* value);
  inline void set_sdk_user_id(const char* value, size_t size);
  inline ::std::string* mutable_sdk_user_id();
  inline ::std::string* release_sdk_user_id();
  inline void set_allocated_sdk_user_id(::std::string* sdk_user_id);

  // optional uint32 platform_id = 6;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 6;
  inline ::google::protobuf::uint32 platform_id() const;
  inline void set_platform_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_CreatePlayer)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_card_solution_id();
  inline void clear_has_card_solution_id();
  inline void set_has_sdk_user_id();
  inline void clear_has_sdk_user_id();
  inline void set_has_platform_id();
  inline void clear_has_platform_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 card_solution_id_;
  ::std::string* sdk_user_id_;
  ::google::protobuf::uint32 platform_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_CreatePlayer* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_SelectPlayer : public ::google::protobuf::Message {
 public:
  SG2D_SelectPlayer();
  virtual ~SG2D_SelectPlayer();

  SG2D_SelectPlayer(const SG2D_SelectPlayer& from);

  inline SG2D_SelectPlayer& operator=(const SG2D_SelectPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_SelectPlayer& default_instance();

  void Swap(SG2D_SelectPlayer* other);

  // implements Message ----------------------------------------------

  SG2D_SelectPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_SelectPlayer& from);
  void MergeFrom(const SG2D_SelectPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // required uint64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional uint32 platform_id = 3;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 3;
  inline ::google::protobuf::uint32 platform_id() const;
  inline void set_platform_id(::google::protobuf::uint32 value);

  // optional bool is_quick_login = 4 [default = false];
  inline bool has_is_quick_login() const;
  inline void clear_is_quick_login();
  static const int kIsQuickLoginFieldNumber = 4;
  inline bool is_quick_login() const;
  inline void set_is_quick_login(bool value);

  // optional uint32 country_id = 5;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 5;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 headpic_id = 6;
  inline bool has_headpic_id() const;
  inline void clear_headpic_id();
  static const int kHeadpicIdFieldNumber = 6;
  inline ::google::protobuf::uint32 headpic_id() const;
  inline void set_headpic_id(::google::protobuf::uint32 value);

  // optional uint32 expected_country_id = 7;
  inline bool has_expected_country_id() const;
  inline void clear_expected_country_id();
  static const int kExpectedCountryIdFieldNumber = 7;
  inline ::google::protobuf::uint32 expected_country_id() const;
  inline void set_expected_country_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_SelectPlayer)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_platform_id();
  inline void clear_has_platform_id();
  inline void set_has_is_quick_login();
  inline void clear_has_is_quick_login();
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_headpic_id();
  inline void clear_has_headpic_id();
  inline void set_has_expected_country_id();
  inline void clear_has_expected_country_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_id_;
  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint32 platform_id_;
  bool is_quick_login_;
  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 headpic_id_;
  ::google::protobuf::uint32 expected_country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_SelectPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_Player_Id : public ::google::protobuf::Message {
 public:
  SG2D_Player_Id();
  virtual ~SG2D_Player_Id();

  SG2D_Player_Id(const SG2D_Player_Id& from);

  inline SG2D_Player_Id& operator=(const SG2D_Player_Id& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_Player_Id& default_instance();

  void Swap(SG2D_Player_Id* other);

  // implements Message ----------------------------------------------

  SG2D_Player_Id* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_Player_Id& from);
  void MergeFrom(const SG2D_Player_Id& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_Player_Id)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_Player_Id* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_UpdataStageLevel : public ::google::protobuf::Message {
 public:
  SG2D_UpdataStageLevel();
  virtual ~SG2D_UpdataStageLevel();

  SG2D_UpdataStageLevel(const SG2D_UpdataStageLevel& from);

  inline SG2D_UpdataStageLevel& operator=(const SG2D_UpdataStageLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_UpdataStageLevel& default_instance();

  void Swap(SG2D_UpdataStageLevel* other);

  // implements Message ----------------------------------------------

  SG2D_UpdataStageLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_UpdataStageLevel& from);
  void MergeFrom(const SG2D_UpdataStageLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Data_Operate op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::pb::Data_Operate op_type() const;
  inline void set_op_type(::pb::Data_Operate value);

  // optional .pb.GS2C_StageLevel info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::pb::GS2C_StageLevel& info() const;
  inline ::pb::GS2C_StageLevel* mutable_info();
  inline ::pb::GS2C_StageLevel* release_info();
  inline void set_allocated_info(::pb::GS2C_StageLevel* info);

  // @@protoc_insertion_point(class_scope:pb.SG2D_UpdataStageLevel)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_StageLevel* info_;
  int op_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_UpdataStageLevel* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_Forbiden_Player : public ::google::protobuf::Message {
 public:
  SG2D_Forbiden_Player();
  virtual ~SG2D_Forbiden_Player();

  SG2D_Forbiden_Player(const SG2D_Forbiden_Player& from);

  inline SG2D_Forbiden_Player& operator=(const SG2D_Forbiden_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_Forbiden_Player& default_instance();

  void Swap(SG2D_Forbiden_Player* other);

  // implements Message ----------------------------------------------

  SG2D_Forbiden_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_Forbiden_Player& from);
  void MergeFrom(const SG2D_Forbiden_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional int32 forbidId = 2;
  inline bool has_forbidid() const;
  inline void clear_forbidid();
  static const int kForbidIdFieldNumber = 2;
  inline ::google::protobuf::int32 forbidid() const;
  inline void set_forbidid(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_Forbiden_Player)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_forbidid();
  inline void clear_has_forbidid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::int32 forbidid_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_Forbiden_Player* default_instance_;
};
// -------------------------------------------------------------------

class SD2G_Forbiden_Player_Ret : public ::google::protobuf::Message {
 public:
  SD2G_Forbiden_Player_Ret();
  virtual ~SD2G_Forbiden_Player_Ret();

  SD2G_Forbiden_Player_Ret(const SD2G_Forbiden_Player_Ret& from);

  inline SD2G_Forbiden_Player_Ret& operator=(const SD2G_Forbiden_Player_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD2G_Forbiden_Player_Ret& default_instance();

  void Swap(SD2G_Forbiden_Player_Ret* other);

  // implements Message ----------------------------------------------

  SD2G_Forbiden_Player_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD2G_Forbiden_Player_Ret& from);
  void MergeFrom(const SD2G_Forbiden_Player_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 acountId = 1;
  inline bool has_acountid() const;
  inline void clear_acountid();
  static const int kAcountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 acountid() const;
  inline void set_acountid(::google::protobuf::uint64 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 forbidId = 3;
  inline bool has_forbidid() const;
  inline void clear_forbidid();
  static const int kForbidIdFieldNumber = 3;
  inline ::google::protobuf::int32 forbidid() const;
  inline void set_forbidid(::google::protobuf::int32 value);

  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SD2G_Forbiden_Player_Ret)
 private:
  inline void set_has_acountid();
  inline void clear_has_acountid();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_forbidid();
  inline void clear_has_forbidid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 acountid_;
  ::std::string* player_name_;
  ::google::protobuf::int32 forbidid_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SD2G_Forbiden_Player_Ret* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_UpdataFuBenBase : public ::google::protobuf::Message {
 public:
  SG2D_UpdataFuBenBase();
  virtual ~SG2D_UpdataFuBenBase();

  SG2D_UpdataFuBenBase(const SG2D_UpdataFuBenBase& from);

  inline SG2D_UpdataFuBenBase& operator=(const SG2D_UpdataFuBenBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_UpdataFuBenBase& default_instance();

  void Swap(SG2D_UpdataFuBenBase* other);

  // implements Message ----------------------------------------------

  SG2D_UpdataFuBenBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_UpdataFuBenBase& from);
  void MergeFrom(const SG2D_UpdataFuBenBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Data_Operate op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::pb::Data_Operate op_type() const;
  inline void set_op_type(::pb::Data_Operate value);

  // required uint32 cur_fuben_id = 2;
  inline bool has_cur_fuben_id() const;
  inline void clear_cur_fuben_id();
  static const int kCurFubenIdFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_fuben_id() const;
  inline void set_cur_fuben_id(::google::protobuf::uint32 value);

  // required uint32 cur_stage_id = 3;
  inline bool has_cur_stage_id() const;
  inline void clear_cur_stage_id();
  static const int kCurStageIdFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_stage_id() const;
  inline void set_cur_stage_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_UpdataFuBenBase)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_cur_fuben_id();
  inline void clear_has_cur_fuben_id();
  inline void set_has_cur_stage_id();
  inline void clear_has_cur_stage_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int op_type_;
  ::google::protobuf::uint32 cur_fuben_id_;
  ::google::protobuf::uint32 cur_stage_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_UpdataFuBenBase* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_UpdataFuBenResource : public ::google::protobuf::Message {
 public:
  SG2D_UpdataFuBenResource();
  virtual ~SG2D_UpdataFuBenResource();

  SG2D_UpdataFuBenResource(const SG2D_UpdataFuBenResource& from);

  inline SG2D_UpdataFuBenResource& operator=(const SG2D_UpdataFuBenResource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_UpdataFuBenResource& default_instance();

  void Swap(SG2D_UpdataFuBenResource* other);

  // implements Message ----------------------------------------------

  SG2D_UpdataFuBenResource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_UpdataFuBenResource& from);
  void MergeFrom(const SG2D_UpdataFuBenResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Data_Operate op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::pb::Data_Operate op_type() const;
  inline void set_op_type(::pb::Data_Operate value);

  // optional .pb.GS2C_Resource_Stage info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::pb::GS2C_Resource_Stage& info() const;
  inline ::pb::GS2C_Resource_Stage* mutable_info();
  inline ::pb::GS2C_Resource_Stage* release_info();
  inline void set_allocated_info(::pb::GS2C_Resource_Stage* info);

  // @@protoc_insertion_point(class_scope:pb.SG2D_UpdataFuBenResource)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_Resource_Stage* info_;
  int op_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_UpdataFuBenResource* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_UpdataFuBenPassStage : public ::google::protobuf::Message {
 public:
  SG2D_UpdataFuBenPassStage();
  virtual ~SG2D_UpdataFuBenPassStage();

  SG2D_UpdataFuBenPassStage(const SG2D_UpdataFuBenPassStage& from);

  inline SG2D_UpdataFuBenPassStage& operator=(const SG2D_UpdataFuBenPassStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_UpdataFuBenPassStage& default_instance();

  void Swap(SG2D_UpdataFuBenPassStage* other);

  // implements Message ----------------------------------------------

  SG2D_UpdataFuBenPassStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_UpdataFuBenPassStage& from);
  void MergeFrom(const SG2D_UpdataFuBenPassStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Data_Operate op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::pb::Data_Operate op_type() const;
  inline void set_op_type(::pb::Data_Operate value);

  // optional uint32 stage_type = 2;
  inline bool has_stage_type() const;
  inline void clear_stage_type();
  static const int kStageTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 stage_type() const;
  inline void set_stage_type(::google::protobuf::uint32 value);

  // optional uint32 pass_count = 3;
  inline bool has_pass_count() const;
  inline void clear_pass_count();
  static const int kPassCountFieldNumber = 3;
  inline ::google::protobuf::uint32 pass_count() const;
  inline void set_pass_count(::google::protobuf::uint32 value);

  // optional uint32 is_take_reward = 4;
  inline bool has_is_take_reward() const;
  inline void clear_is_take_reward();
  static const int kIsTakeRewardFieldNumber = 4;
  inline ::google::protobuf::uint32 is_take_reward() const;
  inline void set_is_take_reward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_UpdataFuBenPassStage)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_stage_type();
  inline void clear_has_stage_type();
  inline void set_has_pass_count();
  inline void clear_has_pass_count();
  inline void set_has_is_take_reward();
  inline void clear_has_is_take_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int op_type_;
  ::google::protobuf::uint32 stage_type_;
  ::google::protobuf::uint32 pass_count_;
  ::google::protobuf::uint32 is_take_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_UpdataFuBenPassStage* default_instance_;
};
// -------------------------------------------------------------------

class Country_Info_Devide : public ::google::protobuf::Message {
 public:
  Country_Info_Devide();
  virtual ~Country_Info_Devide();

  Country_Info_Devide(const Country_Info_Devide& from);

  inline Country_Info_Devide& operator=(const Country_Info_Devide& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Country_Info_Devide& default_instance();

  void Swap(Country_Info_Devide* other);

  // implements Message ----------------------------------------------

  Country_Info_Devide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Country_Info_Devide& from);
  void MergeFrom(const Country_Info_Devide& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 countryid = 1;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryidFieldNumber = 1;
  inline ::google::protobuf::uint32 countryid() const;
  inline void set_countryid(::google::protobuf::uint32 value);

  // optional uint32 Pros_degree = 2;
  inline bool has_pros_degree() const;
  inline void clear_pros_degree();
  static const int kProsDegreeFieldNumber = 2;
  inline ::google::protobuf::uint32 pros_degree() const;
  inline void set_pros_degree(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Country_Info_Devide)
 private:
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_pros_degree();
  inline void clear_has_pros_degree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 countryid_;
  ::google::protobuf::uint32 pros_degree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static Country_Info_Devide* default_instance_;
};
// -------------------------------------------------------------------

class SD2G_Country_AllInfo : public ::google::protobuf::Message {
 public:
  SD2G_Country_AllInfo();
  virtual ~SD2G_Country_AllInfo();

  SD2G_Country_AllInfo(const SD2G_Country_AllInfo& from);

  inline SD2G_Country_AllInfo& operator=(const SD2G_Country_AllInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD2G_Country_AllInfo& default_instance();

  void Swap(SD2G_Country_AllInfo* other);

  // implements Message ----------------------------------------------

  SD2G_Country_AllInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD2G_Country_AllInfo& from);
  void MergeFrom(const SD2G_Country_AllInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CountyInfo base_info = 1;
  inline int base_info_size() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::pb::CountyInfo& base_info(int index) const;
  inline ::pb::CountyInfo* mutable_base_info(int index);
  inline ::pb::CountyInfo* add_base_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >&
      base_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >*
      mutable_base_info();

  // repeated .pb.Struct_City_Info city_lst = 2;
  inline int city_lst_size() const;
  inline void clear_city_lst();
  static const int kCityLstFieldNumber = 2;
  inline const ::pb::Struct_City_Info& city_lst(int index) const;
  inline ::pb::Struct_City_Info* mutable_city_lst(int index);
  inline ::pb::Struct_City_Info* add_city_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >&
      city_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >*
      mutable_city_lst();

  // @@protoc_insertion_point(class_scope:pb.SD2G_Country_AllInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo > base_info_;
  ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info > city_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SD2G_Country_AllInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2B_Country_Info : public ::google::protobuf::Message {
 public:
  SG2B_Country_Info();
  virtual ~SG2B_Country_Info();

  SG2B_Country_Info(const SG2B_Country_Info& from);

  inline SG2B_Country_Info& operator=(const SG2B_Country_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2B_Country_Info& default_instance();

  void Swap(SG2B_Country_Info* other);

  // implements Message ----------------------------------------------

  SG2B_Country_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2B_Country_Info& from);
  void MergeFrom(const SG2B_Country_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_can_cross_war = 1;
  inline bool has_is_can_cross_war() const;
  inline void clear_is_can_cross_war();
  static const int kIsCanCrossWarFieldNumber = 1;
  inline bool is_can_cross_war() const;
  inline void set_is_can_cross_war(bool value);

  // repeated .pb.Country_Info_Devide country_info = 2;
  inline int country_info_size() const;
  inline void clear_country_info();
  static const int kCountryInfoFieldNumber = 2;
  inline const ::pb::Country_Info_Devide& country_info(int index) const;
  inline ::pb::Country_Info_Devide* mutable_country_info(int index);
  inline ::pb::Country_Info_Devide* add_country_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Country_Info_Devide >&
      country_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Country_Info_Devide >*
      mutable_country_info();

  // optional uint32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2B_Country_Info)
 private:
  inline void set_has_is_can_cross_war();
  inline void clear_has_is_can_cross_war();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Country_Info_Devide > country_info_;
  bool is_can_cross_war_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2B_Country_Info* default_instance_;
};
// -------------------------------------------------------------------

class SB2G_Country_War_Info : public ::google::protobuf::Message {
 public:
  SB2G_Country_War_Info();
  virtual ~SB2G_Country_War_Info();

  SB2G_Country_War_Info(const SB2G_Country_War_Info& from);

  inline SB2G_Country_War_Info& operator=(const SB2G_Country_War_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SB2G_Country_War_Info& default_instance();

  void Swap(SB2G_Country_War_Info* other);

  // implements Message ----------------------------------------------

  SB2G_Country_War_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SB2G_Country_War_Info& from);
  void MergeFrom(const SB2G_Country_War_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CountryCrossWarInfo war_info = 1;
  inline int war_info_size() const;
  inline void clear_war_info();
  static const int kWarInfoFieldNumber = 1;
  inline const ::pb::CountryCrossWarInfo& war_info(int index) const;
  inline ::pb::CountryCrossWarInfo* mutable_war_info(int index);
  inline ::pb::CountryCrossWarInfo* add_war_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CountryCrossWarInfo >&
      war_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CountryCrossWarInfo >*
      mutable_war_info();

  // @@protoc_insertion_point(class_scope:pb.SB2G_Country_War_Info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::CountryCrossWarInfo > war_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SB2G_Country_War_Info* default_instance_;
};
// -------------------------------------------------------------------

class SG2R_Country_AllInfo : public ::google::protobuf::Message {
 public:
  SG2R_Country_AllInfo();
  virtual ~SG2R_Country_AllInfo();

  SG2R_Country_AllInfo(const SG2R_Country_AllInfo& from);

  inline SG2R_Country_AllInfo& operator=(const SG2R_Country_AllInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2R_Country_AllInfo& default_instance();

  void Swap(SG2R_Country_AllInfo* other);

  // implements Message ----------------------------------------------

  SG2R_Country_AllInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2R_Country_AllInfo& from);
  void MergeFrom(const SG2R_Country_AllInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CountyInfo base_info = 1;
  inline int base_info_size() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::pb::CountyInfo& base_info(int index) const;
  inline ::pb::CountyInfo* mutable_base_info(int index);
  inline ::pb::CountyInfo* add_base_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >&
      base_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >*
      mutable_base_info();

  // repeated .pb.Struct_City_Info city_lst = 2;
  inline int city_lst_size() const;
  inline void clear_city_lst();
  static const int kCityLstFieldNumber = 2;
  inline const ::pb::Struct_City_Info& city_lst(int index) const;
  inline ::pb::Struct_City_Info* mutable_city_lst(int index);
  inline ::pb::Struct_City_Info* add_city_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >&
      city_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >*
      mutable_city_lst();

  // @@protoc_insertion_point(class_scope:pb.SG2R_Country_AllInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo > base_info_;
  ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info > city_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2R_Country_AllInfo* default_instance_;
};
// -------------------------------------------------------------------

class GobalValue : public ::google::protobuf::Message {
 public:
  GobalValue();
  virtual ~GobalValue();

  GobalValue(const GobalValue& from);

  inline GobalValue& operator=(const GobalValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GobalValue& default_instance();

  void Swap(GobalValue* other);

  // implements Message ----------------------------------------------

  GobalValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GobalValue& from);
  void MergeFrom(const GobalValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional .pb.ValueType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::pb::ValueType type() const;
  inline void set_type(::pb::ValueType value);

  // optional int64 i64_value = 3;
  inline bool has_i64_value() const;
  inline void clear_i64_value();
  static const int kI64ValueFieldNumber = 3;
  inline ::google::protobuf::int64 i64_value() const;
  inline void set_i64_value(::google::protobuf::int64 value);

  // optional string str_value = 4;
  inline bool has_str_value() const;
  inline void clear_str_value();
  static const int kStrValueFieldNumber = 4;
  inline const ::std::string& str_value() const;
  inline void set_str_value(const ::std::string& value);
  inline void set_str_value(const char* value);
  inline void set_str_value(const char* value, size_t size);
  inline ::std::string* mutable_str_value();
  inline ::std::string* release_str_value();
  inline void set_allocated_str_value(::std::string* str_value);

  // optional int32 int_value = 5;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 5;
  inline ::google::protobuf::int32 int_value() const;
  inline void set_int_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.GobalValue)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_i64_value();
  inline void clear_has_i64_value();
  inline void set_has_str_value();
  inline void clear_has_str_value();
  inline void set_has_int_value();
  inline void clear_has_int_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  int type_;
  ::google::protobuf::int64 i64_value_;
  ::std::string* str_value_;
  ::google::protobuf::int32 int_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static GobalValue* default_instance_;
};
// -------------------------------------------------------------------

class ServerGobalValue : public ::google::protobuf::Message {
 public:
  ServerGobalValue();
  virtual ~ServerGobalValue();

  ServerGobalValue(const ServerGobalValue& from);

  inline ServerGobalValue& operator=(const ServerGobalValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGobalValue& default_instance();

  void Swap(ServerGobalValue* other);

  // implements Message ----------------------------------------------

  ServerGobalValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGobalValue& from);
  void MergeFrom(const ServerGobalValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GobalValue values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::pb::GobalValue& values(int index) const;
  inline ::pb::GobalValue* mutable_values(int index);
  inline ::pb::GobalValue* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GobalValue >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GobalValue >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:pb.ServerGobalValue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GobalValue > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static ServerGobalValue* default_instance_;
};
// -------------------------------------------------------------------

class BroadcastHeader : public ::google::protobuf::Message {
 public:
  BroadcastHeader();
  virtual ~BroadcastHeader();

  BroadcastHeader(const BroadcastHeader& from);

  inline BroadcastHeader& operator=(const BroadcastHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastHeader& default_instance();

  void Swap(BroadcastHeader* other);

  // implements Message ----------------------------------------------

  BroadcastHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadcastHeader& from);
  void MergeFrom(const BroadcastHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.BROADCAST_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::pb::BROADCAST_TYPE type() const;
  inline void set_type(::pb::BROADCAST_TYPE value);

  // @@protoc_insertion_point(class_scope:pb.BroadcastHeader)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static BroadcastHeader* default_instance_;
};
// -------------------------------------------------------------------

class SW2C2L_UpdateServerInfo : public ::google::protobuf::Message {
 public:
  SW2C2L_UpdateServerInfo();
  virtual ~SW2C2L_UpdateServerInfo();

  SW2C2L_UpdateServerInfo(const SW2C2L_UpdateServerInfo& from);

  inline SW2C2L_UpdateServerInfo& operator=(const SW2C2L_UpdateServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SW2C2L_UpdateServerInfo& default_instance();

  void Swap(SW2C2L_UpdateServerInfo* other);

  // implements Message ----------------------------------------------

  SW2C2L_UpdateServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SW2C2L_UpdateServerInfo& from);
  void MergeFrom(const SW2C2L_UpdateServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // repeated int32 server_id = 2;
  inline int server_id_size() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 server_id(int index) const;
  inline void set_server_id(int index, ::google::protobuf::int32 value);
  inline void add_server_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      server_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_server_id();

  // @@protoc_insertion_point(class_scope:pb.SW2C2L_UpdateServerInfo)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > server_id_;
  ::google::protobuf::int32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SW2C2L_UpdateServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2C2L_UpdatePerformanceInfo : public ::google::protobuf::Message {
 public:
  SG2C2L_UpdatePerformanceInfo();
  virtual ~SG2C2L_UpdatePerformanceInfo();

  SG2C2L_UpdatePerformanceInfo(const SG2C2L_UpdatePerformanceInfo& from);

  inline SG2C2L_UpdatePerformanceInfo& operator=(const SG2C2L_UpdatePerformanceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2C2L_UpdatePerformanceInfo& default_instance();

  void Swap(SG2C2L_UpdatePerformanceInfo* other);

  // implements Message ----------------------------------------------

  SG2C2L_UpdatePerformanceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2C2L_UpdatePerformanceInfo& from);
  void MergeFrom(const SG2C2L_UpdatePerformanceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // required int32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required int32 player_count = 3;
  inline bool has_player_count() const;
  inline void clear_player_count();
  static const int kPlayerCountFieldNumber = 3;
  inline ::google::protobuf::int32 player_count() const;
  inline void set_player_count(::google::protobuf::int32 value);

  // required uint64 logical_update_ms = 4;
  inline bool has_logical_update_ms() const;
  inline void clear_logical_update_ms();
  static const int kLogicalUpdateMsFieldNumber = 4;
  inline ::google::protobuf::uint64 logical_update_ms() const;
  inline void set_logical_update_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.SG2C2L_UpdatePerformanceInfo)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_player_count();
  inline void clear_has_player_count();
  inline void set_has_logical_update_ms();
  inline void clear_has_logical_update_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::uint64 logical_update_ms_;
  ::google::protobuf::int32 player_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2C2L_UpdatePerformanceInfo* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_Broadcast_Info : public ::google::protobuf::Message {
 public:
  SG2D_Broadcast_Info();
  virtual ~SG2D_Broadcast_Info();

  SG2D_Broadcast_Info(const SG2D_Broadcast_Info& from);

  inline SG2D_Broadcast_Info& operator=(const SG2D_Broadcast_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_Broadcast_Info& default_instance();

  void Swap(SG2D_Broadcast_Info* other);

  // implements Message ----------------------------------------------

  SG2D_Broadcast_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_Broadcast_Info& from);
  void MergeFrom(const SG2D_Broadcast_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool is_include = 2;
  inline bool has_is_include() const;
  inline void clear_is_include();
  static const int kIsIncludeFieldNumber = 2;
  inline bool is_include() const;
  inline void set_is_include(bool value);

  // repeated uint64 player_ids = 3;
  inline int player_ids_size() const;
  inline void clear_player_ids();
  static const int kPlayerIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 player_ids(int index) const;
  inline void set_player_ids(int index, ::google::protobuf::uint64 value);
  inline void add_player_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_ids();

  // repeated string player_names = 4;
  inline int player_names_size() const;
  inline void clear_player_names();
  static const int kPlayerNamesFieldNumber = 4;
  inline const ::std::string& player_names(int index) const;
  inline ::std::string* mutable_player_names(int index);
  inline void set_player_names(int index, const ::std::string& value);
  inline void set_player_names(int index, const char* value);
  inline void set_player_names(int index, const char* value, size_t size);
  inline ::std::string* add_player_names();
  inline void add_player_names(const ::std::string& value);
  inline void add_player_names(const char* value);
  inline void add_player_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& player_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_player_names();

  // optional bool result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_Broadcast_Info)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_is_include();
  inline void clear_has_is_include();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool is_include_;
  bool result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> player_names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_Broadcast_Info* default_instance_;
};
// -------------------------------------------------------------------

class SG2G_Mail_SendMail : public ::google::protobuf::Message {
 public:
  SG2G_Mail_SendMail();
  virtual ~SG2G_Mail_SendMail();

  SG2G_Mail_SendMail(const SG2G_Mail_SendMail& from);

  inline SG2G_Mail_SendMail& operator=(const SG2G_Mail_SendMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2G_Mail_SendMail& default_instance();

  void Swap(SG2G_Mail_SendMail* other);

  // implements Message ----------------------------------------------

  SG2G_Mail_SendMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2G_Mail_SendMail& from);
  void MergeFrom(const SG2G_Mail_SendMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 to_players = 1;
  inline int to_players_size() const;
  inline void clear_to_players();
  static const int kToPlayersFieldNumber = 1;
  inline ::google::protobuf::uint64 to_players(int index) const;
  inline void set_to_players(int index, ::google::protobuf::uint64 value);
  inline void add_to_players(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      to_players() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_to_players();

  // optional uint64 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint64 value);

  // optional string plat_form = 3;
  inline bool has_plat_form() const;
  inline void clear_plat_form();
  static const int kPlatFormFieldNumber = 3;
  inline const ::std::string& plat_form() const;
  inline void set_plat_form(const ::std::string& value);
  inline void set_plat_form(const char* value);
  inline void set_plat_form(const char* value, size_t size);
  inline ::std::string* mutable_plat_form();
  inline ::std::string* release_plat_form();
  inline void set_allocated_plat_form(::std::string* plat_form);

  // optional string channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional int32 mail_type = 5;
  inline bool has_mail_type() const;
  inline void clear_mail_type();
  static const int kMailTypeFieldNumber = 5;
  inline ::google::protobuf::int32 mail_type() const;
  inline void set_mail_type(::google::protobuf::int32 value);

  // optional int32 send_type = 6;
  inline bool has_send_type() const;
  inline void clear_send_type();
  static const int kSendTypeFieldNumber = 6;
  inline ::google::protobuf::int32 send_type() const;
  inline void set_send_type(::google::protobuf::int32 value);

  // optional uint64 begin_time = 7;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 begin_time() const;
  inline void set_begin_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 8;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional string title = 9;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 9;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 10;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 10;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string items = 11;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 11;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const char* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  inline void set_allocated_items(::std::string* items);

  // @@protoc_insertion_point(class_scope:pb.SG2G_Mail_SendMail)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_plat_form();
  inline void clear_has_plat_form();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_mail_type();
  inline void clear_has_mail_type();
  inline void set_has_send_type();
  inline void clear_has_send_type();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_items();
  inline void clear_has_items();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > to_players_;
  ::google::protobuf::uint64 mail_id_;
  ::std::string* plat_form_;
  ::std::string* channel_;
  ::google::protobuf::int32 mail_type_;
  ::google::protobuf::int32 send_type_;
  ::google::protobuf::uint64 begin_time_;
  ::google::protobuf::uint64 end_time_;
  ::std::string* title_;
  ::std::string* content_;
  ::std::string* items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2G_Mail_SendMail* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_MailInfoData : public ::google::protobuf::Message {
 public:
  SG2D_MailInfoData();
  virtual ~SG2D_MailInfoData();

  SG2D_MailInfoData(const SG2D_MailInfoData& from);

  inline SG2D_MailInfoData& operator=(const SG2D_MailInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_MailInfoData& default_instance();

  void Swap(SG2D_MailInfoData* other);

  // implements Message ----------------------------------------------

  SG2D_MailInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_MailInfoData& from);
  void MergeFrom(const SG2D_MailInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // required uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required int32 mail_type = 3;
  inline bool has_mail_type() const;
  inline void clear_mail_type();
  static const int kMailTypeFieldNumber = 3;
  inline ::google::protobuf::int32 mail_type() const;
  inline void set_mail_type(::google::protobuf::int32 value);

  // optional uint64 mail_id = 4;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 4;
  inline ::google::protobuf::uint64 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint64 value);

  // required int32 mail_state = 5;
  inline bool has_mail_state() const;
  inline void clear_mail_state();
  static const int kMailStateFieldNumber = 5;
  inline ::google::protobuf::int32 mail_state() const;
  inline void set_mail_state(::google::protobuf::int32 value);

  // optional uint64 send_time = 6;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 send_time() const;
  inline void set_send_time(::google::protobuf::uint64 value);

  // optional bool is_take = 7;
  inline bool has_is_take() const;
  inline void clear_is_take();
  static const int kIsTakeFieldNumber = 7;
  inline bool is_take() const;
  inline void set_is_take(bool value);

  // optional string items = 8;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 8;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const char* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  inline void set_allocated_items(::std::string* items);

  // @@protoc_insertion_point(class_scope:pb.SG2D_MailInfoData)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mail_type();
  inline void clear_has_mail_type();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_mail_state();
  inline void clear_has_mail_state();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_is_take();
  inline void clear_has_is_take();
  inline void set_has_items();
  inline void clear_has_items();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 mail_id_;
  ::google::protobuf::int32 mail_type_;
  ::google::protobuf::int32 mail_state_;
  ::google::protobuf::uint64 send_time_;
  ::std::string* items_;
  bool is_take_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_MailInfoData* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_MailsOperate : public ::google::protobuf::Message {
 public:
  SG2D_MailsOperate();
  virtual ~SG2D_MailsOperate();

  SG2D_MailsOperate(const SG2D_MailsOperate& from);

  inline SG2D_MailsOperate& operator=(const SG2D_MailsOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_MailsOperate& default_instance();

  void Swap(SG2D_MailsOperate* other);

  // implements Message ----------------------------------------------

  SG2D_MailsOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_MailsOperate& from);
  void MergeFrom(const SG2D_MailsOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 operate_type = 1;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // repeated .pb.SG2D_MailInfoData mail_info_data = 2;
  inline int mail_info_data_size() const;
  inline void clear_mail_info_data();
  static const int kMailInfoDataFieldNumber = 2;
  inline const ::pb::SG2D_MailInfoData& mail_info_data(int index) const;
  inline ::pb::SG2D_MailInfoData* mutable_mail_info_data(int index);
  inline ::pb::SG2D_MailInfoData* add_mail_info_data();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SG2D_MailInfoData >&
      mail_info_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SG2D_MailInfoData >*
      mutable_mail_info_data();

  // @@protoc_insertion_point(class_scope:pb.SG2D_MailsOperate)
 private:
  inline void set_has_operate_type();
  inline void clear_has_operate_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::SG2D_MailInfoData > mail_info_data_;
  ::google::protobuf::int32 operate_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_MailsOperate* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_Check_Mail_Recivers_Exist : public ::google::protobuf::Message {
 public:
  SG2D_Check_Mail_Recivers_Exist();
  virtual ~SG2D_Check_Mail_Recivers_Exist();

  SG2D_Check_Mail_Recivers_Exist(const SG2D_Check_Mail_Recivers_Exist& from);

  inline SG2D_Check_Mail_Recivers_Exist& operator=(const SG2D_Check_Mail_Recivers_Exist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_Check_Mail_Recivers_Exist& default_instance();

  void Swap(SG2D_Check_Mail_Recivers_Exist* other);

  // implements Message ----------------------------------------------

  SG2D_Check_Mail_Recivers_Exist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_Check_Mail_Recivers_Exist& from);
  void MergeFrom(const SG2D_Check_Mail_Recivers_Exist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.SG2G_Mail_SendMail mail = 1;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 1;
  inline const ::pb::SG2G_Mail_SendMail& mail() const;
  inline ::pb::SG2G_Mail_SendMail* mutable_mail();
  inline ::pb::SG2G_Mail_SendMail* release_mail();
  inline void set_allocated_mail(::pb::SG2G_Mail_SendMail* mail);

  // optional int32 alv = 2;
  inline bool has_alv() const;
  inline void clear_alv();
  static const int kAlvFieldNumber = 2;
  inline ::google::protobuf::int32 alv() const;
  inline void set_alv(::google::protobuf::int32 value);

  // optional int32 blv = 3;
  inline bool has_blv() const;
  inline void clear_blv();
  static const int kBlvFieldNumber = 3;
  inline ::google::protobuf::int32 blv() const;
  inline void set_blv(::google::protobuf::int32 value);

  // optional int32 avip = 4;
  inline bool has_avip() const;
  inline void clear_avip();
  static const int kAvipFieldNumber = 4;
  inline ::google::protobuf::int32 avip() const;
  inline void set_avip(::google::protobuf::int32 value);

  // optional int32 bvip = 5;
  inline bool has_bvip() const;
  inline void clear_bvip();
  static const int kBvipFieldNumber = 5;
  inline ::google::protobuf::int32 bvip() const;
  inline void set_bvip(::google::protobuf::int32 value);

  // optional bool is_server_mail = 6;
  inline bool has_is_server_mail() const;
  inline void clear_is_server_mail();
  static const int kIsServerMailFieldNumber = 6;
  inline bool is_server_mail() const;
  inline void set_is_server_mail(bool value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_Check_Mail_Recivers_Exist)
 private:
  inline void set_has_mail();
  inline void clear_has_mail();
  inline void set_has_alv();
  inline void clear_has_alv();
  inline void set_has_blv();
  inline void clear_has_blv();
  inline void set_has_avip();
  inline void clear_has_avip();
  inline void set_has_bvip();
  inline void clear_has_bvip();
  inline void set_has_is_server_mail();
  inline void clear_has_is_server_mail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::SG2G_Mail_SendMail* mail_;
  ::google::protobuf::int32 alv_;
  ::google::protobuf::int32 blv_;
  ::google::protobuf::int32 avip_;
  ::google::protobuf::int32 bvip_;
  bool is_server_mail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_Check_Mail_Recivers_Exist* default_instance_;
};
// -------------------------------------------------------------------

class SD2G_Check_Mail_Recivers_Exist_Rspone : public ::google::protobuf::Message {
 public:
  SD2G_Check_Mail_Recivers_Exist_Rspone();
  virtual ~SD2G_Check_Mail_Recivers_Exist_Rspone();

  SD2G_Check_Mail_Recivers_Exist_Rspone(const SD2G_Check_Mail_Recivers_Exist_Rspone& from);

  inline SD2G_Check_Mail_Recivers_Exist_Rspone& operator=(const SD2G_Check_Mail_Recivers_Exist_Rspone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD2G_Check_Mail_Recivers_Exist_Rspone& default_instance();

  void Swap(SD2G_Check_Mail_Recivers_Exist_Rspone* other);

  // implements Message ----------------------------------------------

  SD2G_Check_Mail_Recivers_Exist_Rspone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD2G_Check_Mail_Recivers_Exist_Rspone& from);
  void MergeFrom(const SD2G_Check_Mail_Recivers_Exist_Rspone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.SG2G_Mail_SendMail mail = 1;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 1;
  inline const ::pb::SG2G_Mail_SendMail& mail() const;
  inline ::pb::SG2G_Mail_SendMail* mutable_mail();
  inline ::pb::SG2G_Mail_SendMail* release_mail();
  inline void set_allocated_mail(::pb::SG2G_Mail_SendMail* mail);

  // optional bool is_can_send = 2;
  inline bool has_is_can_send() const;
  inline void clear_is_can_send();
  static const int kIsCanSendFieldNumber = 2;
  inline bool is_can_send() const;
  inline void set_is_can_send(bool value);

  // optional int32 alv = 3;
  inline bool has_alv() const;
  inline void clear_alv();
  static const int kAlvFieldNumber = 3;
  inline ::google::protobuf::int32 alv() const;
  inline void set_alv(::google::protobuf::int32 value);

  // optional int32 blv = 4;
  inline bool has_blv() const;
  inline void clear_blv();
  static const int kBlvFieldNumber = 4;
  inline ::google::protobuf::int32 blv() const;
  inline void set_blv(::google::protobuf::int32 value);

  // optional int32 avip = 5;
  inline bool has_avip() const;
  inline void clear_avip();
  static const int kAvipFieldNumber = 5;
  inline ::google::protobuf::int32 avip() const;
  inline void set_avip(::google::protobuf::int32 value);

  // optional int32 bvip = 6;
  inline bool has_bvip() const;
  inline void clear_bvip();
  static const int kBvipFieldNumber = 6;
  inline ::google::protobuf::int32 bvip() const;
  inline void set_bvip(::google::protobuf::int32 value);

  // optional bool is_server_mail = 7;
  inline bool has_is_server_mail() const;
  inline void clear_is_server_mail();
  static const int kIsServerMailFieldNumber = 7;
  inline bool is_server_mail() const;
  inline void set_is_server_mail(bool value);

  // @@protoc_insertion_point(class_scope:pb.SD2G_Check_Mail_Recivers_Exist_Rspone)
 private:
  inline void set_has_mail();
  inline void clear_has_mail();
  inline void set_has_is_can_send();
  inline void clear_has_is_can_send();
  inline void set_has_alv();
  inline void clear_has_alv();
  inline void set_has_blv();
  inline void clear_has_blv();
  inline void set_has_avip();
  inline void clear_has_avip();
  inline void set_has_bvip();
  inline void clear_has_bvip();
  inline void set_has_is_server_mail();
  inline void clear_has_is_server_mail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::SG2G_Mail_SendMail* mail_;
  ::google::protobuf::int32 alv_;
  ::google::protobuf::int32 blv_;
  bool is_can_send_;
  bool is_server_mail_;
  ::google::protobuf::int32 avip_;
  ::google::protobuf::int32 bvip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SD2G_Check_Mail_Recivers_Exist_Rspone* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_Friend_Operate : public ::google::protobuf::Message {
 public:
  SG2D_Friend_Operate();
  virtual ~SG2D_Friend_Operate();

  SG2D_Friend_Operate(const SG2D_Friend_Operate& from);

  inline SG2D_Friend_Operate& operator=(const SG2D_Friend_Operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_Friend_Operate& default_instance();

  void Swap(SG2D_Friend_Operate* other);

  // implements Message ----------------------------------------------

  SG2D_Friend_Operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_Friend_Operate& from);
  void MergeFrom(const SG2D_Friend_Operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required uint64 friendid = 2;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendidFieldNumber = 2;
  inline ::google::protobuf::uint64 friendid() const;
  inline void set_friendid(::google::protobuf::uint64 value);

  // required int32 listtype = 3;
  inline bool has_listtype() const;
  inline void clear_listtype();
  static const int kListtypeFieldNumber = 3;
  inline ::google::protobuf::int32 listtype() const;
  inline void set_listtype(::google::protobuf::int32 value);

  // required int32 operate_type = 4;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 4;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional bool is_send_ap = 5;
  inline bool has_is_send_ap() const;
  inline void clear_is_send_ap();
  static const int kIsSendApFieldNumber = 5;
  inline bool is_send_ap() const;
  inline void set_is_send_ap(bool value);

  // optional bool ap_value = 6;
  inline bool has_ap_value() const;
  inline void clear_ap_value();
  static const int kApValueFieldNumber = 6;
  inline bool ap_value() const;
  inline void set_ap_value(bool value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_Friend_Operate)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_listtype();
  inline void clear_has_listtype();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_is_send_ap();
  inline void clear_has_is_send_ap();
  inline void set_has_ap_value();
  inline void clear_has_ap_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 friendid_;
  ::google::protobuf::int32 listtype_;
  ::google::protobuf::int32 operate_type_;
  bool is_send_ap_;
  bool ap_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_Friend_Operate* default_instance_;
};
// -------------------------------------------------------------------

class SD2G_Friend_Operate_Res : public ::google::protobuf::Message {
 public:
  SD2G_Friend_Operate_Res();
  virtual ~SD2G_Friend_Operate_Res();

  SD2G_Friend_Operate_Res(const SD2G_Friend_Operate_Res& from);

  inline SD2G_Friend_Operate_Res& operator=(const SD2G_Friend_Operate_Res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD2G_Friend_Operate_Res& default_instance();

  void Swap(SD2G_Friend_Operate_Res* other);

  // implements Message ----------------------------------------------

  SD2G_Friend_Operate_Res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD2G_Friend_Operate_Res& from);
  void MergeFrom(const SD2G_Friend_Operate_Res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.SG2D_Friend_Operate operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline const ::pb::SG2D_Friend_Operate& operate() const;
  inline ::pb::SG2D_Friend_Operate* mutable_operate();
  inline ::pb::SG2D_Friend_Operate* release_operate();
  inline void set_allocated_operate(::pb::SG2D_Friend_Operate* operate);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SD2G_Friend_Operate_Res)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::SG2D_Friend_Operate* operate_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SD2G_Friend_Operate_Res* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_Crusade_Stage : public ::google::protobuf::Message {
 public:
  SG2D_Crusade_Stage();
  virtual ~SG2D_Crusade_Stage();

  SG2D_Crusade_Stage(const SG2D_Crusade_Stage& from);

  inline SG2D_Crusade_Stage& operator=(const SG2D_Crusade_Stage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_Crusade_Stage& default_instance();

  void Swap(SG2D_Crusade_Stage* other);

  // implements Message ----------------------------------------------

  SG2D_Crusade_Stage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_Crusade_Stage& from);
  void MergeFrom(const SG2D_Crusade_Stage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 restReset = 1;
  inline bool has_restreset() const;
  inline void clear_restreset();
  static const int kRestResetFieldNumber = 1;
  inline ::google::protobuf::uint32 restreset() const;
  inline void set_restreset(::google::protobuf::uint32 value);

  // required uint64 currFuben = 2;
  inline bool has_currfuben() const;
  inline void clear_currfuben();
  static const int kCurrFubenFieldNumber = 2;
  inline ::google::protobuf::uint64 currfuben() const;
  inline void set_currfuben(::google::protobuf::uint64 value);

  // required uint64 currStage = 3;
  inline bool has_currstage() const;
  inline void clear_currstage();
  static const int kCurrStageFieldNumber = 3;
  inline ::google::protobuf::uint64 currstage() const;
  inline void set_currstage(::google::protobuf::uint64 value);

  // required uint32 isDead = 4;
  inline bool has_isdead() const;
  inline void clear_isdead();
  static const int kIsDeadFieldNumber = 4;
  inline ::google::protobuf::uint32 isdead() const;
  inline void set_isdead(::google::protobuf::uint32 value);

  // required uint32 addCharTimes = 5;
  inline bool has_addchartimes() const;
  inline void clear_addchartimes();
  static const int kAddCharTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 addchartimes() const;
  inline void set_addchartimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_Crusade_Stage)
 private:
  inline void set_has_restreset();
  inline void clear_has_restreset();
  inline void set_has_currfuben();
  inline void clear_has_currfuben();
  inline void set_has_currstage();
  inline void clear_has_currstage();
  inline void set_has_isdead();
  inline void clear_has_isdead();
  inline void set_has_addchartimes();
  inline void clear_has_addchartimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 currfuben_;
  ::google::protobuf::uint32 restreset_;
  ::google::protobuf::uint32 isdead_;
  ::google::protobuf::uint64 currstage_;
  ::google::protobuf::uint32 addchartimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SG2D_Crusade_Stage* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Select_Country_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Select_Country_Rsp();
  virtual ~GS2C_Select_Country_Rsp();

  GS2C_Select_Country_Rsp(const GS2C_Select_Country_Rsp& from);

  inline GS2C_Select_Country_Rsp& operator=(const GS2C_Select_Country_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Select_Country_Rsp& default_instance();

  void Swap(GS2C_Select_Country_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Select_Country_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Select_Country_Rsp& from);
  void MergeFrom(const GS2C_Select_Country_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Select_Country_Rsp)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Select_Country_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class SD2G_All_player_has_sync : public ::google::protobuf::Message {
 public:
  SD2G_All_player_has_sync();
  virtual ~SD2G_All_player_has_sync();

  SD2G_All_player_has_sync(const SD2G_All_player_has_sync& from);

  inline SD2G_All_player_has_sync& operator=(const SD2G_All_player_has_sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD2G_All_player_has_sync& default_instance();

  void Swap(SD2G_All_player_has_sync* other);

  // implements Message ----------------------------------------------

  SD2G_All_player_has_sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD2G_All_player_has_sync& from);
  void MergeFrom(const SD2G_All_player_has_sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:pb.SD2G_All_player_has_sync)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SD2G_All_player_has_sync* default_instance_;
};
// -------------------------------------------------------------------

class Activity_Occupy_City_Num : public ::google::protobuf::Message {
 public:
  Activity_Occupy_City_Num();
  virtual ~Activity_Occupy_City_Num();

  Activity_Occupy_City_Num(const Activity_Occupy_City_Num& from);

  inline Activity_Occupy_City_Num& operator=(const Activity_Occupy_City_Num& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Activity_Occupy_City_Num& default_instance();

  void Swap(Activity_Occupy_City_Num* other);

  // implements Message ----------------------------------------------

  Activity_Occupy_City_Num* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Activity_Occupy_City_Num& from);
  void MergeFrom(const Activity_Occupy_City_Num& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 city_num = 2;
  inline bool has_city_num() const;
  inline void clear_city_num();
  static const int kCityNumFieldNumber = 2;
  inline ::google::protobuf::uint32 city_num() const;
  inline void set_city_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Activity_Occupy_City_Num)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_city_num();
  inline void clear_has_city_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 city_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static Activity_Occupy_City_Num* default_instance_;
};
// -------------------------------------------------------------------

class SD2G_Activity_Occupy_City_Num : public ::google::protobuf::Message {
 public:
  SD2G_Activity_Occupy_City_Num();
  virtual ~SD2G_Activity_Occupy_City_Num();

  SD2G_Activity_Occupy_City_Num(const SD2G_Activity_Occupy_City_Num& from);

  inline SD2G_Activity_Occupy_City_Num& operator=(const SD2G_Activity_Occupy_City_Num& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD2G_Activity_Occupy_City_Num& default_instance();

  void Swap(SD2G_Activity_Occupy_City_Num* other);

  // implements Message ----------------------------------------------

  SD2G_Activity_Occupy_City_Num* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD2G_Activity_Occupy_City_Num& from);
  void MergeFrom(const SD2G_Activity_Occupy_City_Num& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Activity_Occupy_City_Num info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::pb::Activity_Occupy_City_Num& info(int index) const;
  inline ::pb::Activity_Occupy_City_Num* mutable_info(int index);
  inline ::pb::Activity_Occupy_City_Num* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Activity_Occupy_City_Num >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Activity_Occupy_City_Num >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:pb.SD2G_Activity_Occupy_City_Num)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Activity_Occupy_City_Num > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SD2G_Activity_Occupy_City_Num* default_instance_;
};
// -------------------------------------------------------------------

class SR2G_AwardTakePlayer : public ::google::protobuf::Message {
 public:
  SR2G_AwardTakePlayer();
  virtual ~SR2G_AwardTakePlayer();

  SR2G_AwardTakePlayer(const SR2G_AwardTakePlayer& from);

  inline SR2G_AwardTakePlayer& operator=(const SR2G_AwardTakePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SR2G_AwardTakePlayer& default_instance();

  void Swap(SR2G_AwardTakePlayer* other);

  // implements Message ----------------------------------------------

  SR2G_AwardTakePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SR2G_AwardTakePlayer& from);
  void MergeFrom(const SR2G_AwardTakePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // repeated .pb.PairValue rewards = 2;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::pb::PairValue& rewards(int index) const;
  inline ::pb::PairValue* mutable_rewards(int index);
  inline ::pb::PairValue* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:pb.SR2G_AwardTakePlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > rewards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_InterServer_2eproto();
  friend void protobuf_AssignDesc_InterServer_2eproto();
  friend void protobuf_ShutdownFile_InterServer_2eproto();

  void InitAsDefaultInstance();
  static SR2G_AwardTakePlayer* default_instance_;
};
// ===================================================================


// ===================================================================

// Address

// required string ip = 1;
inline bool Address::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Address::ip() const {
  return *ip_;
}
inline void Address::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Address::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Address::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Address::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 2;
inline bool Address::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& Address::port() const {
  return *port_;
}
inline void Address::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void Address::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void Address::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* Address::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetEventLogServersRet

// required .pb.Address addresses = 1;
inline bool GetEventLogServersRet::has_addresses() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetEventLogServersRet::set_has_addresses() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetEventLogServersRet::clear_has_addresses() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetEventLogServersRet::clear_addresses() {
  if (addresses_ != NULL) addresses_->::pb::Address::Clear();
  clear_has_addresses();
}
inline const ::pb::Address& GetEventLogServersRet::addresses() const {
  return addresses_ != NULL ? *addresses_ : *default_instance_->addresses_;
}
inline ::pb::Address* GetEventLogServersRet::mutable_addresses() {
  set_has_addresses();
  if (addresses_ == NULL) addresses_ = new ::pb::Address;
  return addresses_;
}
inline ::pb::Address* GetEventLogServersRet::release_addresses() {
  clear_has_addresses();
  ::pb::Address* temp = addresses_;
  addresses_ = NULL;
  return temp;
}
inline void GetEventLogServersRet::set_allocated_addresses(::pb::Address* addresses) {
  delete addresses_;
  addresses_ = addresses;
  if (addresses) {
    set_has_addresses();
  } else {
    clear_has_addresses();
  }
}

// -------------------------------------------------------------------

// PingInfo

// required uint64 time_ms = 1;
inline bool PingInfo::has_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PingInfo::set_has_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PingInfo::clear_has_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PingInfo::clear_time_ms() {
  time_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ms();
}
inline ::google::protobuf::uint64 PingInfo::time_ms() const {
  return time_ms_;
}
inline void PingInfo::set_time_ms(::google::protobuf::uint64 value) {
  set_has_time_ms();
  time_ms_ = value;
}

// optional uint64 delay_time_ms = 2;
inline bool PingInfo::has_delay_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PingInfo::set_has_delay_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PingInfo::clear_has_delay_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PingInfo::clear_delay_time_ms() {
  delay_time_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_delay_time_ms();
}
inline ::google::protobuf::uint64 PingInfo::delay_time_ms() const {
  return delay_time_ms_;
}
inline void PingInfo::set_delay_time_ms(::google::protobuf::uint64 value) {
  set_has_delay_time_ms();
  delay_time_ms_ = value;
}

// -------------------------------------------------------------------

// PongInfo

// required uint64 time_ms = 1;
inline bool PongInfo::has_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PongInfo::set_has_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PongInfo::clear_has_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PongInfo::clear_time_ms() {
  time_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ms();
}
inline ::google::protobuf::uint64 PongInfo::time_ms() const {
  return time_ms_;
}
inline void PongInfo::set_time_ms(::google::protobuf::uint64 value) {
  set_has_time_ms();
  time_ms_ = value;
}

// -------------------------------------------------------------------

// SG2C_RegisterInfo

// required int32 server_id = 1;
inline bool SG2C_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2C_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2C_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2C_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SG2C_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SG2C_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string ip = 2;
inline bool SG2C_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2C_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2C_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2C_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SG2C_RegisterInfo::ip() const {
  return *ip_;
}
inline void SG2C_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2C_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2C_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SG2C_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2C_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 3;
inline bool SG2C_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2C_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2C_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2C_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SG2C_RegisterInfo::port() const {
  return *port_;
}
inline void SG2C_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2C_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2C_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SG2C_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2C_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string names = 4;
inline int SG2C_RegisterInfo::names_size() const {
  return names_.size();
}
inline void SG2C_RegisterInfo::clear_names() {
  names_.Clear();
}
inline const ::std::string& SG2C_RegisterInfo::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* SG2C_RegisterInfo::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void SG2C_RegisterInfo::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void SG2C_RegisterInfo::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void SG2C_RegisterInfo::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_RegisterInfo::add_names() {
  return names_.Add();
}
inline void SG2C_RegisterInfo::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void SG2C_RegisterInfo::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void SG2C_RegisterInfo::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SG2C_RegisterInfo::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SG2C_RegisterInfo::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// SG2C_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SG2C_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2C_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2C_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2C_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SG2C_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SG2C_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 region_id = 2;
inline bool SG2C_RegisterInfoRet::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2C_RegisterInfoRet::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2C_RegisterInfoRet::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2C_RegisterInfoRet::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SG2C_RegisterInfoRet::region_id() const {
  return region_id_;
}
inline void SG2C_RegisterInfoRet::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional string web_url = 3;
inline bool SG2C_RegisterInfoRet::has_web_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2C_RegisterInfoRet::set_has_web_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2C_RegisterInfoRet::clear_has_web_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2C_RegisterInfoRet::clear_web_url() {
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    web_url_->clear();
  }
  clear_has_web_url();
}
inline const ::std::string& SG2C_RegisterInfoRet::web_url() const {
  return *web_url_;
}
inline void SG2C_RegisterInfoRet::set_web_url(const ::std::string& value) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(value);
}
inline void SG2C_RegisterInfoRet::set_web_url(const char* value) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(value);
}
inline void SG2C_RegisterInfoRet::set_web_url(const char* value, size_t size) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_RegisterInfoRet::mutable_web_url() {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  return web_url_;
}
inline ::std::string* SG2C_RegisterInfoRet::release_web_url() {
  clear_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = web_url_;
    web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2C_RegisterInfoRet::set_allocated_web_url(::std::string* web_url) {
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    delete web_url_;
  }
  if (web_url) {
    set_has_web_url();
    web_url_ = web_url;
  } else {
    clear_has_web_url();
    web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SG2C_GetLoinServersRet

// repeated .pb.Address addresses = 1;
inline int SG2C_GetLoinServersRet::addresses_size() const {
  return addresses_.size();
}
inline void SG2C_GetLoinServersRet::clear_addresses() {
  addresses_.Clear();
}
inline const ::pb::Address& SG2C_GetLoinServersRet::addresses(int index) const {
  return addresses_.Get(index);
}
inline ::pb::Address* SG2C_GetLoinServersRet::mutable_addresses(int index) {
  return addresses_.Mutable(index);
}
inline ::pb::Address* SG2C_GetLoinServersRet::add_addresses() {
  return addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Address >&
SG2C_GetLoinServersRet::addresses() const {
  return addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Address >*
SG2C_GetLoinServersRet::mutable_addresses() {
  return &addresses_;
}

// -------------------------------------------------------------------

// SG2C_GetCrossServersRet

// repeated .pb.Address addresses = 1;
inline int SG2C_GetCrossServersRet::addresses_size() const {
  return addresses_.size();
}
inline void SG2C_GetCrossServersRet::clear_addresses() {
  addresses_.Clear();
}
inline const ::pb::Address& SG2C_GetCrossServersRet::addresses(int index) const {
  return addresses_.Get(index);
}
inline ::pb::Address* SG2C_GetCrossServersRet::mutable_addresses(int index) {
  return addresses_.Mutable(index);
}
inline ::pb::Address* SG2C_GetCrossServersRet::add_addresses() {
  return addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Address >&
SG2C_GetCrossServersRet::addresses() const {
  return addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Address >*
SG2C_GetCrossServersRet::mutable_addresses() {
  return &addresses_;
}

// -------------------------------------------------------------------

// SG2C_Exchange_Gift_Code

// required uint64 player_id = 1;
inline bool SG2C_Exchange_Gift_Code::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2C_Exchange_Gift_Code::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2C_Exchange_Gift_Code::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2C_Exchange_Gift_Code::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2C_Exchange_Gift_Code::player_id() const {
  return player_id_;
}
inline void SG2C_Exchange_Gift_Code::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// required string gift_code = 2;
inline bool SG2C_Exchange_Gift_Code::has_gift_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2C_Exchange_Gift_Code::set_has_gift_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2C_Exchange_Gift_Code::clear_has_gift_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2C_Exchange_Gift_Code::clear_gift_code() {
  if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
    gift_code_->clear();
  }
  clear_has_gift_code();
}
inline const ::std::string& SG2C_Exchange_Gift_Code::gift_code() const {
  return *gift_code_;
}
inline void SG2C_Exchange_Gift_Code::set_gift_code(const ::std::string& value) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(value);
}
inline void SG2C_Exchange_Gift_Code::set_gift_code(const char* value) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(value);
}
inline void SG2C_Exchange_Gift_Code::set_gift_code(const char* value, size_t size) {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  gift_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_Exchange_Gift_Code::mutable_gift_code() {
  set_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    gift_code_ = new ::std::string;
  }
  return gift_code_;
}
inline ::std::string* SG2C_Exchange_Gift_Code::release_gift_code() {
  clear_has_gift_code();
  if (gift_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gift_code_;
    gift_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2C_Exchange_Gift_Code::set_allocated_gift_code(::std::string* gift_code) {
  if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
    delete gift_code_;
  }
  if (gift_code) {
    set_has_gift_code();
    gift_code_ = gift_code;
  } else {
    clear_has_gift_code();
    gift_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 channel = 3;
inline bool SG2C_Exchange_Gift_Code::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2C_Exchange_Gift_Code::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2C_Exchange_Gift_Code::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2C_Exchange_Gift_Code::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 SG2C_Exchange_Gift_Code::channel() const {
  return channel_;
}
inline void SG2C_Exchange_Gift_Code::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// SG2C_Exchange_Gift_Code_Ret

// required bool is_success = 1;
inline bool SG2C_Exchange_Gift_Code_Ret::has_is_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_has_is_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_is_success() {
  is_success_ = false;
  clear_has_is_success();
}
inline bool SG2C_Exchange_Gift_Code_Ret::is_success() const {
  return is_success_;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_is_success(bool value) {
  set_has_is_success();
  is_success_ = value;
}

// required uint64 player_id = 2;
inline bool SG2C_Exchange_Gift_Code_Ret::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2C_Exchange_Gift_Code_Ret::player_id() const {
  return player_id_;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string giftName = 3;
inline bool SG2C_Exchange_Gift_Code_Ret::has_giftname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_has_giftname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_has_giftname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_giftname() {
  if (giftname_ != &::google::protobuf::internal::kEmptyString) {
    giftname_->clear();
  }
  clear_has_giftname();
}
inline const ::std::string& SG2C_Exchange_Gift_Code_Ret::giftname() const {
  return *giftname_;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_giftname(const ::std::string& value) {
  set_has_giftname();
  if (giftname_ == &::google::protobuf::internal::kEmptyString) {
    giftname_ = new ::std::string;
  }
  giftname_->assign(value);
}
inline void SG2C_Exchange_Gift_Code_Ret::set_giftname(const char* value) {
  set_has_giftname();
  if (giftname_ == &::google::protobuf::internal::kEmptyString) {
    giftname_ = new ::std::string;
  }
  giftname_->assign(value);
}
inline void SG2C_Exchange_Gift_Code_Ret::set_giftname(const char* value, size_t size) {
  set_has_giftname();
  if (giftname_ == &::google::protobuf::internal::kEmptyString) {
    giftname_ = new ::std::string;
  }
  giftname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_Exchange_Gift_Code_Ret::mutable_giftname() {
  set_has_giftname();
  if (giftname_ == &::google::protobuf::internal::kEmptyString) {
    giftname_ = new ::std::string;
  }
  return giftname_;
}
inline ::std::string* SG2C_Exchange_Gift_Code_Ret::release_giftname() {
  clear_has_giftname();
  if (giftname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = giftname_;
    giftname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2C_Exchange_Gift_Code_Ret::set_allocated_giftname(::std::string* giftname) {
  if (giftname_ != &::google::protobuf::internal::kEmptyString) {
    delete giftname_;
  }
  if (giftname) {
    set_has_giftname();
    giftname_ = giftname;
  } else {
    clear_has_giftname();
    giftname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gifts = 4;
inline bool SG2C_Exchange_Gift_Code_Ret::has_gifts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_has_gifts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_has_gifts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_gifts() {
  if (gifts_ != &::google::protobuf::internal::kEmptyString) {
    gifts_->clear();
  }
  clear_has_gifts();
}
inline const ::std::string& SG2C_Exchange_Gift_Code_Ret::gifts() const {
  return *gifts_;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_gifts(const ::std::string& value) {
  set_has_gifts();
  if (gifts_ == &::google::protobuf::internal::kEmptyString) {
    gifts_ = new ::std::string;
  }
  gifts_->assign(value);
}
inline void SG2C_Exchange_Gift_Code_Ret::set_gifts(const char* value) {
  set_has_gifts();
  if (gifts_ == &::google::protobuf::internal::kEmptyString) {
    gifts_ = new ::std::string;
  }
  gifts_->assign(value);
}
inline void SG2C_Exchange_Gift_Code_Ret::set_gifts(const char* value, size_t size) {
  set_has_gifts();
  if (gifts_ == &::google::protobuf::internal::kEmptyString) {
    gifts_ = new ::std::string;
  }
  gifts_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_Exchange_Gift_Code_Ret::mutable_gifts() {
  set_has_gifts();
  if (gifts_ == &::google::protobuf::internal::kEmptyString) {
    gifts_ = new ::std::string;
  }
  return gifts_;
}
inline ::std::string* SG2C_Exchange_Gift_Code_Ret::release_gifts() {
  clear_has_gifts();
  if (gifts_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gifts_;
    gifts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2C_Exchange_Gift_Code_Ret::set_allocated_gifts(::std::string* gifts) {
  if (gifts_ != &::google::protobuf::internal::kEmptyString) {
    delete gifts_;
  }
  if (gifts) {
    set_has_gifts();
    gifts_ = gifts;
  } else {
    clear_has_gifts();
    gifts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 error_code = 5;
inline bool SG2C_Exchange_Gift_Code_Ret::has_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_has_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2C_Exchange_Gift_Code_Ret::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 SG2C_Exchange_Gift_Code_Ret::error_code() const {
  return error_code_;
}
inline void SG2C_Exchange_Gift_Code_Ret::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// SG2C_FeedBack

// required uint64 playerId = 1;
inline bool SG2C_FeedBack::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2C_FeedBack::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2C_FeedBack::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2C_FeedBack::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 SG2C_FeedBack::playerid() const {
  return playerid_;
}
inline void SG2C_FeedBack::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string player_name = 2;
inline bool SG2C_FeedBack::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2C_FeedBack::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2C_FeedBack::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2C_FeedBack::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& SG2C_FeedBack::player_name() const {
  return *player_name_;
}
inline void SG2C_FeedBack::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void SG2C_FeedBack::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void SG2C_FeedBack::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_FeedBack::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* SG2C_FeedBack::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2C_FeedBack::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string feedback = 3;
inline bool SG2C_FeedBack::has_feedback() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2C_FeedBack::set_has_feedback() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2C_FeedBack::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2C_FeedBack::clear_feedback() {
  if (feedback_ != &::google::protobuf::internal::kEmptyString) {
    feedback_->clear();
  }
  clear_has_feedback();
}
inline const ::std::string& SG2C_FeedBack::feedback() const {
  return *feedback_;
}
inline void SG2C_FeedBack::set_feedback(const ::std::string& value) {
  set_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(value);
}
inline void SG2C_FeedBack::set_feedback(const char* value) {
  set_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(value);
}
inline void SG2C_FeedBack::set_feedback(const char* value, size_t size) {
  set_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2C_FeedBack::mutable_feedback() {
  set_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    feedback_ = new ::std::string;
  }
  return feedback_;
}
inline ::std::string* SG2C_FeedBack::release_feedback() {
  clear_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = feedback_;
    feedback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2C_FeedBack::set_allocated_feedback(::std::string* feedback) {
  if (feedback_ != &::google::protobuf::internal::kEmptyString) {
    delete feedback_;
  }
  if (feedback) {
    set_has_feedback();
    feedback_ = feedback;
  } else {
    clear_has_feedback();
    feedback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SG2C_FeedBack_Ret

// required bool is_success = 1;
inline bool SG2C_FeedBack_Ret::has_is_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2C_FeedBack_Ret::set_has_is_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2C_FeedBack_Ret::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2C_FeedBack_Ret::clear_is_success() {
  is_success_ = false;
  clear_has_is_success();
}
inline bool SG2C_FeedBack_Ret::is_success() const {
  return is_success_;
}
inline void SG2C_FeedBack_Ret::set_is_success(bool value) {
  set_has_is_success();
  is_success_ = value;
}

// required uint64 player_id = 2;
inline bool SG2C_FeedBack_Ret::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2C_FeedBack_Ret::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2C_FeedBack_Ret::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2C_FeedBack_Ret::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2C_FeedBack_Ret::player_id() const {
  return player_id_;
}
inline void SG2C_FeedBack_Ret::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 error_code = 3;
inline bool SG2C_FeedBack_Ret::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2C_FeedBack_Ret::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2C_FeedBack_Ret::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2C_FeedBack_Ret::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 SG2C_FeedBack_Ret::error_code() const {
  return error_code_;
}
inline void SG2C_FeedBack_Ret::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// SC2G_activity_proto

// optional uint64 table_id = 1;
inline bool SC2G_activity_proto::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC2G_activity_proto::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC2G_activity_proto::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC2G_activity_proto::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::uint64 SC2G_activity_proto::table_id() const {
  return table_id_;
}
inline void SC2G_activity_proto::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional uint32 act_type_id = 2;
inline bool SC2G_activity_proto::has_act_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC2G_activity_proto::set_has_act_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC2G_activity_proto::clear_has_act_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC2G_activity_proto::clear_act_type_id() {
  act_type_id_ = 0u;
  clear_has_act_type_id();
}
inline ::google::protobuf::uint32 SC2G_activity_proto::act_type_id() const {
  return act_type_id_;
}
inline void SC2G_activity_proto::set_act_type_id(::google::protobuf::uint32 value) {
  set_has_act_type_id();
  act_type_id_ = value;
}

// optional uint32 reward_type = 3;
inline bool SC2G_activity_proto::has_reward_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC2G_activity_proto::set_has_reward_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC2G_activity_proto::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC2G_activity_proto::clear_reward_type() {
  reward_type_ = 0u;
  clear_has_reward_type();
}
inline ::google::protobuf::uint32 SC2G_activity_proto::reward_type() const {
  return reward_type_;
}
inline void SC2G_activity_proto::set_reward_type(::google::protobuf::uint32 value) {
  set_has_reward_type();
  reward_type_ = value;
}

// -------------------------------------------------------------------

// SC2G_activity_plan

// optional uint64 table_id = 12;
inline bool SC2G_activity_plan::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC2G_activity_plan::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC2G_activity_plan::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC2G_activity_plan::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::uint64 SC2G_activity_plan::table_id() const {
  return table_id_;
}
inline void SC2G_activity_plan::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional uint32 activity_id = 1;
inline bool SC2G_activity_plan::has_activity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC2G_activity_plan::set_has_activity_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC2G_activity_plan::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC2G_activity_plan::clear_activity_id() {
  activity_id_ = 0u;
  clear_has_activity_id();
}
inline ::google::protobuf::uint32 SC2G_activity_plan::activity_id() const {
  return activity_id_;
}
inline void SC2G_activity_plan::set_activity_id(::google::protobuf::uint32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// optional uint32 open_way = 2;
inline bool SC2G_activity_plan::has_open_way() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC2G_activity_plan::set_has_open_way() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC2G_activity_plan::clear_has_open_way() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC2G_activity_plan::clear_open_way() {
  open_way_ = 0u;
  clear_has_open_way();
}
inline ::google::protobuf::uint32 SC2G_activity_plan::open_way() const {
  return open_way_;
}
inline void SC2G_activity_plan::set_open_way(::google::protobuf::uint32 value) {
  set_has_open_way();
  open_way_ = value;
}

// optional uint32 start_time = 3;
inline bool SC2G_activity_plan::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC2G_activity_plan::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC2G_activity_plan::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC2G_activity_plan::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 SC2G_activity_plan::start_time() const {
  return start_time_;
}
inline void SC2G_activity_plan::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint32 last_time = 4;
inline bool SC2G_activity_plan::has_last_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC2G_activity_plan::set_has_last_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC2G_activity_plan::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC2G_activity_plan::clear_last_time() {
  last_time_ = 0u;
  clear_has_last_time();
}
inline ::google::protobuf::uint32 SC2G_activity_plan::last_time() const {
  return last_time_;
}
inline void SC2G_activity_plan::set_last_time(::google::protobuf::uint32 value) {
  set_has_last_time();
  last_time_ = value;
}

// optional uint32 show_time = 5;
inline bool SC2G_activity_plan::has_show_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SC2G_activity_plan::set_has_show_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SC2G_activity_plan::clear_has_show_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SC2G_activity_plan::clear_show_time() {
  show_time_ = 0u;
  clear_has_show_time();
}
inline ::google::protobuf::uint32 SC2G_activity_plan::show_time() const {
  return show_time_;
}
inline void SC2G_activity_plan::set_show_time(::google::protobuf::uint32 value) {
  set_has_show_time();
  show_time_ = value;
}

// optional uint64 start_date = 6;
inline bool SC2G_activity_plan::has_start_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SC2G_activity_plan::set_has_start_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SC2G_activity_plan::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SC2G_activity_plan::clear_start_date() {
  start_date_ = GOOGLE_ULONGLONG(0);
  clear_has_start_date();
}
inline ::google::protobuf::uint64 SC2G_activity_plan::start_date() const {
  return start_date_;
}
inline void SC2G_activity_plan::set_start_date(::google::protobuf::uint64 value) {
  set_has_start_date();
  start_date_ = value;
}

// optional uint64 end_date = 7;
inline bool SC2G_activity_plan::has_end_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SC2G_activity_plan::set_has_end_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SC2G_activity_plan::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SC2G_activity_plan::clear_end_date() {
  end_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_date();
}
inline ::google::protobuf::uint64 SC2G_activity_plan::end_date() const {
  return end_date_;
}
inline void SC2G_activity_plan::set_end_date(::google::protobuf::uint64 value) {
  set_has_end_date();
  end_date_ = value;
}

// optional uint64 end_show_date = 8;
inline bool SC2G_activity_plan::has_end_show_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SC2G_activity_plan::set_has_end_show_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SC2G_activity_plan::clear_has_end_show_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SC2G_activity_plan::clear_end_show_date() {
  end_show_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_show_date();
}
inline ::google::protobuf::uint64 SC2G_activity_plan::end_show_date() const {
  return end_show_date_;
}
inline void SC2G_activity_plan::set_end_show_date(::google::protobuf::uint64 value) {
  set_has_end_show_date();
  end_show_date_ = value;
}

// optional string stage_area = 9;
inline bool SC2G_activity_plan::has_stage_area() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SC2G_activity_plan::set_has_stage_area() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SC2G_activity_plan::clear_has_stage_area() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SC2G_activity_plan::clear_stage_area() {
  if (stage_area_ != &::google::protobuf::internal::kEmptyString) {
    stage_area_->clear();
  }
  clear_has_stage_area();
}
inline const ::std::string& SC2G_activity_plan::stage_area() const {
  return *stage_area_;
}
inline void SC2G_activity_plan::set_stage_area(const ::std::string& value) {
  set_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    stage_area_ = new ::std::string;
  }
  stage_area_->assign(value);
}
inline void SC2G_activity_plan::set_stage_area(const char* value) {
  set_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    stage_area_ = new ::std::string;
  }
  stage_area_->assign(value);
}
inline void SC2G_activity_plan::set_stage_area(const char* value, size_t size) {
  set_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    stage_area_ = new ::std::string;
  }
  stage_area_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SC2G_activity_plan::mutable_stage_area() {
  set_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    stage_area_ = new ::std::string;
  }
  return stage_area_;
}
inline ::std::string* SC2G_activity_plan::release_stage_area() {
  clear_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stage_area_;
    stage_area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SC2G_activity_plan::set_allocated_stage_area(::std::string* stage_area) {
  if (stage_area_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_area_;
  }
  if (stage_area) {
    set_has_stage_area();
    stage_area_ = stage_area;
  } else {
    clear_has_stage_area();
    stage_area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 need_greater_than_open = 10;
inline bool SC2G_activity_plan::has_need_greater_than_open() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SC2G_activity_plan::set_has_need_greater_than_open() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SC2G_activity_plan::clear_has_need_greater_than_open() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SC2G_activity_plan::clear_need_greater_than_open() {
  need_greater_than_open_ = 0u;
  clear_has_need_greater_than_open();
}
inline ::google::protobuf::uint32 SC2G_activity_plan::need_greater_than_open() const {
  return need_greater_than_open_;
}
inline void SC2G_activity_plan::set_need_greater_than_open(::google::protobuf::uint32 value) {
  set_has_need_greater_than_open();
  need_greater_than_open_ = value;
}

// optional uint32 need_less_than_open = 11;
inline bool SC2G_activity_plan::has_need_less_than_open() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SC2G_activity_plan::set_has_need_less_than_open() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SC2G_activity_plan::clear_has_need_less_than_open() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SC2G_activity_plan::clear_need_less_than_open() {
  need_less_than_open_ = 0u;
  clear_has_need_less_than_open();
}
inline ::google::protobuf::uint32 SC2G_activity_plan::need_less_than_open() const {
  return need_less_than_open_;
}
inline void SC2G_activity_plan::set_need_less_than_open(::google::protobuf::uint32 value) {
  set_has_need_less_than_open();
  need_less_than_open_ = value;
}

// -------------------------------------------------------------------

// SC2G_server_open_time

// optional uint64 table_id = 3;
inline bool SC2G_server_open_time::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC2G_server_open_time::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC2G_server_open_time::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC2G_server_open_time::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::uint64 SC2G_server_open_time::table_id() const {
  return table_id_;
}
inline void SC2G_server_open_time::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional uint32 server_id = 1;
inline bool SC2G_server_open_time::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC2G_server_open_time::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC2G_server_open_time::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC2G_server_open_time::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 SC2G_server_open_time::server_id() const {
  return server_id_;
}
inline void SC2G_server_open_time::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint64 open_time = 2;
inline bool SC2G_server_open_time::has_open_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC2G_server_open_time::set_has_open_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC2G_server_open_time::clear_has_open_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC2G_server_open_time::clear_open_time() {
  open_time_ = GOOGLE_ULONGLONG(0);
  clear_has_open_time();
}
inline ::google::protobuf::uint64 SC2G_server_open_time::open_time() const {
  return open_time_;
}
inline void SC2G_server_open_time::set_open_time(::google::protobuf::uint64 value) {
  set_has_open_time();
  open_time_ = value;
}

// -------------------------------------------------------------------

// SC2G_activity_reward

// optional uint64 table_id = 1;
inline bool SC2G_activity_reward::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC2G_activity_reward::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC2G_activity_reward::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC2G_activity_reward::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::uint64 SC2G_activity_reward::table_id() const {
  return table_id_;
}
inline void SC2G_activity_reward::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional uint32 activity_id = 2;
inline bool SC2G_activity_reward::has_activity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC2G_activity_reward::set_has_activity_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC2G_activity_reward::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC2G_activity_reward::clear_activity_id() {
  activity_id_ = 0u;
  clear_has_activity_id();
}
inline ::google::protobuf::uint32 SC2G_activity_reward::activity_id() const {
  return activity_id_;
}
inline void SC2G_activity_reward::set_activity_id(::google::protobuf::uint32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// optional uint32 cost_price = 3;
inline bool SC2G_activity_reward::has_cost_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC2G_activity_reward::set_has_cost_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC2G_activity_reward::clear_has_cost_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC2G_activity_reward::clear_cost_price() {
  cost_price_ = 0u;
  clear_has_cost_price();
}
inline ::google::protobuf::uint32 SC2G_activity_reward::cost_price() const {
  return cost_price_;
}
inline void SC2G_activity_reward::set_cost_price(::google::protobuf::uint32 value) {
  set_has_cost_price();
  cost_price_ = value;
}

// optional uint32 is_has_discount = 4;
inline bool SC2G_activity_reward::has_is_has_discount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC2G_activity_reward::set_has_is_has_discount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC2G_activity_reward::clear_has_is_has_discount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC2G_activity_reward::clear_is_has_discount() {
  is_has_discount_ = 0u;
  clear_has_is_has_discount();
}
inline ::google::protobuf::uint32 SC2G_activity_reward::is_has_discount() const {
  return is_has_discount_;
}
inline void SC2G_activity_reward::set_is_has_discount(::google::protobuf::uint32 value) {
  set_has_is_has_discount();
  is_has_discount_ = value;
}

// optional uint32 cost_discount = 5;
inline bool SC2G_activity_reward::has_cost_discount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC2G_activity_reward::set_has_cost_discount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC2G_activity_reward::clear_has_cost_discount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC2G_activity_reward::clear_cost_discount() {
  cost_discount_ = 0u;
  clear_has_cost_discount();
}
inline ::google::protobuf::uint32 SC2G_activity_reward::cost_discount() const {
  return cost_discount_;
}
inline void SC2G_activity_reward::set_cost_discount(::google::protobuf::uint32 value) {
  set_has_cost_discount();
  cost_discount_ = value;
}

// optional uint32 conditon = 6;
inline bool SC2G_activity_reward::has_conditon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SC2G_activity_reward::set_has_conditon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SC2G_activity_reward::clear_has_conditon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SC2G_activity_reward::clear_conditon() {
  conditon_ = 0u;
  clear_has_conditon();
}
inline ::google::protobuf::uint32 SC2G_activity_reward::conditon() const {
  return conditon_;
}
inline void SC2G_activity_reward::set_conditon(::google::protobuf::uint32 value) {
  set_has_conditon();
  conditon_ = value;
}

// optional string reward_list = 7;
inline bool SC2G_activity_reward::has_reward_list() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SC2G_activity_reward::set_has_reward_list() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SC2G_activity_reward::clear_has_reward_list() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SC2G_activity_reward::clear_reward_list() {
  if (reward_list_ != &::google::protobuf::internal::kEmptyString) {
    reward_list_->clear();
  }
  clear_has_reward_list();
}
inline const ::std::string& SC2G_activity_reward::reward_list() const {
  return *reward_list_;
}
inline void SC2G_activity_reward::set_reward_list(const ::std::string& value) {
  set_has_reward_list();
  if (reward_list_ == &::google::protobuf::internal::kEmptyString) {
    reward_list_ = new ::std::string;
  }
  reward_list_->assign(value);
}
inline void SC2G_activity_reward::set_reward_list(const char* value) {
  set_has_reward_list();
  if (reward_list_ == &::google::protobuf::internal::kEmptyString) {
    reward_list_ = new ::std::string;
  }
  reward_list_->assign(value);
}
inline void SC2G_activity_reward::set_reward_list(const char* value, size_t size) {
  set_has_reward_list();
  if (reward_list_ == &::google::protobuf::internal::kEmptyString) {
    reward_list_ = new ::std::string;
  }
  reward_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SC2G_activity_reward::mutable_reward_list() {
  set_has_reward_list();
  if (reward_list_ == &::google::protobuf::internal::kEmptyString) {
    reward_list_ = new ::std::string;
  }
  return reward_list_;
}
inline ::std::string* SC2G_activity_reward::release_reward_list() {
  clear_has_reward_list();
  if (reward_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_list_;
    reward_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SC2G_activity_reward::set_allocated_reward_list(::std::string* reward_list) {
  if (reward_list_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_list_;
  }
  if (reward_list) {
    set_has_reward_list();
    reward_list_ = reward_list;
  } else {
    clear_has_reward_list();
    reward_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SC2G_activity_package

// repeated .pb.SC2G_activity_proto activity_proto = 1;
inline int SC2G_activity_package::activity_proto_size() const {
  return activity_proto_.size();
}
inline void SC2G_activity_package::clear_activity_proto() {
  activity_proto_.Clear();
}
inline const ::pb::SC2G_activity_proto& SC2G_activity_package::activity_proto(int index) const {
  return activity_proto_.Get(index);
}
inline ::pb::SC2G_activity_proto* SC2G_activity_package::mutable_activity_proto(int index) {
  return activity_proto_.Mutable(index);
}
inline ::pb::SC2G_activity_proto* SC2G_activity_package::add_activity_proto() {
  return activity_proto_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_proto >&
SC2G_activity_package::activity_proto() const {
  return activity_proto_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_proto >*
SC2G_activity_package::mutable_activity_proto() {
  return &activity_proto_;
}

// repeated .pb.SC2G_activity_plan activity_plan = 2;
inline int SC2G_activity_package::activity_plan_size() const {
  return activity_plan_.size();
}
inline void SC2G_activity_package::clear_activity_plan() {
  activity_plan_.Clear();
}
inline const ::pb::SC2G_activity_plan& SC2G_activity_package::activity_plan(int index) const {
  return activity_plan_.Get(index);
}
inline ::pb::SC2G_activity_plan* SC2G_activity_package::mutable_activity_plan(int index) {
  return activity_plan_.Mutable(index);
}
inline ::pb::SC2G_activity_plan* SC2G_activity_package::add_activity_plan() {
  return activity_plan_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_plan >&
SC2G_activity_package::activity_plan() const {
  return activity_plan_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_plan >*
SC2G_activity_package::mutable_activity_plan() {
  return &activity_plan_;
}

// repeated .pb.SC2G_server_open_time server_open_time = 3;
inline int SC2G_activity_package::server_open_time_size() const {
  return server_open_time_.size();
}
inline void SC2G_activity_package::clear_server_open_time() {
  server_open_time_.Clear();
}
inline const ::pb::SC2G_server_open_time& SC2G_activity_package::server_open_time(int index) const {
  return server_open_time_.Get(index);
}
inline ::pb::SC2G_server_open_time* SC2G_activity_package::mutable_server_open_time(int index) {
  return server_open_time_.Mutable(index);
}
inline ::pb::SC2G_server_open_time* SC2G_activity_package::add_server_open_time() {
  return server_open_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SC2G_server_open_time >&
SC2G_activity_package::server_open_time() const {
  return server_open_time_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SC2G_server_open_time >*
SC2G_activity_package::mutable_server_open_time() {
  return &server_open_time_;
}

// repeated .pb.SC2G_activity_reward activity_reward = 4;
inline int SC2G_activity_package::activity_reward_size() const {
  return activity_reward_.size();
}
inline void SC2G_activity_package::clear_activity_reward() {
  activity_reward_.Clear();
}
inline const ::pb::SC2G_activity_reward& SC2G_activity_package::activity_reward(int index) const {
  return activity_reward_.Get(index);
}
inline ::pb::SC2G_activity_reward* SC2G_activity_package::mutable_activity_reward(int index) {
  return activity_reward_.Mutable(index);
}
inline ::pb::SC2G_activity_reward* SC2G_activity_package::add_activity_reward() {
  return activity_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_reward >&
SC2G_activity_package::activity_reward() const {
  return activity_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SC2G_activity_reward >*
SC2G_activity_package::mutable_activity_reward() {
  return &activity_reward_;
}

// -------------------------------------------------------------------

// SC2G_activity_package_Update

// required .pb.SC2G_activity_package all_info = 1;
inline bool SC2G_activity_package_Update::has_all_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC2G_activity_package_Update::set_has_all_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC2G_activity_package_Update::clear_has_all_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC2G_activity_package_Update::clear_all_info() {
  if (all_info_ != NULL) all_info_->::pb::SC2G_activity_package::Clear();
  clear_has_all_info();
}
inline const ::pb::SC2G_activity_package& SC2G_activity_package_Update::all_info() const {
  return all_info_ != NULL ? *all_info_ : *default_instance_->all_info_;
}
inline ::pb::SC2G_activity_package* SC2G_activity_package_Update::mutable_all_info() {
  set_has_all_info();
  if (all_info_ == NULL) all_info_ = new ::pb::SC2G_activity_package;
  return all_info_;
}
inline ::pb::SC2G_activity_package* SC2G_activity_package_Update::release_all_info() {
  clear_has_all_info();
  ::pb::SC2G_activity_package* temp = all_info_;
  all_info_ = NULL;
  return temp;
}
inline void SC2G_activity_package_Update::set_allocated_all_info(::pb::SC2G_activity_package* all_info) {
  delete all_info_;
  all_info_ = all_info;
  if (all_info) {
    set_has_all_info();
  } else {
    clear_has_all_info();
  }
}

// required uint32 update = 2;
inline bool SC2G_activity_package_Update::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC2G_activity_package_Update::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC2G_activity_package_Update::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC2G_activity_package_Update::clear_update() {
  update_ = 0u;
  clear_has_update();
}
inline ::google::protobuf::uint32 SC2G_activity_package_Update::update() const {
  return update_;
}
inline void SC2G_activity_package_Update::set_update(::google::protobuf::uint32 value) {
  set_has_update();
  update_ = value;
}

// -------------------------------------------------------------------

// SC2G_ReloadPayItem

// optional int32 region_id = 1;
inline bool SC2G_ReloadPayItem::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC2G_ReloadPayItem::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC2G_ReloadPayItem::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC2G_ReloadPayItem::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SC2G_ReloadPayItem::region_id() const {
  return region_id_;
}
inline void SC2G_ReloadPayItem::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// -------------------------------------------------------------------

// MSG_activity_update_info

// required uint32 activity_id = 1;
inline bool MSG_activity_update_info::has_activity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_activity_update_info::set_has_activity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_activity_update_info::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_activity_update_info::clear_activity_id() {
  activity_id_ = 0u;
  clear_has_activity_id();
}
inline ::google::protobuf::uint32 MSG_activity_update_info::activity_id() const {
  return activity_id_;
}
inline void MSG_activity_update_info::set_activity_id(::google::protobuf::uint32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// required uint32 open_way = 2;
inline bool MSG_activity_update_info::has_open_way() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_activity_update_info::set_has_open_way() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_activity_update_info::clear_has_open_way() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_activity_update_info::clear_open_way() {
  open_way_ = 0u;
  clear_has_open_way();
}
inline ::google::protobuf::uint32 MSG_activity_update_info::open_way() const {
  return open_way_;
}
inline void MSG_activity_update_info::set_open_way(::google::protobuf::uint32 value) {
  set_has_open_way();
  open_way_ = value;
}

// optional uint32 start_time = 3;
inline bool MSG_activity_update_info::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_activity_update_info::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_activity_update_info::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_activity_update_info::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 MSG_activity_update_info::start_time() const {
  return start_time_;
}
inline void MSG_activity_update_info::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint32 last_time = 4;
inline bool MSG_activity_update_info::has_last_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSG_activity_update_info::set_has_last_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSG_activity_update_info::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSG_activity_update_info::clear_last_time() {
  last_time_ = 0u;
  clear_has_last_time();
}
inline ::google::protobuf::uint32 MSG_activity_update_info::last_time() const {
  return last_time_;
}
inline void MSG_activity_update_info::set_last_time(::google::protobuf::uint32 value) {
  set_has_last_time();
  last_time_ = value;
}

// optional uint32 show_time = 5;
inline bool MSG_activity_update_info::has_show_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MSG_activity_update_info::set_has_show_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MSG_activity_update_info::clear_has_show_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MSG_activity_update_info::clear_show_time() {
  show_time_ = 0u;
  clear_has_show_time();
}
inline ::google::protobuf::uint32 MSG_activity_update_info::show_time() const {
  return show_time_;
}
inline void MSG_activity_update_info::set_show_time(::google::protobuf::uint32 value) {
  set_has_show_time();
  show_time_ = value;
}

// optional uint64 start_date = 6;
inline bool MSG_activity_update_info::has_start_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MSG_activity_update_info::set_has_start_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MSG_activity_update_info::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MSG_activity_update_info::clear_start_date() {
  start_date_ = GOOGLE_ULONGLONG(0);
  clear_has_start_date();
}
inline ::google::protobuf::uint64 MSG_activity_update_info::start_date() const {
  return start_date_;
}
inline void MSG_activity_update_info::set_start_date(::google::protobuf::uint64 value) {
  set_has_start_date();
  start_date_ = value;
}

// optional uint64 end_date = 7;
inline bool MSG_activity_update_info::has_end_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MSG_activity_update_info::set_has_end_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MSG_activity_update_info::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MSG_activity_update_info::clear_end_date() {
  end_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_date();
}
inline ::google::protobuf::uint64 MSG_activity_update_info::end_date() const {
  return end_date_;
}
inline void MSG_activity_update_info::set_end_date(::google::protobuf::uint64 value) {
  set_has_end_date();
  end_date_ = value;
}

// optional uint64 end_show_date = 8;
inline bool MSG_activity_update_info::has_end_show_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MSG_activity_update_info::set_has_end_show_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MSG_activity_update_info::clear_has_end_show_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MSG_activity_update_info::clear_end_show_date() {
  end_show_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_show_date();
}
inline ::google::protobuf::uint64 MSG_activity_update_info::end_show_date() const {
  return end_show_date_;
}
inline void MSG_activity_update_info::set_end_show_date(::google::protobuf::uint64 value) {
  set_has_end_show_date();
  end_show_date_ = value;
}

// optional string stage_area = 9;
inline bool MSG_activity_update_info::has_stage_area() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MSG_activity_update_info::set_has_stage_area() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MSG_activity_update_info::clear_has_stage_area() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MSG_activity_update_info::clear_stage_area() {
  if (stage_area_ != &::google::protobuf::internal::kEmptyString) {
    stage_area_->clear();
  }
  clear_has_stage_area();
}
inline const ::std::string& MSG_activity_update_info::stage_area() const {
  return *stage_area_;
}
inline void MSG_activity_update_info::set_stage_area(const ::std::string& value) {
  set_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    stage_area_ = new ::std::string;
  }
  stage_area_->assign(value);
}
inline void MSG_activity_update_info::set_stage_area(const char* value) {
  set_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    stage_area_ = new ::std::string;
  }
  stage_area_->assign(value);
}
inline void MSG_activity_update_info::set_stage_area(const char* value, size_t size) {
  set_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    stage_area_ = new ::std::string;
  }
  stage_area_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_activity_update_info::mutable_stage_area() {
  set_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    stage_area_ = new ::std::string;
  }
  return stage_area_;
}
inline ::std::string* MSG_activity_update_info::release_stage_area() {
  clear_has_stage_area();
  if (stage_area_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stage_area_;
    stage_area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MSG_activity_update_info::set_allocated_stage_area(::std::string* stage_area) {
  if (stage_area_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_area_;
  }
  if (stage_area) {
    set_has_stage_area();
    stage_area_ = stage_area;
  } else {
    clear_has_stage_area();
    stage_area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 need_greater_than_open = 10;
inline bool MSG_activity_update_info::has_need_greater_than_open() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MSG_activity_update_info::set_has_need_greater_than_open() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MSG_activity_update_info::clear_has_need_greater_than_open() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MSG_activity_update_info::clear_need_greater_than_open() {
  need_greater_than_open_ = 0u;
  clear_has_need_greater_than_open();
}
inline ::google::protobuf::uint32 MSG_activity_update_info::need_greater_than_open() const {
  return need_greater_than_open_;
}
inline void MSG_activity_update_info::set_need_greater_than_open(::google::protobuf::uint32 value) {
  set_has_need_greater_than_open();
  need_greater_than_open_ = value;
}

// optional uint32 need_less_than_open = 11;
inline bool MSG_activity_update_info::has_need_less_than_open() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MSG_activity_update_info::set_has_need_less_than_open() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MSG_activity_update_info::clear_has_need_less_than_open() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MSG_activity_update_info::clear_need_less_than_open() {
  need_less_than_open_ = 0u;
  clear_has_need_less_than_open();
}
inline ::google::protobuf::uint32 MSG_activity_update_info::need_less_than_open() const {
  return need_less_than_open_;
}
inline void MSG_activity_update_info::set_need_less_than_open(::google::protobuf::uint32 value) {
  set_has_need_less_than_open();
  need_less_than_open_ = value;
}

// -------------------------------------------------------------------

// SG2E_RegisterInfo

// required int32 region_id = 1;
inline bool SG2E_RegisterInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2E_RegisterInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2E_RegisterInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2E_RegisterInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SG2E_RegisterInfo::region_id() const {
  return region_id_;
}
inline void SG2E_RegisterInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required int32 server_id = 2;
inline bool SG2E_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2E_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2E_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2E_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SG2E_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SG2E_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string ip = 3;
inline bool SG2E_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2E_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2E_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2E_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SG2E_RegisterInfo::ip() const {
  return *ip_;
}
inline void SG2E_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2E_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2E_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2E_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SG2E_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2E_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 4;
inline bool SG2E_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2E_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2E_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2E_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SG2E_RegisterInfo::port() const {
  return *port_;
}
inline void SG2E_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2E_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2E_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2E_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SG2E_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2E_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SG2E_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SG2E_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2E_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2E_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2E_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SG2E_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SG2E_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SG2B_RegisterInfo

// required int32 server_id = 1;
inline bool SG2B_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2B_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2B_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2B_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SG2B_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SG2B_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 region_id = 2;
inline bool SG2B_RegisterInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2B_RegisterInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2B_RegisterInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2B_RegisterInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SG2B_RegisterInfo::region_id() const {
  return region_id_;
}
inline void SG2B_RegisterInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required string ip = 3;
inline bool SG2B_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2B_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2B_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2B_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SG2B_RegisterInfo::ip() const {
  return *ip_;
}
inline void SG2B_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2B_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2B_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2B_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SG2B_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2B_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 4;
inline bool SG2B_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2B_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2B_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2B_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SG2B_RegisterInfo::port() const {
  return *port_;
}
inline void SG2B_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2B_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2B_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2B_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SG2B_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2B_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string names = 5;
inline int SG2B_RegisterInfo::names_size() const {
  return names_.size();
}
inline void SG2B_RegisterInfo::clear_names() {
  names_.Clear();
}
inline const ::std::string& SG2B_RegisterInfo::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* SG2B_RegisterInfo::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void SG2B_RegisterInfo::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void SG2B_RegisterInfo::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void SG2B_RegisterInfo::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2B_RegisterInfo::add_names() {
  return names_.Add();
}
inline void SG2B_RegisterInfo::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void SG2B_RegisterInfo::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void SG2B_RegisterInfo::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SG2B_RegisterInfo::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SG2B_RegisterInfo::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// SG2B_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SG2B_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2B_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2B_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2B_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SG2B_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SG2B_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SG2R_RegisterInfo

// required int32 server_id = 1;
inline bool SG2R_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2R_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2R_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2R_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SG2R_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SG2R_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 region_id = 2;
inline bool SG2R_RegisterInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2R_RegisterInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2R_RegisterInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2R_RegisterInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SG2R_RegisterInfo::region_id() const {
  return region_id_;
}
inline void SG2R_RegisterInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required string ip = 3;
inline bool SG2R_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2R_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2R_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2R_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SG2R_RegisterInfo::ip() const {
  return *ip_;
}
inline void SG2R_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2R_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2R_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2R_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SG2R_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2R_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 4;
inline bool SG2R_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2R_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2R_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2R_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SG2R_RegisterInfo::port() const {
  return *port_;
}
inline void SG2R_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2R_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2R_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2R_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SG2R_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2R_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string names = 5;
inline int SG2R_RegisterInfo::names_size() const {
  return names_.size();
}
inline void SG2R_RegisterInfo::clear_names() {
  names_.Clear();
}
inline const ::std::string& SG2R_RegisterInfo::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* SG2R_RegisterInfo::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void SG2R_RegisterInfo::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void SG2R_RegisterInfo::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void SG2R_RegisterInfo::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2R_RegisterInfo::add_names() {
  return names_.Add();
}
inline void SG2R_RegisterInfo::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void SG2R_RegisterInfo::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void SG2R_RegisterInfo::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SG2R_RegisterInfo::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SG2R_RegisterInfo::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// SG2R_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SG2R_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2R_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2R_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2R_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SG2R_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SG2R_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SG2R_RegisterPlayerInfoRet

// required uint64 player_id = 1;
inline bool SG2R_RegisterPlayerInfoRet::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2R_RegisterPlayerInfoRet::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2R_RegisterPlayerInfoRet::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2R_RegisterPlayerInfoRet::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2R_RegisterPlayerInfoRet::player_id() const {
  return player_id_;
}
inline void SG2R_RegisterPlayerInfoRet::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// required bool is_success = 2;
inline bool SG2R_RegisterPlayerInfoRet::has_is_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2R_RegisterPlayerInfoRet::set_has_is_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2R_RegisterPlayerInfoRet::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2R_RegisterPlayerInfoRet::clear_is_success() {
  is_success_ = false;
  clear_has_is_success();
}
inline bool SG2R_RegisterPlayerInfoRet::is_success() const {
  return is_success_;
}
inline void SG2R_RegisterPlayerInfoRet::set_is_success(bool value) {
  set_has_is_success();
  is_success_ = value;
}

// -------------------------------------------------------------------

// SR2C_RegisterInfo

// required int32 server_id = 1;
inline bool SR2C_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SR2C_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SR2C_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SR2C_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SR2C_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SR2C_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// repeated string names = 2;
inline int SR2C_RegisterInfo::names_size() const {
  return names_.size();
}
inline void SR2C_RegisterInfo::clear_names() {
  names_.Clear();
}
inline const ::std::string& SR2C_RegisterInfo::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* SR2C_RegisterInfo::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void SR2C_RegisterInfo::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void SR2C_RegisterInfo::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void SR2C_RegisterInfo::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2C_RegisterInfo::add_names() {
  return names_.Add();
}
inline void SR2C_RegisterInfo::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void SR2C_RegisterInfo::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void SR2C_RegisterInfo::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SR2C_RegisterInfo::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SR2C_RegisterInfo::mutable_names() {
  return &names_;
}

// required string ip = 3;
inline bool SR2C_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SR2C_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SR2C_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SR2C_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SR2C_RegisterInfo::ip() const {
  return *ip_;
}
inline void SR2C_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SR2C_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SR2C_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2C_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SR2C_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SR2C_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 4;
inline bool SR2C_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SR2C_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SR2C_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SR2C_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SR2C_RegisterInfo::port() const {
  return *port_;
}
inline void SR2C_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SR2C_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SR2C_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2C_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SR2C_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SR2C_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SR2C_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SR2C_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SR2C_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SR2C_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SR2C_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SR2C_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SR2C_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 region_id = 2;
inline bool SR2C_RegisterInfoRet::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SR2C_RegisterInfoRet::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SR2C_RegisterInfoRet::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SR2C_RegisterInfoRet::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SR2C_RegisterInfoRet::region_id() const {
  return region_id_;
}
inline void SR2C_RegisterInfoRet::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// -------------------------------------------------------------------

// SR2C_GetLobbyServersRet

// required string ip = 1;
inline bool SR2C_GetLobbyServersRet::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SR2C_GetLobbyServersRet::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SR2C_GetLobbyServersRet::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SR2C_GetLobbyServersRet::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SR2C_GetLobbyServersRet::ip() const {
  return *ip_;
}
inline void SR2C_GetLobbyServersRet::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SR2C_GetLobbyServersRet::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SR2C_GetLobbyServersRet::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2C_GetLobbyServersRet::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SR2C_GetLobbyServersRet::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SR2C_GetLobbyServersRet::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 2;
inline bool SR2C_GetLobbyServersRet::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SR2C_GetLobbyServersRet::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SR2C_GetLobbyServersRet::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SR2C_GetLobbyServersRet::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SR2C_GetLobbyServersRet::port() const {
  return *port_;
}
inline void SR2C_GetLobbyServersRet::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SR2C_GetLobbyServersRet::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SR2C_GetLobbyServersRet::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2C_GetLobbyServersRet::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SR2C_GetLobbyServersRet::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SR2C_GetLobbyServersRet::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SR2B_RegisterInfo

// required int32 server_id = 1;
inline bool SR2B_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SR2B_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SR2B_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SR2B_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SR2B_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SR2B_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 region_id = 2;
inline bool SR2B_RegisterInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SR2B_RegisterInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SR2B_RegisterInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SR2B_RegisterInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SR2B_RegisterInfo::region_id() const {
  return region_id_;
}
inline void SR2B_RegisterInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required string ip = 3;
inline bool SR2B_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SR2B_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SR2B_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SR2B_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SR2B_RegisterInfo::ip() const {
  return *ip_;
}
inline void SR2B_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SR2B_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SR2B_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2B_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SR2B_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SR2B_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 4;
inline bool SR2B_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SR2B_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SR2B_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SR2B_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SR2B_RegisterInfo::port() const {
  return *port_;
}
inline void SR2B_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SR2B_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SR2B_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2B_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SR2B_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SR2B_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string names = 5;
inline int SR2B_RegisterInfo::names_size() const {
  return names_.size();
}
inline void SR2B_RegisterInfo::clear_names() {
  names_.Clear();
}
inline const ::std::string& SR2B_RegisterInfo::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* SR2B_RegisterInfo::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void SR2B_RegisterInfo::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void SR2B_RegisterInfo::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void SR2B_RegisterInfo::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2B_RegisterInfo::add_names() {
  return names_.Add();
}
inline void SR2B_RegisterInfo::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void SR2B_RegisterInfo::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void SR2B_RegisterInfo::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SR2B_RegisterInfo::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SR2B_RegisterInfo::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// SR2B_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SR2B_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SR2B_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SR2B_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SR2B_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SR2B_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SR2B_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CountryWithAddress

// optional .pb.Address addresses = 1;
inline bool CountryWithAddress::has_addresses() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryWithAddress::set_has_addresses() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryWithAddress::clear_has_addresses() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryWithAddress::clear_addresses() {
  if (addresses_ != NULL) addresses_->::pb::Address::Clear();
  clear_has_addresses();
}
inline const ::pb::Address& CountryWithAddress::addresses() const {
  return addresses_ != NULL ? *addresses_ : *default_instance_->addresses_;
}
inline ::pb::Address* CountryWithAddress::mutable_addresses() {
  set_has_addresses();
  if (addresses_ == NULL) addresses_ = new ::pb::Address;
  return addresses_;
}
inline ::pb::Address* CountryWithAddress::release_addresses() {
  clear_has_addresses();
  ::pb::Address* temp = addresses_;
  addresses_ = NULL;
  return temp;
}
inline void CountryWithAddress::set_allocated_addresses(::pb::Address* addresses) {
  delete addresses_;
  addresses_ = addresses;
  if (addresses) {
    set_has_addresses();
  } else {
    clear_has_addresses();
  }
}

// optional uint32 countryid = 2;
inline bool CountryWithAddress::has_countryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryWithAddress::set_has_countryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryWithAddress::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryWithAddress::clear_countryid() {
  countryid_ = 0u;
  clear_has_countryid();
}
inline ::google::protobuf::uint32 CountryWithAddress::countryid() const {
  return countryid_;
}
inline void CountryWithAddress::set_countryid(::google::protobuf::uint32 value) {
  set_has_countryid();
  countryid_ = value;
}

// optional uint64 PrepareEndTime = 3;
inline bool CountryWithAddress::has_prepareendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryWithAddress::set_has_prepareendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryWithAddress::clear_has_prepareendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryWithAddress::clear_prepareendtime() {
  prepareendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_prepareendtime();
}
inline ::google::protobuf::uint64 CountryWithAddress::prepareendtime() const {
  return prepareendtime_;
}
inline void CountryWithAddress::set_prepareendtime(::google::protobuf::uint64 value) {
  set_has_prepareendtime();
  prepareendtime_ = value;
}

// optional uint32 uniqueid = 4;
inline bool CountryWithAddress::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountryWithAddress::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountryWithAddress::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountryWithAddress::clear_uniqueid() {
  uniqueid_ = 0u;
  clear_has_uniqueid();
}
inline ::google::protobuf::uint32 CountryWithAddress::uniqueid() const {
  return uniqueid_;
}
inline void CountryWithAddress::set_uniqueid(::google::protobuf::uint32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// -------------------------------------------------------------------

// SL2G_DevideCrossServers

// repeated .pb.CountryWithAddress Country_Addresses = 1;
inline int SL2G_DevideCrossServers::country_addresses_size() const {
  return country_addresses_.size();
}
inline void SL2G_DevideCrossServers::clear_country_addresses() {
  country_addresses_.Clear();
}
inline const ::pb::CountryWithAddress& SL2G_DevideCrossServers::country_addresses(int index) const {
  return country_addresses_.Get(index);
}
inline ::pb::CountryWithAddress* SL2G_DevideCrossServers::mutable_country_addresses(int index) {
  return country_addresses_.Mutable(index);
}
inline ::pb::CountryWithAddress* SL2G_DevideCrossServers::add_country_addresses() {
  return country_addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CountryWithAddress >&
SL2G_DevideCrossServers::country_addresses() const {
  return country_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CountryWithAddress >*
SL2G_DevideCrossServers::mutable_country_addresses() {
  return &country_addresses_;
}

// required .pb.CROSS_STATE CurState = 2;
inline bool SL2G_DevideCrossServers::has_curstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SL2G_DevideCrossServers::set_has_curstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SL2G_DevideCrossServers::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SL2G_DevideCrossServers::clear_curstate() {
  curstate_ = 0;
  clear_has_curstate();
}
inline ::pb::CROSS_STATE SL2G_DevideCrossServers::curstate() const {
  return static_cast< ::pb::CROSS_STATE >(curstate_);
}
inline void SL2G_DevideCrossServers::set_curstate(::pb::CROSS_STATE value) {
  assert(::pb::CROSS_STATE_IsValid(value));
  set_has_curstate();
  curstate_ = value;
}

// -------------------------------------------------------------------

// SR2E_RegisterInfo

// required int32 region_id = 1;
inline bool SR2E_RegisterInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SR2E_RegisterInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SR2E_RegisterInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SR2E_RegisterInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SR2E_RegisterInfo::region_id() const {
  return region_id_;
}
inline void SR2E_RegisterInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required int32 server_id = 2;
inline bool SR2E_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SR2E_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SR2E_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SR2E_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SR2E_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SR2E_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string ip = 3;
inline bool SR2E_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SR2E_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SR2E_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SR2E_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SR2E_RegisterInfo::ip() const {
  return *ip_;
}
inline void SR2E_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SR2E_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SR2E_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2E_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SR2E_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SR2E_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 4;
inline bool SR2E_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SR2E_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SR2E_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SR2E_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SR2E_RegisterInfo::port() const {
  return *port_;
}
inline void SR2E_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SR2E_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SR2E_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SR2E_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SR2E_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SR2E_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SR2E_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SR2E_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SR2E_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SR2E_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SR2E_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SR2E_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SR2E_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SB2C_RegisterInfo

// required string ip = 1;
inline bool SB2C_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SB2C_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SB2C_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SB2C_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SB2C_RegisterInfo::ip() const {
  return *ip_;
}
inline void SB2C_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SB2C_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SB2C_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SB2C_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SB2C_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SB2C_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 2;
inline bool SB2C_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SB2C_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SB2C_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SB2C_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SB2C_RegisterInfo::port() const {
  return *port_;
}
inline void SB2C_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SB2C_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SB2C_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SB2C_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SB2C_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SB2C_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SB2C_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SB2C_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SB2C_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SB2C_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SB2C_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SB2C_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SB2C_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 region_id = 2;
inline bool SB2C_RegisterInfoRet::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SB2C_RegisterInfoRet::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SB2C_RegisterInfoRet::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SB2C_RegisterInfoRet::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SB2C_RegisterInfoRet::region_id() const {
  return region_id_;
}
inline void SB2C_RegisterInfoRet::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// -------------------------------------------------------------------

// SB2E_RegisterInfo

// required string ip = 1;
inline bool SB2E_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SB2E_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SB2E_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SB2E_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SB2E_RegisterInfo::ip() const {
  return *ip_;
}
inline void SB2E_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SB2E_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SB2E_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SB2E_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SB2E_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SB2E_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 2;
inline bool SB2E_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SB2E_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SB2E_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SB2E_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SB2E_RegisterInfo::port() const {
  return *port_;
}
inline void SB2E_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SB2E_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SB2E_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SB2E_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SB2E_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SB2E_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SB2E_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SB2E_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SB2E_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SB2E_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SB2E_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SB2E_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SB2E_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SL2C_RegisterInfo

// required string ip = 1;
inline bool SL2C_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SL2C_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SL2C_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SL2C_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SL2C_RegisterInfo::ip() const {
  return *ip_;
}
inline void SL2C_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SL2C_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SL2C_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SL2C_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SL2C_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SL2C_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 2;
inline bool SL2C_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SL2C_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SL2C_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SL2C_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SL2C_RegisterInfo::port() const {
  return *port_;
}
inline void SL2C_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SL2C_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SL2C_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SL2C_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SL2C_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SL2C_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SL2C_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SL2C_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SL2C_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SL2C_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SL2C_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SL2C_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SL2C_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 region_id = 2;
inline bool SL2C_RegisterInfoRet::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SL2C_RegisterInfoRet::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SL2C_RegisterInfoRet::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SL2C_RegisterInfoRet::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SL2C_RegisterInfoRet::region_id() const {
  return region_id_;
}
inline void SL2C_RegisterInfoRet::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional string web_url = 3;
inline bool SL2C_RegisterInfoRet::has_web_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SL2C_RegisterInfoRet::set_has_web_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SL2C_RegisterInfoRet::clear_has_web_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SL2C_RegisterInfoRet::clear_web_url() {
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    web_url_->clear();
  }
  clear_has_web_url();
}
inline const ::std::string& SL2C_RegisterInfoRet::web_url() const {
  return *web_url_;
}
inline void SL2C_RegisterInfoRet::set_web_url(const ::std::string& value) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(value);
}
inline void SL2C_RegisterInfoRet::set_web_url(const char* value) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(value);
}
inline void SL2C_RegisterInfoRet::set_web_url(const char* value, size_t size) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SL2C_RegisterInfoRet::mutable_web_url() {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  return web_url_;
}
inline ::std::string* SL2C_RegisterInfoRet::release_web_url() {
  clear_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = web_url_;
    web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SL2C_RegisterInfoRet::set_allocated_web_url(::std::string* web_url) {
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    delete web_url_;
  }
  if (web_url) {
    set_has_web_url();
    web_url_ = web_url;
  } else {
    clear_has_web_url();
    web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SL2E_RegisterInfo

// required string ip = 1;
inline bool SL2E_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SL2E_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SL2E_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SL2E_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SL2E_RegisterInfo::ip() const {
  return *ip_;
}
inline void SL2E_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SL2E_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SL2E_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SL2E_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SL2E_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SL2E_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 2;
inline bool SL2E_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SL2E_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SL2E_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SL2E_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SL2E_RegisterInfo::port() const {
  return *port_;
}
inline void SL2E_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SL2E_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SL2E_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SL2E_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SL2E_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SL2E_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 region_id = 3;
inline bool SL2E_RegisterInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SL2E_RegisterInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SL2E_RegisterInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SL2E_RegisterInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SL2E_RegisterInfo::region_id() const {
  return region_id_;
}
inline void SL2E_RegisterInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional int32 server_id = 4;
inline bool SL2E_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SL2E_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SL2E_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SL2E_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SL2E_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SL2E_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// SL2E_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SL2E_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SL2E_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SL2E_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SL2E_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SL2E_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SL2E_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SE2C_RegisterInfo

// required string ip = 1;
inline bool SE2C_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SE2C_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SE2C_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SE2C_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SE2C_RegisterInfo::ip() const {
  return *ip_;
}
inline void SE2C_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SE2C_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SE2C_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SE2C_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SE2C_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SE2C_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 2;
inline bool SE2C_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SE2C_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SE2C_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SE2C_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SE2C_RegisterInfo::port() const {
  return *port_;
}
inline void SE2C_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SE2C_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SE2C_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SE2C_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SE2C_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SE2C_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SE2C_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SE2C_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SE2C_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SE2C_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SE2C_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SE2C_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SE2C_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 region_id = 2;
inline bool SE2C_RegisterInfoRet::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SE2C_RegisterInfoRet::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SE2C_RegisterInfoRet::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SE2C_RegisterInfoRet::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SE2C_RegisterInfoRet::region_id() const {
  return region_id_;
}
inline void SE2C_RegisterInfoRet::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// -------------------------------------------------------------------

// EventParm

// required .pb.EventParm.ParmType parm_type = 1;
inline bool EventParm::has_parm_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventParm::set_has_parm_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventParm::clear_has_parm_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventParm::clear_parm_type() {
  parm_type_ = 0;
  clear_has_parm_type();
}
inline ::pb::EventParm_ParmType EventParm::parm_type() const {
  return static_cast< ::pb::EventParm_ParmType >(parm_type_);
}
inline void EventParm::set_parm_type(::pb::EventParm_ParmType value) {
  assert(::pb::EventParm_ParmType_IsValid(value));
  set_has_parm_type();
  parm_type_ = value;
}

// optional int32 value_int32 = 2;
inline bool EventParm::has_value_int32() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventParm::set_has_value_int32() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventParm::clear_has_value_int32() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventParm::clear_value_int32() {
  value_int32_ = 0;
  clear_has_value_int32();
}
inline ::google::protobuf::int32 EventParm::value_int32() const {
  return value_int32_;
}
inline void EventParm::set_value_int32(::google::protobuf::int32 value) {
  set_has_value_int32();
  value_int32_ = value;
}

// optional uint32 value_uint32 = 3;
inline bool EventParm::has_value_uint32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventParm::set_has_value_uint32() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventParm::clear_has_value_uint32() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventParm::clear_value_uint32() {
  value_uint32_ = 0u;
  clear_has_value_uint32();
}
inline ::google::protobuf::uint32 EventParm::value_uint32() const {
  return value_uint32_;
}
inline void EventParm::set_value_uint32(::google::protobuf::uint32 value) {
  set_has_value_uint32();
  value_uint32_ = value;
}

// optional int64 value_int64 = 4;
inline bool EventParm::has_value_int64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventParm::set_has_value_int64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventParm::clear_has_value_int64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventParm::clear_value_int64() {
  value_int64_ = GOOGLE_LONGLONG(0);
  clear_has_value_int64();
}
inline ::google::protobuf::int64 EventParm::value_int64() const {
  return value_int64_;
}
inline void EventParm::set_value_int64(::google::protobuf::int64 value) {
  set_has_value_int64();
  value_int64_ = value;
}

// optional uint64 value_uint64 = 5;
inline bool EventParm::has_value_uint64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventParm::set_has_value_uint64() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EventParm::clear_has_value_uint64() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EventParm::clear_value_uint64() {
  value_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_value_uint64();
}
inline ::google::protobuf::uint64 EventParm::value_uint64() const {
  return value_uint64_;
}
inline void EventParm::set_value_uint64(::google::protobuf::uint64 value) {
  set_has_value_uint64();
  value_uint64_ = value;
}

// optional string value_str = 6;
inline bool EventParm::has_value_str() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EventParm::set_has_value_str() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EventParm::clear_has_value_str() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EventParm::clear_value_str() {
  if (value_str_ != &::google::protobuf::internal::kEmptyString) {
    value_str_->clear();
  }
  clear_has_value_str();
}
inline const ::std::string& EventParm::value_str() const {
  return *value_str_;
}
inline void EventParm::set_value_str(const ::std::string& value) {
  set_has_value_str();
  if (value_str_ == &::google::protobuf::internal::kEmptyString) {
    value_str_ = new ::std::string;
  }
  value_str_->assign(value);
}
inline void EventParm::set_value_str(const char* value) {
  set_has_value_str();
  if (value_str_ == &::google::protobuf::internal::kEmptyString) {
    value_str_ = new ::std::string;
  }
  value_str_->assign(value);
}
inline void EventParm::set_value_str(const char* value, size_t size) {
  set_has_value_str();
  if (value_str_ == &::google::protobuf::internal::kEmptyString) {
    value_str_ = new ::std::string;
  }
  value_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventParm::mutable_value_str() {
  set_has_value_str();
  if (value_str_ == &::google::protobuf::internal::kEmptyString) {
    value_str_ = new ::std::string;
  }
  return value_str_;
}
inline ::std::string* EventParm::release_value_str() {
  clear_has_value_str();
  if (value_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_str_;
    value_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventParm::set_allocated_value_str(::std::string* value_str) {
  if (value_str_ != &::google::protobuf::internal::kEmptyString) {
    delete value_str_;
  }
  if (value_str) {
    set_has_value_str();
    value_str_ = value_str;
  } else {
    clear_has_value_str();
    value_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float value_float = 7;
inline bool EventParm::has_value_float() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EventParm::set_has_value_float() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EventParm::clear_has_value_float() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EventParm::clear_value_float() {
  value_float_ = 0;
  clear_has_value_float();
}
inline float EventParm::value_float() const {
  return value_float_;
}
inline void EventParm::set_value_float(float value) {
  set_has_value_float();
  value_float_ = value;
}

// -------------------------------------------------------------------

// Server_Event

// optional int32 event_id = 1;
inline bool Server_Event::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server_Event::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server_Event::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server_Event::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 Server_Event::event_id() const {
  return event_id_;
}
inline void Server_Event::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint64 account_id = 2;
inline bool Server_Event::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server_Event::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server_Event::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server_Event::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 Server_Event::account_id() const {
  return account_id_;
}
inline void Server_Event::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint64 player_id = 3;
inline bool Server_Event::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Server_Event::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Server_Event::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Server_Event::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 Server_Event::player_id() const {
  return player_id_;
}
inline void Server_Event::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 time = 4;
inline bool Server_Event::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Server_Event::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Server_Event::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Server_Event::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Server_Event::time() const {
  return time_;
}
inline void Server_Event::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// repeated .pb.EventParm params = 5;
inline int Server_Event::params_size() const {
  return params_.size();
}
inline void Server_Event::clear_params() {
  params_.Clear();
}
inline const ::pb::EventParm& Server_Event::params(int index) const {
  return params_.Get(index);
}
inline ::pb::EventParm* Server_Event::mutable_params(int index) {
  return params_.Mutable(index);
}
inline ::pb::EventParm* Server_Event::add_params() {
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::EventParm >&
Server_Event::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::EventParm >*
Server_Event::mutable_params() {
  return &params_;
}

// -------------------------------------------------------------------

// Server_Events

// repeated .pb.Server_Event logs = 1;
inline int Server_Events::logs_size() const {
  return logs_.size();
}
inline void Server_Events::clear_logs() {
  logs_.Clear();
}
inline const ::pb::Server_Event& Server_Events::logs(int index) const {
  return logs_.Get(index);
}
inline ::pb::Server_Event* Server_Events::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::pb::Server_Event* Server_Events::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Server_Event >&
Server_Events::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Server_Event >*
Server_Events::mutable_logs() {
  return &logs_;
}

// -------------------------------------------------------------------

// Version

// optional uint32 id = 1;
inline bool Version::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Version::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Version::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Version::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Version::id() const {
  return id_;
}
inline void Version::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 channel_id = 2;
inline bool Version::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Version::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Version::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Version::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 Version::channel_id() const {
  return channel_id_;
}
inline void Version::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional uint32 platform_id = 3;
inline bool Version::has_platform_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Version::set_has_platform_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Version::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Version::clear_platform_id() {
  platform_id_ = 0u;
  clear_has_platform_id();
}
inline ::google::protobuf::uint32 Version::platform_id() const {
  return platform_id_;
}
inline void Version::set_platform_id(::google::protobuf::uint32 value) {
  set_has_platform_id();
  platform_id_ = value;
}

// optional uint32 min_version_id = 4;
inline bool Version::has_min_version_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Version::set_has_min_version_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Version::clear_has_min_version_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Version::clear_min_version_id() {
  min_version_id_ = 0u;
  clear_has_min_version_id();
}
inline ::google::protobuf::uint32 Version::min_version_id() const {
  return min_version_id_;
}
inline void Version::set_min_version_id(::google::protobuf::uint32 value) {
  set_has_min_version_id();
  min_version_id_ = value;
}

// optional uint32 max_version_id = 5;
inline bool Version::has_max_version_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Version::set_has_max_version_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Version::clear_has_max_version_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Version::clear_max_version_id() {
  max_version_id_ = 0u;
  clear_has_max_version_id();
}
inline ::google::protobuf::uint32 Version::max_version_id() const {
  return max_version_id_;
}
inline void Version::set_max_version_id(::google::protobuf::uint32 value) {
  set_has_max_version_id();
  max_version_id_ = value;
}

// optional uint32 is_hot_update = 6;
inline bool Version::has_is_hot_update() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Version::set_has_is_hot_update() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Version::clear_has_is_hot_update() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Version::clear_is_hot_update() {
  is_hot_update_ = 0u;
  clear_has_is_hot_update();
}
inline ::google::protobuf::uint32 Version::is_hot_update() const {
  return is_hot_update_;
}
inline void Version::set_is_hot_update(::google::protobuf::uint32 value) {
  set_has_is_hot_update();
  is_hot_update_ = value;
}

// optional string max_version_address = 7;
inline bool Version::has_max_version_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Version::set_has_max_version_address() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Version::clear_has_max_version_address() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Version::clear_max_version_address() {
  if (max_version_address_ != &::google::protobuf::internal::kEmptyString) {
    max_version_address_->clear();
  }
  clear_has_max_version_address();
}
inline const ::std::string& Version::max_version_address() const {
  return *max_version_address_;
}
inline void Version::set_max_version_address(const ::std::string& value) {
  set_has_max_version_address();
  if (max_version_address_ == &::google::protobuf::internal::kEmptyString) {
    max_version_address_ = new ::std::string;
  }
  max_version_address_->assign(value);
}
inline void Version::set_max_version_address(const char* value) {
  set_has_max_version_address();
  if (max_version_address_ == &::google::protobuf::internal::kEmptyString) {
    max_version_address_ = new ::std::string;
  }
  max_version_address_->assign(value);
}
inline void Version::set_max_version_address(const char* value, size_t size) {
  set_has_max_version_address();
  if (max_version_address_ == &::google::protobuf::internal::kEmptyString) {
    max_version_address_ = new ::std::string;
  }
  max_version_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Version::mutable_max_version_address() {
  set_has_max_version_address();
  if (max_version_address_ == &::google::protobuf::internal::kEmptyString) {
    max_version_address_ = new ::std::string;
  }
  return max_version_address_;
}
inline ::std::string* Version::release_max_version_address() {
  clear_has_max_version_address();
  if (max_version_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = max_version_address_;
    max_version_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Version::set_allocated_max_version_address(::std::string* max_version_address) {
  if (max_version_address_ != &::google::protobuf::internal::kEmptyString) {
    delete max_version_address_;
  }
  if (max_version_address) {
    set_has_max_version_address();
    max_version_address_ = max_version_address;
  } else {
    clear_has_max_version_address();
    max_version_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OneVersionInfo

// optional uint32 id = 1;
inline bool OneVersionInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVersionInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVersionInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVersionInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OneVersionInfo::id() const {
  return id_;
}
inline void OneVersionInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 channel_id = 2;
inline bool OneVersionInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVersionInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVersionInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVersionInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 OneVersionInfo::channel_id() const {
  return channel_id_;
}
inline void OneVersionInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional uint32 platform_id = 3;
inline bool OneVersionInfo::has_platform_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneVersionInfo::set_has_platform_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneVersionInfo::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneVersionInfo::clear_platform_id() {
  platform_id_ = 0u;
  clear_has_platform_id();
}
inline ::google::protobuf::uint32 OneVersionInfo::platform_id() const {
  return platform_id_;
}
inline void OneVersionInfo::set_platform_id(::google::protobuf::uint32 value) {
  set_has_platform_id();
  platform_id_ = value;
}

// optional uint32 version_id = 4;
inline bool OneVersionInfo::has_version_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneVersionInfo::set_has_version_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneVersionInfo::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneVersionInfo::clear_version_id() {
  version_id_ = 0u;
  clear_has_version_id();
}
inline ::google::protobuf::uint32 OneVersionInfo::version_id() const {
  return version_id_;
}
inline void OneVersionInfo::set_version_id(::google::protobuf::uint32 value) {
  set_has_version_id();
  version_id_ = value;
}

// optional uint32 resource_id = 5;
inline bool OneVersionInfo::has_resource_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneVersionInfo::set_has_resource_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneVersionInfo::clear_has_resource_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneVersionInfo::clear_resource_id() {
  resource_id_ = 0u;
  clear_has_resource_id();
}
inline ::google::protobuf::uint32 OneVersionInfo::resource_id() const {
  return resource_id_;
}
inline void OneVersionInfo::set_resource_id(::google::protobuf::uint32 value) {
  set_has_resource_id();
  resource_id_ = value;
}

// optional string notice_address = 6;
inline bool OneVersionInfo::has_notice_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneVersionInfo::set_has_notice_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneVersionInfo::clear_has_notice_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneVersionInfo::clear_notice_address() {
  if (notice_address_ != &::google::protobuf::internal::kEmptyString) {
    notice_address_->clear();
  }
  clear_has_notice_address();
}
inline const ::std::string& OneVersionInfo::notice_address() const {
  return *notice_address_;
}
inline void OneVersionInfo::set_notice_address(const ::std::string& value) {
  set_has_notice_address();
  if (notice_address_ == &::google::protobuf::internal::kEmptyString) {
    notice_address_ = new ::std::string;
  }
  notice_address_->assign(value);
}
inline void OneVersionInfo::set_notice_address(const char* value) {
  set_has_notice_address();
  if (notice_address_ == &::google::protobuf::internal::kEmptyString) {
    notice_address_ = new ::std::string;
  }
  notice_address_->assign(value);
}
inline void OneVersionInfo::set_notice_address(const char* value, size_t size) {
  set_has_notice_address();
  if (notice_address_ == &::google::protobuf::internal::kEmptyString) {
    notice_address_ = new ::std::string;
  }
  notice_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneVersionInfo::mutable_notice_address() {
  set_has_notice_address();
  if (notice_address_ == &::google::protobuf::internal::kEmptyString) {
    notice_address_ = new ::std::string;
  }
  return notice_address_;
}
inline ::std::string* OneVersionInfo::release_notice_address() {
  clear_has_notice_address();
  if (notice_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_address_;
    notice_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneVersionInfo::set_allocated_notice_address(::std::string* notice_address) {
  if (notice_address_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_address_;
  }
  if (notice_address) {
    set_has_notice_address();
    notice_address_ = notice_address;
  } else {
    clear_has_notice_address();
    notice_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string resource_address = 7;
inline bool OneVersionInfo::has_resource_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneVersionInfo::set_has_resource_address() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneVersionInfo::clear_has_resource_address() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneVersionInfo::clear_resource_address() {
  if (resource_address_ != &::google::protobuf::internal::kEmptyString) {
    resource_address_->clear();
  }
  clear_has_resource_address();
}
inline const ::std::string& OneVersionInfo::resource_address() const {
  return *resource_address_;
}
inline void OneVersionInfo::set_resource_address(const ::std::string& value) {
  set_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::kEmptyString) {
    resource_address_ = new ::std::string;
  }
  resource_address_->assign(value);
}
inline void OneVersionInfo::set_resource_address(const char* value) {
  set_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::kEmptyString) {
    resource_address_ = new ::std::string;
  }
  resource_address_->assign(value);
}
inline void OneVersionInfo::set_resource_address(const char* value, size_t size) {
  set_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::kEmptyString) {
    resource_address_ = new ::std::string;
  }
  resource_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneVersionInfo::mutable_resource_address() {
  set_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::kEmptyString) {
    resource_address_ = new ::std::string;
  }
  return resource_address_;
}
inline ::std::string* OneVersionInfo::release_resource_address() {
  clear_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_address_;
    resource_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneVersionInfo::set_allocated_resource_address(::std::string* resource_address) {
  if (resource_address_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_address_;
  }
  if (resource_address) {
    set_has_resource_address();
    resource_address_ = resource_address;
  } else {
    clear_has_resource_address();
    resource_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SG2L_RegisterInfo

// required int32 region_id = 1;
inline bool SG2L_RegisterInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2L_RegisterInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2L_RegisterInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2L_RegisterInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SG2L_RegisterInfo::region_id() const {
  return region_id_;
}
inline void SG2L_RegisterInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required int32 server_id = 2;
inline bool SG2L_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2L_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2L_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2L_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SG2L_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SG2L_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string ip = 3;
inline bool SG2L_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2L_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2L_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2L_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SG2L_RegisterInfo::ip() const {
  return *ip_;
}
inline void SG2L_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2L_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2L_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2L_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SG2L_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2L_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 4;
inline bool SG2L_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2L_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2L_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2L_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SG2L_RegisterInfo::port() const {
  return *port_;
}
inline void SG2L_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2L_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2L_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2L_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SG2L_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2L_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 player_count = 5;
inline bool SG2L_RegisterInfo::has_player_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2L_RegisterInfo::set_has_player_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2L_RegisterInfo::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2L_RegisterInfo::clear_player_count() {
  player_count_ = 0;
  clear_has_player_count();
}
inline ::google::protobuf::int32 SG2L_RegisterInfo::player_count() const {
  return player_count_;
}
inline void SG2L_RegisterInfo::set_player_count(::google::protobuf::int32 value) {
  set_has_player_count();
  player_count_ = value;
}

// required uint64 logical_update_ms = 6;
inline bool SG2L_RegisterInfo::has_logical_update_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SG2L_RegisterInfo::set_has_logical_update_ms() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SG2L_RegisterInfo::clear_has_logical_update_ms() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SG2L_RegisterInfo::clear_logical_update_ms() {
  logical_update_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_logical_update_ms();
}
inline ::google::protobuf::uint64 SG2L_RegisterInfo::logical_update_ms() const {
  return logical_update_ms_;
}
inline void SG2L_RegisterInfo::set_logical_update_ms(::google::protobuf::uint64 value) {
  set_has_logical_update_ms();
  logical_update_ms_ = value;
}

// -------------------------------------------------------------------

// SG2L_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SG2L_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2L_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2L_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2L_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SG2L_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SG2L_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SG2D_RegisterInfo

// required int32 server_id = 1;
inline bool SG2D_RegisterInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_RegisterInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_RegisterInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_RegisterInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SG2D_RegisterInfo::server_id() const {
  return server_id_;
}
inline void SG2D_RegisterInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 region_id = 2;
inline bool SG2D_RegisterInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_RegisterInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_RegisterInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_RegisterInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SG2D_RegisterInfo::region_id() const {
  return region_id_;
}
inline void SG2D_RegisterInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required string ip = 3;
inline bool SG2D_RegisterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_RegisterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_RegisterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_RegisterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SG2D_RegisterInfo::ip() const {
  return *ip_;
}
inline void SG2D_RegisterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2D_RegisterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SG2D_RegisterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2D_RegisterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SG2D_RegisterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2D_RegisterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string port = 4;
inline bool SG2D_RegisterInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2D_RegisterInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2D_RegisterInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2D_RegisterInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& SG2D_RegisterInfo::port() const {
  return *port_;
}
inline void SG2D_RegisterInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2D_RegisterInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void SG2D_RegisterInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2D_RegisterInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* SG2D_RegisterInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2D_RegisterInfo::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string names = 5;
inline int SG2D_RegisterInfo::names_size() const {
  return names_.size();
}
inline void SG2D_RegisterInfo::clear_names() {
  names_.Clear();
}
inline const ::std::string& SG2D_RegisterInfo::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* SG2D_RegisterInfo::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void SG2D_RegisterInfo::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void SG2D_RegisterInfo::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void SG2D_RegisterInfo::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2D_RegisterInfo::add_names() {
  return names_.Add();
}
inline void SG2D_RegisterInfo::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void SG2D_RegisterInfo::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void SG2D_RegisterInfo::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SG2D_RegisterInfo::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SG2D_RegisterInfo::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// SG2D_RegisterInfoRet

// required .pb.RegisterResult result = 1;
inline bool SG2D_RegisterInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_RegisterInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_RegisterInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_RegisterInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::RegisterResult SG2D_RegisterInfoRet::result() const {
  return static_cast< ::pb::RegisterResult >(result_);
}
inline void SG2D_RegisterInfoRet::set_result(::pb::RegisterResult value) {
  assert(::pb::RegisterResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 pvp_table_size = 2;
inline bool SG2D_RegisterInfoRet::has_pvp_table_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_RegisterInfoRet::set_has_pvp_table_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_RegisterInfoRet::clear_has_pvp_table_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_RegisterInfoRet::clear_pvp_table_size() {
  pvp_table_size_ = 0u;
  clear_has_pvp_table_size();
}
inline ::google::protobuf::uint32 SG2D_RegisterInfoRet::pvp_table_size() const {
  return pvp_table_size_;
}
inline void SG2D_RegisterInfoRet::set_pvp_table_size(::google::protobuf::uint32 value) {
  set_has_pvp_table_size();
  pvp_table_size_ = value;
}

// -------------------------------------------------------------------

// SG2D_GetPlayerList

// required uint64 account_id = 1;
inline bool SG2D_GetPlayerList::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_GetPlayerList::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_GetPlayerList::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_GetPlayerList::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 SG2D_GetPlayerList::account_id() const {
  return account_id_;
}
inline void SG2D_GetPlayerList::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
}

// -------------------------------------------------------------------

// SG2L_UpdatePlayerLockType

// required uint64 account_id = 1;
inline bool SG2L_UpdatePlayerLockType::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2L_UpdatePlayerLockType::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2L_UpdatePlayerLockType::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2L_UpdatePlayerLockType::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 SG2L_UpdatePlayerLockType::account_id() const {
  return account_id_;
}
inline void SG2L_UpdatePlayerLockType::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
}

// required string account_name = 2;
inline bool SG2L_UpdatePlayerLockType::has_account_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2L_UpdatePlayerLockType::set_has_account_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2L_UpdatePlayerLockType::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2L_UpdatePlayerLockType::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& SG2L_UpdatePlayerLockType::account_name() const {
  return *account_name_;
}
inline void SG2L_UpdatePlayerLockType::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void SG2L_UpdatePlayerLockType::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void SG2L_UpdatePlayerLockType::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2L_UpdatePlayerLockType::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* SG2L_UpdatePlayerLockType::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2L_UpdatePlayerLockType::set_allocated_account_name(::std::string* account_name) {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name) {
    set_has_account_name();
    account_name_ = account_name;
  } else {
    clear_has_account_name();
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 lock_time = 3;
inline bool SG2L_UpdatePlayerLockType::has_lock_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2L_UpdatePlayerLockType::set_has_lock_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2L_UpdatePlayerLockType::clear_has_lock_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2L_UpdatePlayerLockType::clear_lock_time() {
  lock_time_ = GOOGLE_ULONGLONG(0);
  clear_has_lock_time();
}
inline ::google::protobuf::uint64 SG2L_UpdatePlayerLockType::lock_time() const {
  return lock_time_;
}
inline void SG2L_UpdatePlayerLockType::set_lock_time(::google::protobuf::uint64 value) {
  set_has_lock_time();
  lock_time_ = value;
}

// required .pb.ACCOUNT_LOCK_OP_TYPE lockType = 4;
inline bool SG2L_UpdatePlayerLockType::has_locktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2L_UpdatePlayerLockType::set_has_locktype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2L_UpdatePlayerLockType::clear_has_locktype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2L_UpdatePlayerLockType::clear_locktype() {
  locktype_ = 1;
  clear_has_locktype();
}
inline ::pb::ACCOUNT_LOCK_OP_TYPE SG2L_UpdatePlayerLockType::locktype() const {
  return static_cast< ::pb::ACCOUNT_LOCK_OP_TYPE >(locktype_);
}
inline void SG2L_UpdatePlayerLockType::set_locktype(::pb::ACCOUNT_LOCK_OP_TYPE value) {
  assert(::pb::ACCOUNT_LOCK_OP_TYPE_IsValid(value));
  set_has_locktype();
  locktype_ = value;
}

// -------------------------------------------------------------------

// SG2D_CreatePlayer

// required uint64 account_id = 1;
inline bool SG2D_CreatePlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_CreatePlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_CreatePlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_CreatePlayer::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 SG2D_CreatePlayer::account_id() const {
  return account_id_;
}
inline void SG2D_CreatePlayer::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
}

// required string name = 2;
inline bool SG2D_CreatePlayer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_CreatePlayer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_CreatePlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_CreatePlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SG2D_CreatePlayer::name() const {
  return *name_;
}
inline void SG2D_CreatePlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SG2D_CreatePlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SG2D_CreatePlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2D_CreatePlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SG2D_CreatePlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2D_CreatePlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 channel_id = 3;
inline bool SG2D_CreatePlayer::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_CreatePlayer::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_CreatePlayer::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_CreatePlayer::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 SG2D_CreatePlayer::channel_id() const {
  return channel_id_;
}
inline void SG2D_CreatePlayer::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional uint32 card_solution_id = 4;
inline bool SG2D_CreatePlayer::has_card_solution_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2D_CreatePlayer::set_has_card_solution_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2D_CreatePlayer::clear_has_card_solution_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2D_CreatePlayer::clear_card_solution_id() {
  card_solution_id_ = 0u;
  clear_has_card_solution_id();
}
inline ::google::protobuf::uint32 SG2D_CreatePlayer::card_solution_id() const {
  return card_solution_id_;
}
inline void SG2D_CreatePlayer::set_card_solution_id(::google::protobuf::uint32 value) {
  set_has_card_solution_id();
  card_solution_id_ = value;
}

// optional string sdk_user_id = 5;
inline bool SG2D_CreatePlayer::has_sdk_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2D_CreatePlayer::set_has_sdk_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2D_CreatePlayer::clear_has_sdk_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2D_CreatePlayer::clear_sdk_user_id() {
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_->clear();
  }
  clear_has_sdk_user_id();
}
inline const ::std::string& SG2D_CreatePlayer::sdk_user_id() const {
  return *sdk_user_id_;
}
inline void SG2D_CreatePlayer::set_sdk_user_id(const ::std::string& value) {
  set_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_ = new ::std::string;
  }
  sdk_user_id_->assign(value);
}
inline void SG2D_CreatePlayer::set_sdk_user_id(const char* value) {
  set_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_ = new ::std::string;
  }
  sdk_user_id_->assign(value);
}
inline void SG2D_CreatePlayer::set_sdk_user_id(const char* value, size_t size) {
  set_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_ = new ::std::string;
  }
  sdk_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2D_CreatePlayer::mutable_sdk_user_id() {
  set_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_ = new ::std::string;
  }
  return sdk_user_id_;
}
inline ::std::string* SG2D_CreatePlayer::release_sdk_user_id() {
  clear_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sdk_user_id_;
    sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2D_CreatePlayer::set_allocated_sdk_user_id(::std::string* sdk_user_id) {
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_user_id_;
  }
  if (sdk_user_id) {
    set_has_sdk_user_id();
    sdk_user_id_ = sdk_user_id;
  } else {
    clear_has_sdk_user_id();
    sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 platform_id = 6;
inline bool SG2D_CreatePlayer::has_platform_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SG2D_CreatePlayer::set_has_platform_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SG2D_CreatePlayer::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SG2D_CreatePlayer::clear_platform_id() {
  platform_id_ = 0u;
  clear_has_platform_id();
}
inline ::google::protobuf::uint32 SG2D_CreatePlayer::platform_id() const {
  return platform_id_;
}
inline void SG2D_CreatePlayer::set_platform_id(::google::protobuf::uint32 value) {
  set_has_platform_id();
  platform_id_ = value;
}

// -------------------------------------------------------------------

// SG2D_SelectPlayer

// required uint64 account_id = 1;
inline bool SG2D_SelectPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_SelectPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_SelectPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_SelectPlayer::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 SG2D_SelectPlayer::account_id() const {
  return account_id_;
}
inline void SG2D_SelectPlayer::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
}

// required uint64 player_id = 2;
inline bool SG2D_SelectPlayer::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_SelectPlayer::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_SelectPlayer::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_SelectPlayer::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2D_SelectPlayer::player_id() const {
  return player_id_;
}
inline void SG2D_SelectPlayer::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional uint32 platform_id = 3;
inline bool SG2D_SelectPlayer::has_platform_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_SelectPlayer::set_has_platform_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_SelectPlayer::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_SelectPlayer::clear_platform_id() {
  platform_id_ = 0u;
  clear_has_platform_id();
}
inline ::google::protobuf::uint32 SG2D_SelectPlayer::platform_id() const {
  return platform_id_;
}
inline void SG2D_SelectPlayer::set_platform_id(::google::protobuf::uint32 value) {
  set_has_platform_id();
  platform_id_ = value;
}

// optional bool is_quick_login = 4 [default = false];
inline bool SG2D_SelectPlayer::has_is_quick_login() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2D_SelectPlayer::set_has_is_quick_login() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2D_SelectPlayer::clear_has_is_quick_login() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2D_SelectPlayer::clear_is_quick_login() {
  is_quick_login_ = false;
  clear_has_is_quick_login();
}
inline bool SG2D_SelectPlayer::is_quick_login() const {
  return is_quick_login_;
}
inline void SG2D_SelectPlayer::set_is_quick_login(bool value) {
  set_has_is_quick_login();
  is_quick_login_ = value;
}

// optional uint32 country_id = 5;
inline bool SG2D_SelectPlayer::has_country_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2D_SelectPlayer::set_has_country_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2D_SelectPlayer::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2D_SelectPlayer::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 SG2D_SelectPlayer::country_id() const {
  return country_id_;
}
inline void SG2D_SelectPlayer::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 headpic_id = 6;
inline bool SG2D_SelectPlayer::has_headpic_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SG2D_SelectPlayer::set_has_headpic_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SG2D_SelectPlayer::clear_has_headpic_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SG2D_SelectPlayer::clear_headpic_id() {
  headpic_id_ = 0u;
  clear_has_headpic_id();
}
inline ::google::protobuf::uint32 SG2D_SelectPlayer::headpic_id() const {
  return headpic_id_;
}
inline void SG2D_SelectPlayer::set_headpic_id(::google::protobuf::uint32 value) {
  set_has_headpic_id();
  headpic_id_ = value;
}

// optional uint32 expected_country_id = 7;
inline bool SG2D_SelectPlayer::has_expected_country_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SG2D_SelectPlayer::set_has_expected_country_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SG2D_SelectPlayer::clear_has_expected_country_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SG2D_SelectPlayer::clear_expected_country_id() {
  expected_country_id_ = 0u;
  clear_has_expected_country_id();
}
inline ::google::protobuf::uint32 SG2D_SelectPlayer::expected_country_id() const {
  return expected_country_id_;
}
inline void SG2D_SelectPlayer::set_expected_country_id(::google::protobuf::uint32 value) {
  set_has_expected_country_id();
  expected_country_id_ = value;
}

// -------------------------------------------------------------------

// SG2D_Player_Id

// required uint64 player_id = 1;
inline bool SG2D_Player_Id::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_Player_Id::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_Player_Id::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_Player_Id::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2D_Player_Id::player_id() const {
  return player_id_;
}
inline void SG2D_Player_Id::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// SG2D_UpdataStageLevel

// required .pb.Data_Operate op_type = 1;
inline bool SG2D_UpdataStageLevel::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_UpdataStageLevel::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_UpdataStageLevel::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_UpdataStageLevel::clear_op_type() {
  op_type_ = 1;
  clear_has_op_type();
}
inline ::pb::Data_Operate SG2D_UpdataStageLevel::op_type() const {
  return static_cast< ::pb::Data_Operate >(op_type_);
}
inline void SG2D_UpdataStageLevel::set_op_type(::pb::Data_Operate value) {
  assert(::pb::Data_Operate_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// optional .pb.GS2C_StageLevel info = 2;
inline bool SG2D_UpdataStageLevel::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_UpdataStageLevel::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_UpdataStageLevel::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_UpdataStageLevel::clear_info() {
  if (info_ != NULL) info_->::pb::GS2C_StageLevel::Clear();
  clear_has_info();
}
inline const ::pb::GS2C_StageLevel& SG2D_UpdataStageLevel::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::GS2C_StageLevel* SG2D_UpdataStageLevel::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::GS2C_StageLevel;
  return info_;
}
inline ::pb::GS2C_StageLevel* SG2D_UpdataStageLevel::release_info() {
  clear_has_info();
  ::pb::GS2C_StageLevel* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SG2D_UpdataStageLevel::set_allocated_info(::pb::GS2C_StageLevel* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// SG2D_Forbiden_Player

// optional uint64 player_id = 1;
inline bool SG2D_Forbiden_Player::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_Forbiden_Player::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_Forbiden_Player::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_Forbiden_Player::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2D_Forbiden_Player::player_id() const {
  return player_id_;
}
inline void SG2D_Forbiden_Player::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 forbidId = 2;
inline bool SG2D_Forbiden_Player::has_forbidid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_Forbiden_Player::set_has_forbidid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_Forbiden_Player::clear_has_forbidid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_Forbiden_Player::clear_forbidid() {
  forbidid_ = 0;
  clear_has_forbidid();
}
inline ::google::protobuf::int32 SG2D_Forbiden_Player::forbidid() const {
  return forbidid_;
}
inline void SG2D_Forbiden_Player::set_forbidid(::google::protobuf::int32 value) {
  set_has_forbidid();
  forbidid_ = value;
}

// optional int32 time = 3;
inline bool SG2D_Forbiden_Player::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_Forbiden_Player::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_Forbiden_Player::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_Forbiden_Player::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 SG2D_Forbiden_Player::time() const {
  return time_;
}
inline void SG2D_Forbiden_Player::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// SD2G_Forbiden_Player_Ret

// required uint64 acountId = 1;
inline bool SD2G_Forbiden_Player_Ret::has_acountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD2G_Forbiden_Player_Ret::set_has_acountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD2G_Forbiden_Player_Ret::clear_has_acountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD2G_Forbiden_Player_Ret::clear_acountid() {
  acountid_ = GOOGLE_ULONGLONG(0);
  clear_has_acountid();
}
inline ::google::protobuf::uint64 SD2G_Forbiden_Player_Ret::acountid() const {
  return acountid_;
}
inline void SD2G_Forbiden_Player_Ret::set_acountid(::google::protobuf::uint64 value) {
  set_has_acountid();
  acountid_ = value;
}

// optional string player_name = 2;
inline bool SD2G_Forbiden_Player_Ret::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SD2G_Forbiden_Player_Ret::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SD2G_Forbiden_Player_Ret::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SD2G_Forbiden_Player_Ret::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& SD2G_Forbiden_Player_Ret::player_name() const {
  return *player_name_;
}
inline void SD2G_Forbiden_Player_Ret::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void SD2G_Forbiden_Player_Ret::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void SD2G_Forbiden_Player_Ret::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SD2G_Forbiden_Player_Ret::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* SD2G_Forbiden_Player_Ret::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SD2G_Forbiden_Player_Ret::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 forbidId = 3;
inline bool SD2G_Forbiden_Player_Ret::has_forbidid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SD2G_Forbiden_Player_Ret::set_has_forbidid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SD2G_Forbiden_Player_Ret::clear_has_forbidid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SD2G_Forbiden_Player_Ret::clear_forbidid() {
  forbidid_ = 0;
  clear_has_forbidid();
}
inline ::google::protobuf::int32 SD2G_Forbiden_Player_Ret::forbidid() const {
  return forbidid_;
}
inline void SD2G_Forbiden_Player_Ret::set_forbidid(::google::protobuf::int32 value) {
  set_has_forbidid();
  forbidid_ = value;
}

// optional int32 time = 4;
inline bool SD2G_Forbiden_Player_Ret::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SD2G_Forbiden_Player_Ret::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SD2G_Forbiden_Player_Ret::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SD2G_Forbiden_Player_Ret::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 SD2G_Forbiden_Player_Ret::time() const {
  return time_;
}
inline void SD2G_Forbiden_Player_Ret::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// SG2D_UpdataFuBenBase

// required .pb.Data_Operate op_type = 1;
inline bool SG2D_UpdataFuBenBase::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_UpdataFuBenBase::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_UpdataFuBenBase::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_UpdataFuBenBase::clear_op_type() {
  op_type_ = 1;
  clear_has_op_type();
}
inline ::pb::Data_Operate SG2D_UpdataFuBenBase::op_type() const {
  return static_cast< ::pb::Data_Operate >(op_type_);
}
inline void SG2D_UpdataFuBenBase::set_op_type(::pb::Data_Operate value) {
  assert(::pb::Data_Operate_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// required uint32 cur_fuben_id = 2;
inline bool SG2D_UpdataFuBenBase::has_cur_fuben_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_UpdataFuBenBase::set_has_cur_fuben_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_UpdataFuBenBase::clear_has_cur_fuben_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_UpdataFuBenBase::clear_cur_fuben_id() {
  cur_fuben_id_ = 0u;
  clear_has_cur_fuben_id();
}
inline ::google::protobuf::uint32 SG2D_UpdataFuBenBase::cur_fuben_id() const {
  return cur_fuben_id_;
}
inline void SG2D_UpdataFuBenBase::set_cur_fuben_id(::google::protobuf::uint32 value) {
  set_has_cur_fuben_id();
  cur_fuben_id_ = value;
}

// required uint32 cur_stage_id = 3;
inline bool SG2D_UpdataFuBenBase::has_cur_stage_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_UpdataFuBenBase::set_has_cur_stage_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_UpdataFuBenBase::clear_has_cur_stage_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_UpdataFuBenBase::clear_cur_stage_id() {
  cur_stage_id_ = 0u;
  clear_has_cur_stage_id();
}
inline ::google::protobuf::uint32 SG2D_UpdataFuBenBase::cur_stage_id() const {
  return cur_stage_id_;
}
inline void SG2D_UpdataFuBenBase::set_cur_stage_id(::google::protobuf::uint32 value) {
  set_has_cur_stage_id();
  cur_stage_id_ = value;
}

// -------------------------------------------------------------------

// SG2D_UpdataFuBenResource

// required .pb.Data_Operate op_type = 1;
inline bool SG2D_UpdataFuBenResource::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_UpdataFuBenResource::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_UpdataFuBenResource::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_UpdataFuBenResource::clear_op_type() {
  op_type_ = 1;
  clear_has_op_type();
}
inline ::pb::Data_Operate SG2D_UpdataFuBenResource::op_type() const {
  return static_cast< ::pb::Data_Operate >(op_type_);
}
inline void SG2D_UpdataFuBenResource::set_op_type(::pb::Data_Operate value) {
  assert(::pb::Data_Operate_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// optional .pb.GS2C_Resource_Stage info = 2;
inline bool SG2D_UpdataFuBenResource::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_UpdataFuBenResource::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_UpdataFuBenResource::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_UpdataFuBenResource::clear_info() {
  if (info_ != NULL) info_->::pb::GS2C_Resource_Stage::Clear();
  clear_has_info();
}
inline const ::pb::GS2C_Resource_Stage& SG2D_UpdataFuBenResource::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::GS2C_Resource_Stage* SG2D_UpdataFuBenResource::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::GS2C_Resource_Stage;
  return info_;
}
inline ::pb::GS2C_Resource_Stage* SG2D_UpdataFuBenResource::release_info() {
  clear_has_info();
  ::pb::GS2C_Resource_Stage* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SG2D_UpdataFuBenResource::set_allocated_info(::pb::GS2C_Resource_Stage* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// SG2D_UpdataFuBenPassStage

// required .pb.Data_Operate op_type = 1;
inline bool SG2D_UpdataFuBenPassStage::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_UpdataFuBenPassStage::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_UpdataFuBenPassStage::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_UpdataFuBenPassStage::clear_op_type() {
  op_type_ = 1;
  clear_has_op_type();
}
inline ::pb::Data_Operate SG2D_UpdataFuBenPassStage::op_type() const {
  return static_cast< ::pb::Data_Operate >(op_type_);
}
inline void SG2D_UpdataFuBenPassStage::set_op_type(::pb::Data_Operate value) {
  assert(::pb::Data_Operate_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// optional uint32 stage_type = 2;
inline bool SG2D_UpdataFuBenPassStage::has_stage_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_UpdataFuBenPassStage::set_has_stage_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_UpdataFuBenPassStage::clear_has_stage_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_UpdataFuBenPassStage::clear_stage_type() {
  stage_type_ = 0u;
  clear_has_stage_type();
}
inline ::google::protobuf::uint32 SG2D_UpdataFuBenPassStage::stage_type() const {
  return stage_type_;
}
inline void SG2D_UpdataFuBenPassStage::set_stage_type(::google::protobuf::uint32 value) {
  set_has_stage_type();
  stage_type_ = value;
}

// optional uint32 pass_count = 3;
inline bool SG2D_UpdataFuBenPassStage::has_pass_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_UpdataFuBenPassStage::set_has_pass_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_UpdataFuBenPassStage::clear_has_pass_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_UpdataFuBenPassStage::clear_pass_count() {
  pass_count_ = 0u;
  clear_has_pass_count();
}
inline ::google::protobuf::uint32 SG2D_UpdataFuBenPassStage::pass_count() const {
  return pass_count_;
}
inline void SG2D_UpdataFuBenPassStage::set_pass_count(::google::protobuf::uint32 value) {
  set_has_pass_count();
  pass_count_ = value;
}

// optional uint32 is_take_reward = 4;
inline bool SG2D_UpdataFuBenPassStage::has_is_take_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2D_UpdataFuBenPassStage::set_has_is_take_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2D_UpdataFuBenPassStage::clear_has_is_take_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2D_UpdataFuBenPassStage::clear_is_take_reward() {
  is_take_reward_ = 0u;
  clear_has_is_take_reward();
}
inline ::google::protobuf::uint32 SG2D_UpdataFuBenPassStage::is_take_reward() const {
  return is_take_reward_;
}
inline void SG2D_UpdataFuBenPassStage::set_is_take_reward(::google::protobuf::uint32 value) {
  set_has_is_take_reward();
  is_take_reward_ = value;
}

// -------------------------------------------------------------------

// Country_Info_Devide

// optional uint32 countryid = 1;
inline bool Country_Info_Devide::has_countryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Country_Info_Devide::set_has_countryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Country_Info_Devide::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Country_Info_Devide::clear_countryid() {
  countryid_ = 0u;
  clear_has_countryid();
}
inline ::google::protobuf::uint32 Country_Info_Devide::countryid() const {
  return countryid_;
}
inline void Country_Info_Devide::set_countryid(::google::protobuf::uint32 value) {
  set_has_countryid();
  countryid_ = value;
}

// optional uint32 Pros_degree = 2;
inline bool Country_Info_Devide::has_pros_degree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Country_Info_Devide::set_has_pros_degree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Country_Info_Devide::clear_has_pros_degree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Country_Info_Devide::clear_pros_degree() {
  pros_degree_ = 0u;
  clear_has_pros_degree();
}
inline ::google::protobuf::uint32 Country_Info_Devide::pros_degree() const {
  return pros_degree_;
}
inline void Country_Info_Devide::set_pros_degree(::google::protobuf::uint32 value) {
  set_has_pros_degree();
  pros_degree_ = value;
}

// -------------------------------------------------------------------

// SD2G_Country_AllInfo

// repeated .pb.CountyInfo base_info = 1;
inline int SD2G_Country_AllInfo::base_info_size() const {
  return base_info_.size();
}
inline void SD2G_Country_AllInfo::clear_base_info() {
  base_info_.Clear();
}
inline const ::pb::CountyInfo& SD2G_Country_AllInfo::base_info(int index) const {
  return base_info_.Get(index);
}
inline ::pb::CountyInfo* SD2G_Country_AllInfo::mutable_base_info(int index) {
  return base_info_.Mutable(index);
}
inline ::pb::CountyInfo* SD2G_Country_AllInfo::add_base_info() {
  return base_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >&
SD2G_Country_AllInfo::base_info() const {
  return base_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >*
SD2G_Country_AllInfo::mutable_base_info() {
  return &base_info_;
}

// repeated .pb.Struct_City_Info city_lst = 2;
inline int SD2G_Country_AllInfo::city_lst_size() const {
  return city_lst_.size();
}
inline void SD2G_Country_AllInfo::clear_city_lst() {
  city_lst_.Clear();
}
inline const ::pb::Struct_City_Info& SD2G_Country_AllInfo::city_lst(int index) const {
  return city_lst_.Get(index);
}
inline ::pb::Struct_City_Info* SD2G_Country_AllInfo::mutable_city_lst(int index) {
  return city_lst_.Mutable(index);
}
inline ::pb::Struct_City_Info* SD2G_Country_AllInfo::add_city_lst() {
  return city_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >&
SD2G_Country_AllInfo::city_lst() const {
  return city_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >*
SD2G_Country_AllInfo::mutable_city_lst() {
  return &city_lst_;
}

// -------------------------------------------------------------------

// SG2B_Country_Info

// required bool is_can_cross_war = 1;
inline bool SG2B_Country_Info::has_is_can_cross_war() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2B_Country_Info::set_has_is_can_cross_war() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2B_Country_Info::clear_has_is_can_cross_war() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2B_Country_Info::clear_is_can_cross_war() {
  is_can_cross_war_ = false;
  clear_has_is_can_cross_war();
}
inline bool SG2B_Country_Info::is_can_cross_war() const {
  return is_can_cross_war_;
}
inline void SG2B_Country_Info::set_is_can_cross_war(bool value) {
  set_has_is_can_cross_war();
  is_can_cross_war_ = value;
}

// repeated .pb.Country_Info_Devide country_info = 2;
inline int SG2B_Country_Info::country_info_size() const {
  return country_info_.size();
}
inline void SG2B_Country_Info::clear_country_info() {
  country_info_.Clear();
}
inline const ::pb::Country_Info_Devide& SG2B_Country_Info::country_info(int index) const {
  return country_info_.Get(index);
}
inline ::pb::Country_Info_Devide* SG2B_Country_Info::mutable_country_info(int index) {
  return country_info_.Mutable(index);
}
inline ::pb::Country_Info_Devide* SG2B_Country_Info::add_country_info() {
  return country_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Country_Info_Devide >&
SG2B_Country_Info::country_info() const {
  return country_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Country_Info_Devide >*
SG2B_Country_Info::mutable_country_info() {
  return &country_info_;
}

// optional uint32 server_id = 3;
inline bool SG2B_Country_Info::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2B_Country_Info::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2B_Country_Info::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2B_Country_Info::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 SG2B_Country_Info::server_id() const {
  return server_id_;
}
inline void SG2B_Country_Info::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// SB2G_Country_War_Info

// repeated .pb.CountryCrossWarInfo war_info = 1;
inline int SB2G_Country_War_Info::war_info_size() const {
  return war_info_.size();
}
inline void SB2G_Country_War_Info::clear_war_info() {
  war_info_.Clear();
}
inline const ::pb::CountryCrossWarInfo& SB2G_Country_War_Info::war_info(int index) const {
  return war_info_.Get(index);
}
inline ::pb::CountryCrossWarInfo* SB2G_Country_War_Info::mutable_war_info(int index) {
  return war_info_.Mutable(index);
}
inline ::pb::CountryCrossWarInfo* SB2G_Country_War_Info::add_war_info() {
  return war_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CountryCrossWarInfo >&
SB2G_Country_War_Info::war_info() const {
  return war_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CountryCrossWarInfo >*
SB2G_Country_War_Info::mutable_war_info() {
  return &war_info_;
}

// -------------------------------------------------------------------

// SG2R_Country_AllInfo

// repeated .pb.CountyInfo base_info = 1;
inline int SG2R_Country_AllInfo::base_info_size() const {
  return base_info_.size();
}
inline void SG2R_Country_AllInfo::clear_base_info() {
  base_info_.Clear();
}
inline const ::pb::CountyInfo& SG2R_Country_AllInfo::base_info(int index) const {
  return base_info_.Get(index);
}
inline ::pb::CountyInfo* SG2R_Country_AllInfo::mutable_base_info(int index) {
  return base_info_.Mutable(index);
}
inline ::pb::CountyInfo* SG2R_Country_AllInfo::add_base_info() {
  return base_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >&
SG2R_Country_AllInfo::base_info() const {
  return base_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >*
SG2R_Country_AllInfo::mutable_base_info() {
  return &base_info_;
}

// repeated .pb.Struct_City_Info city_lst = 2;
inline int SG2R_Country_AllInfo::city_lst_size() const {
  return city_lst_.size();
}
inline void SG2R_Country_AllInfo::clear_city_lst() {
  city_lst_.Clear();
}
inline const ::pb::Struct_City_Info& SG2R_Country_AllInfo::city_lst(int index) const {
  return city_lst_.Get(index);
}
inline ::pb::Struct_City_Info* SG2R_Country_AllInfo::mutable_city_lst(int index) {
  return city_lst_.Mutable(index);
}
inline ::pb::Struct_City_Info* SG2R_Country_AllInfo::add_city_lst() {
  return city_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >&
SG2R_Country_AllInfo::city_lst() const {
  return city_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >*
SG2R_Country_AllInfo::mutable_city_lst() {
  return &city_lst_;
}

// -------------------------------------------------------------------

// GobalValue

// optional uint32 index = 1;
inline bool GobalValue::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GobalValue::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GobalValue::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GobalValue::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 GobalValue::index() const {
  return index_;
}
inline void GobalValue::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .pb.ValueType type = 2;
inline bool GobalValue::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GobalValue::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GobalValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GobalValue::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pb::ValueType GobalValue::type() const {
  return static_cast< ::pb::ValueType >(type_);
}
inline void GobalValue::set_type(::pb::ValueType value) {
  assert(::pb::ValueType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 i64_value = 3;
inline bool GobalValue::has_i64_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GobalValue::set_has_i64_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GobalValue::clear_has_i64_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GobalValue::clear_i64_value() {
  i64_value_ = GOOGLE_LONGLONG(0);
  clear_has_i64_value();
}
inline ::google::protobuf::int64 GobalValue::i64_value() const {
  return i64_value_;
}
inline void GobalValue::set_i64_value(::google::protobuf::int64 value) {
  set_has_i64_value();
  i64_value_ = value;
}

// optional string str_value = 4;
inline bool GobalValue::has_str_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GobalValue::set_has_str_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GobalValue::clear_has_str_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GobalValue::clear_str_value() {
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    str_value_->clear();
  }
  clear_has_str_value();
}
inline const ::std::string& GobalValue::str_value() const {
  return *str_value_;
}
inline void GobalValue::set_str_value(const ::std::string& value) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(value);
}
inline void GobalValue::set_str_value(const char* value) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(value);
}
inline void GobalValue::set_str_value(const char* value, size_t size) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GobalValue::mutable_str_value() {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  return str_value_;
}
inline ::std::string* GobalValue::release_str_value() {
  clear_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_value_;
    str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GobalValue::set_allocated_str_value(::std::string* str_value) {
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    delete str_value_;
  }
  if (str_value) {
    set_has_str_value();
    str_value_ = str_value;
  } else {
    clear_has_str_value();
    str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 int_value = 5;
inline bool GobalValue::has_int_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GobalValue::set_has_int_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GobalValue::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GobalValue::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
inline ::google::protobuf::int32 GobalValue::int_value() const {
  return int_value_;
}
inline void GobalValue::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
}

// -------------------------------------------------------------------

// ServerGobalValue

// repeated .pb.GobalValue values = 1;
inline int ServerGobalValue::values_size() const {
  return values_.size();
}
inline void ServerGobalValue::clear_values() {
  values_.Clear();
}
inline const ::pb::GobalValue& ServerGobalValue::values(int index) const {
  return values_.Get(index);
}
inline ::pb::GobalValue* ServerGobalValue::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::pb::GobalValue* ServerGobalValue::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GobalValue >&
ServerGobalValue::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GobalValue >*
ServerGobalValue::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// BroadcastHeader

// required .pb.BROADCAST_TYPE type = 1;
inline bool BroadcastHeader::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadcastHeader::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadcastHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadcastHeader::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::BROADCAST_TYPE BroadcastHeader::type() const {
  return static_cast< ::pb::BROADCAST_TYPE >(type_);
}
inline void BroadcastHeader::set_type(::pb::BROADCAST_TYPE value) {
  assert(::pb::BROADCAST_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// SW2C2L_UpdateServerInfo

// required int32 region_id = 1;
inline bool SW2C2L_UpdateServerInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SW2C2L_UpdateServerInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SW2C2L_UpdateServerInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SW2C2L_UpdateServerInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SW2C2L_UpdateServerInfo::region_id() const {
  return region_id_;
}
inline void SW2C2L_UpdateServerInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// repeated int32 server_id = 2;
inline int SW2C2L_UpdateServerInfo::server_id_size() const {
  return server_id_.size();
}
inline void SW2C2L_UpdateServerInfo::clear_server_id() {
  server_id_.Clear();
}
inline ::google::protobuf::int32 SW2C2L_UpdateServerInfo::server_id(int index) const {
  return server_id_.Get(index);
}
inline void SW2C2L_UpdateServerInfo::set_server_id(int index, ::google::protobuf::int32 value) {
  server_id_.Set(index, value);
}
inline void SW2C2L_UpdateServerInfo::add_server_id(::google::protobuf::int32 value) {
  server_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SW2C2L_UpdateServerInfo::server_id() const {
  return server_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SW2C2L_UpdateServerInfo::mutable_server_id() {
  return &server_id_;
}

// -------------------------------------------------------------------

// SG2C2L_UpdatePerformanceInfo

// required int32 region_id = 1;
inline bool SG2C2L_UpdatePerformanceInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2C2L_UpdatePerformanceInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2C2L_UpdatePerformanceInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2C2L_UpdatePerformanceInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SG2C2L_UpdatePerformanceInfo::region_id() const {
  return region_id_;
}
inline void SG2C2L_UpdatePerformanceInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required int32 server_id = 2;
inline bool SG2C2L_UpdatePerformanceInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2C2L_UpdatePerformanceInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2C2L_UpdatePerformanceInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2C2L_UpdatePerformanceInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SG2C2L_UpdatePerformanceInfo::server_id() const {
  return server_id_;
}
inline void SG2C2L_UpdatePerformanceInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 player_count = 3;
inline bool SG2C2L_UpdatePerformanceInfo::has_player_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2C2L_UpdatePerformanceInfo::set_has_player_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2C2L_UpdatePerformanceInfo::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2C2L_UpdatePerformanceInfo::clear_player_count() {
  player_count_ = 0;
  clear_has_player_count();
}
inline ::google::protobuf::int32 SG2C2L_UpdatePerformanceInfo::player_count() const {
  return player_count_;
}
inline void SG2C2L_UpdatePerformanceInfo::set_player_count(::google::protobuf::int32 value) {
  set_has_player_count();
  player_count_ = value;
}

// required uint64 logical_update_ms = 4;
inline bool SG2C2L_UpdatePerformanceInfo::has_logical_update_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2C2L_UpdatePerformanceInfo::set_has_logical_update_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2C2L_UpdatePerformanceInfo::clear_has_logical_update_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2C2L_UpdatePerformanceInfo::clear_logical_update_ms() {
  logical_update_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_logical_update_ms();
}
inline ::google::protobuf::uint64 SG2C2L_UpdatePerformanceInfo::logical_update_ms() const {
  return logical_update_ms_;
}
inline void SG2C2L_UpdatePerformanceInfo::set_logical_update_ms(::google::protobuf::uint64 value) {
  set_has_logical_update_ms();
  logical_update_ms_ = value;
}

// -------------------------------------------------------------------

// SG2D_Broadcast_Info

// required int32 opcode = 1;
inline bool SG2D_Broadcast_Info::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_Broadcast_Info::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_Broadcast_Info::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_Broadcast_Info::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SG2D_Broadcast_Info::opcode() const {
  return opcode_;
}
inline void SG2D_Broadcast_Info::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool is_include = 2;
inline bool SG2D_Broadcast_Info::has_is_include() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_Broadcast_Info::set_has_is_include() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_Broadcast_Info::clear_has_is_include() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_Broadcast_Info::clear_is_include() {
  is_include_ = false;
  clear_has_is_include();
}
inline bool SG2D_Broadcast_Info::is_include() const {
  return is_include_;
}
inline void SG2D_Broadcast_Info::set_is_include(bool value) {
  set_has_is_include();
  is_include_ = value;
}

// repeated uint64 player_ids = 3;
inline int SG2D_Broadcast_Info::player_ids_size() const {
  return player_ids_.size();
}
inline void SG2D_Broadcast_Info::clear_player_ids() {
  player_ids_.Clear();
}
inline ::google::protobuf::uint64 SG2D_Broadcast_Info::player_ids(int index) const {
  return player_ids_.Get(index);
}
inline void SG2D_Broadcast_Info::set_player_ids(int index, ::google::protobuf::uint64 value) {
  player_ids_.Set(index, value);
}
inline void SG2D_Broadcast_Info::add_player_ids(::google::protobuf::uint64 value) {
  player_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SG2D_Broadcast_Info::player_ids() const {
  return player_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SG2D_Broadcast_Info::mutable_player_ids() {
  return &player_ids_;
}

// repeated string player_names = 4;
inline int SG2D_Broadcast_Info::player_names_size() const {
  return player_names_.size();
}
inline void SG2D_Broadcast_Info::clear_player_names() {
  player_names_.Clear();
}
inline const ::std::string& SG2D_Broadcast_Info::player_names(int index) const {
  return player_names_.Get(index);
}
inline ::std::string* SG2D_Broadcast_Info::mutable_player_names(int index) {
  return player_names_.Mutable(index);
}
inline void SG2D_Broadcast_Info::set_player_names(int index, const ::std::string& value) {
  player_names_.Mutable(index)->assign(value);
}
inline void SG2D_Broadcast_Info::set_player_names(int index, const char* value) {
  player_names_.Mutable(index)->assign(value);
}
inline void SG2D_Broadcast_Info::set_player_names(int index, const char* value, size_t size) {
  player_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2D_Broadcast_Info::add_player_names() {
  return player_names_.Add();
}
inline void SG2D_Broadcast_Info::add_player_names(const ::std::string& value) {
  player_names_.Add()->assign(value);
}
inline void SG2D_Broadcast_Info::add_player_names(const char* value) {
  player_names_.Add()->assign(value);
}
inline void SG2D_Broadcast_Info::add_player_names(const char* value, size_t size) {
  player_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SG2D_Broadcast_Info::player_names() const {
  return player_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SG2D_Broadcast_Info::mutable_player_names() {
  return &player_names_;
}

// optional bool result = 5;
inline bool SG2D_Broadcast_Info::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2D_Broadcast_Info::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2D_Broadcast_Info::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2D_Broadcast_Info::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool SG2D_Broadcast_Info::result() const {
  return result_;
}
inline void SG2D_Broadcast_Info::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SG2G_Mail_SendMail

// repeated uint64 to_players = 1;
inline int SG2G_Mail_SendMail::to_players_size() const {
  return to_players_.size();
}
inline void SG2G_Mail_SendMail::clear_to_players() {
  to_players_.Clear();
}
inline ::google::protobuf::uint64 SG2G_Mail_SendMail::to_players(int index) const {
  return to_players_.Get(index);
}
inline void SG2G_Mail_SendMail::set_to_players(int index, ::google::protobuf::uint64 value) {
  to_players_.Set(index, value);
}
inline void SG2G_Mail_SendMail::add_to_players(::google::protobuf::uint64 value) {
  to_players_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SG2G_Mail_SendMail::to_players() const {
  return to_players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SG2G_Mail_SendMail::mutable_to_players() {
  return &to_players_;
}

// optional uint64 mail_id = 2;
inline bool SG2G_Mail_SendMail::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2G_Mail_SendMail::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2G_Mail_SendMail::clear_mail_id() {
  mail_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::uint64 SG2G_Mail_SendMail::mail_id() const {
  return mail_id_;
}
inline void SG2G_Mail_SendMail::set_mail_id(::google::protobuf::uint64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional string plat_form = 3;
inline bool SG2G_Mail_SendMail::has_plat_form() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_plat_form() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2G_Mail_SendMail::clear_has_plat_form() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2G_Mail_SendMail::clear_plat_form() {
  if (plat_form_ != &::google::protobuf::internal::kEmptyString) {
    plat_form_->clear();
  }
  clear_has_plat_form();
}
inline const ::std::string& SG2G_Mail_SendMail::plat_form() const {
  return *plat_form_;
}
inline void SG2G_Mail_SendMail::set_plat_form(const ::std::string& value) {
  set_has_plat_form();
  if (plat_form_ == &::google::protobuf::internal::kEmptyString) {
    plat_form_ = new ::std::string;
  }
  plat_form_->assign(value);
}
inline void SG2G_Mail_SendMail::set_plat_form(const char* value) {
  set_has_plat_form();
  if (plat_form_ == &::google::protobuf::internal::kEmptyString) {
    plat_form_ = new ::std::string;
  }
  plat_form_->assign(value);
}
inline void SG2G_Mail_SendMail::set_plat_form(const char* value, size_t size) {
  set_has_plat_form();
  if (plat_form_ == &::google::protobuf::internal::kEmptyString) {
    plat_form_ = new ::std::string;
  }
  plat_form_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2G_Mail_SendMail::mutable_plat_form() {
  set_has_plat_form();
  if (plat_form_ == &::google::protobuf::internal::kEmptyString) {
    plat_form_ = new ::std::string;
  }
  return plat_form_;
}
inline ::std::string* SG2G_Mail_SendMail::release_plat_form() {
  clear_has_plat_form();
  if (plat_form_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plat_form_;
    plat_form_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2G_Mail_SendMail::set_allocated_plat_form(::std::string* plat_form) {
  if (plat_form_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_form_;
  }
  if (plat_form) {
    set_has_plat_form();
    plat_form_ = plat_form;
  } else {
    clear_has_plat_form();
    plat_form_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 4;
inline bool SG2G_Mail_SendMail::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2G_Mail_SendMail::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2G_Mail_SendMail::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& SG2G_Mail_SendMail::channel() const {
  return *channel_;
}
inline void SG2G_Mail_SendMail::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void SG2G_Mail_SendMail::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void SG2G_Mail_SendMail::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2G_Mail_SendMail::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* SG2G_Mail_SendMail::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2G_Mail_SendMail::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 mail_type = 5;
inline bool SG2G_Mail_SendMail::has_mail_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_mail_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2G_Mail_SendMail::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2G_Mail_SendMail::clear_mail_type() {
  mail_type_ = 0;
  clear_has_mail_type();
}
inline ::google::protobuf::int32 SG2G_Mail_SendMail::mail_type() const {
  return mail_type_;
}
inline void SG2G_Mail_SendMail::set_mail_type(::google::protobuf::int32 value) {
  set_has_mail_type();
  mail_type_ = value;
}

// optional int32 send_type = 6;
inline bool SG2G_Mail_SendMail::has_send_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_send_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SG2G_Mail_SendMail::clear_has_send_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SG2G_Mail_SendMail::clear_send_type() {
  send_type_ = 0;
  clear_has_send_type();
}
inline ::google::protobuf::int32 SG2G_Mail_SendMail::send_type() const {
  return send_type_;
}
inline void SG2G_Mail_SendMail::set_send_type(::google::protobuf::int32 value) {
  set_has_send_type();
  send_type_ = value;
}

// optional uint64 begin_time = 7;
inline bool SG2G_Mail_SendMail::has_begin_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_begin_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SG2G_Mail_SendMail::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SG2G_Mail_SendMail::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::uint64 SG2G_Mail_SendMail::begin_time() const {
  return begin_time_;
}
inline void SG2G_Mail_SendMail::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// optional uint64 end_time = 8;
inline bool SG2G_Mail_SendMail::has_end_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_end_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SG2G_Mail_SendMail::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SG2G_Mail_SendMail::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 SG2G_Mail_SendMail::end_time() const {
  return end_time_;
}
inline void SG2G_Mail_SendMail::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional string title = 9;
inline bool SG2G_Mail_SendMail::has_title() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_title() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SG2G_Mail_SendMail::clear_has_title() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SG2G_Mail_SendMail::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& SG2G_Mail_SendMail::title() const {
  return *title_;
}
inline void SG2G_Mail_SendMail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SG2G_Mail_SendMail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SG2G_Mail_SendMail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2G_Mail_SendMail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* SG2G_Mail_SendMail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2G_Mail_SendMail::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 10;
inline bool SG2G_Mail_SendMail::has_content() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_content() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SG2G_Mail_SendMail::clear_has_content() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SG2G_Mail_SendMail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SG2G_Mail_SendMail::content() const {
  return *content_;
}
inline void SG2G_Mail_SendMail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SG2G_Mail_SendMail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SG2G_Mail_SendMail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2G_Mail_SendMail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SG2G_Mail_SendMail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2G_Mail_SendMail::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string items = 11;
inline bool SG2G_Mail_SendMail::has_items() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SG2G_Mail_SendMail::set_has_items() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SG2G_Mail_SendMail::clear_has_items() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SG2G_Mail_SendMail::clear_items() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& SG2G_Mail_SendMail::items() const {
  return *items_;
}
inline void SG2G_Mail_SendMail::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void SG2G_Mail_SendMail::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void SG2G_Mail_SendMail::set_items(const char* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2G_Mail_SendMail::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  return items_;
}
inline ::std::string* SG2G_Mail_SendMail::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2G_Mail_SendMail::set_allocated_items(::std::string* items) {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (items) {
    set_has_items();
    items_ = items;
  } else {
    clear_has_items();
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SG2D_MailInfoData

// required uint64 player_id = 1;
inline bool SG2D_MailInfoData::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_MailInfoData::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_MailInfoData::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_MailInfoData::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2D_MailInfoData::player_id() const {
  return player_id_;
}
inline void SG2D_MailInfoData::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// required uint64 id = 2;
inline bool SG2D_MailInfoData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_MailInfoData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_MailInfoData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_MailInfoData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 SG2D_MailInfoData::id() const {
  return id_;
}
inline void SG2D_MailInfoData::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required int32 mail_type = 3;
inline bool SG2D_MailInfoData::has_mail_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_MailInfoData::set_has_mail_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_MailInfoData::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_MailInfoData::clear_mail_type() {
  mail_type_ = 0;
  clear_has_mail_type();
}
inline ::google::protobuf::int32 SG2D_MailInfoData::mail_type() const {
  return mail_type_;
}
inline void SG2D_MailInfoData::set_mail_type(::google::protobuf::int32 value) {
  set_has_mail_type();
  mail_type_ = value;
}

// optional uint64 mail_id = 4;
inline bool SG2D_MailInfoData::has_mail_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2D_MailInfoData::set_has_mail_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2D_MailInfoData::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2D_MailInfoData::clear_mail_id() {
  mail_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::uint64 SG2D_MailInfoData::mail_id() const {
  return mail_id_;
}
inline void SG2D_MailInfoData::set_mail_id(::google::protobuf::uint64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required int32 mail_state = 5;
inline bool SG2D_MailInfoData::has_mail_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2D_MailInfoData::set_has_mail_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2D_MailInfoData::clear_has_mail_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2D_MailInfoData::clear_mail_state() {
  mail_state_ = 0;
  clear_has_mail_state();
}
inline ::google::protobuf::int32 SG2D_MailInfoData::mail_state() const {
  return mail_state_;
}
inline void SG2D_MailInfoData::set_mail_state(::google::protobuf::int32 value) {
  set_has_mail_state();
  mail_state_ = value;
}

// optional uint64 send_time = 6;
inline bool SG2D_MailInfoData::has_send_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SG2D_MailInfoData::set_has_send_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SG2D_MailInfoData::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SG2D_MailInfoData::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 SG2D_MailInfoData::send_time() const {
  return send_time_;
}
inline void SG2D_MailInfoData::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
}

// optional bool is_take = 7;
inline bool SG2D_MailInfoData::has_is_take() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SG2D_MailInfoData::set_has_is_take() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SG2D_MailInfoData::clear_has_is_take() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SG2D_MailInfoData::clear_is_take() {
  is_take_ = false;
  clear_has_is_take();
}
inline bool SG2D_MailInfoData::is_take() const {
  return is_take_;
}
inline void SG2D_MailInfoData::set_is_take(bool value) {
  set_has_is_take();
  is_take_ = value;
}

// optional string items = 8;
inline bool SG2D_MailInfoData::has_items() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SG2D_MailInfoData::set_has_items() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SG2D_MailInfoData::clear_has_items() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SG2D_MailInfoData::clear_items() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& SG2D_MailInfoData::items() const {
  return *items_;
}
inline void SG2D_MailInfoData::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void SG2D_MailInfoData::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void SG2D_MailInfoData::set_items(const char* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SG2D_MailInfoData::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  return items_;
}
inline ::std::string* SG2D_MailInfoData::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SG2D_MailInfoData::set_allocated_items(::std::string* items) {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (items) {
    set_has_items();
    items_ = items;
  } else {
    clear_has_items();
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SG2D_MailsOperate

// required int32 operate_type = 1;
inline bool SG2D_MailsOperate::has_operate_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_MailsOperate::set_has_operate_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_MailsOperate::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_MailsOperate::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 SG2D_MailsOperate::operate_type() const {
  return operate_type_;
}
inline void SG2D_MailsOperate::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// repeated .pb.SG2D_MailInfoData mail_info_data = 2;
inline int SG2D_MailsOperate::mail_info_data_size() const {
  return mail_info_data_.size();
}
inline void SG2D_MailsOperate::clear_mail_info_data() {
  mail_info_data_.Clear();
}
inline const ::pb::SG2D_MailInfoData& SG2D_MailsOperate::mail_info_data(int index) const {
  return mail_info_data_.Get(index);
}
inline ::pb::SG2D_MailInfoData* SG2D_MailsOperate::mutable_mail_info_data(int index) {
  return mail_info_data_.Mutable(index);
}
inline ::pb::SG2D_MailInfoData* SG2D_MailsOperate::add_mail_info_data() {
  return mail_info_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SG2D_MailInfoData >&
SG2D_MailsOperate::mail_info_data() const {
  return mail_info_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SG2D_MailInfoData >*
SG2D_MailsOperate::mutable_mail_info_data() {
  return &mail_info_data_;
}

// -------------------------------------------------------------------

// SG2D_Check_Mail_Recivers_Exist

// optional .pb.SG2G_Mail_SendMail mail = 1;
inline bool SG2D_Check_Mail_Recivers_Exist::has_mail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_has_mail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_has_mail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_mail() {
  if (mail_ != NULL) mail_->::pb::SG2G_Mail_SendMail::Clear();
  clear_has_mail();
}
inline const ::pb::SG2G_Mail_SendMail& SG2D_Check_Mail_Recivers_Exist::mail() const {
  return mail_ != NULL ? *mail_ : *default_instance_->mail_;
}
inline ::pb::SG2G_Mail_SendMail* SG2D_Check_Mail_Recivers_Exist::mutable_mail() {
  set_has_mail();
  if (mail_ == NULL) mail_ = new ::pb::SG2G_Mail_SendMail;
  return mail_;
}
inline ::pb::SG2G_Mail_SendMail* SG2D_Check_Mail_Recivers_Exist::release_mail() {
  clear_has_mail();
  ::pb::SG2G_Mail_SendMail* temp = mail_;
  mail_ = NULL;
  return temp;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_allocated_mail(::pb::SG2G_Mail_SendMail* mail) {
  delete mail_;
  mail_ = mail;
  if (mail) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
}

// optional int32 alv = 2;
inline bool SG2D_Check_Mail_Recivers_Exist::has_alv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_has_alv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_has_alv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_alv() {
  alv_ = 0;
  clear_has_alv();
}
inline ::google::protobuf::int32 SG2D_Check_Mail_Recivers_Exist::alv() const {
  return alv_;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_alv(::google::protobuf::int32 value) {
  set_has_alv();
  alv_ = value;
}

// optional int32 blv = 3;
inline bool SG2D_Check_Mail_Recivers_Exist::has_blv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_has_blv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_has_blv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_blv() {
  blv_ = 0;
  clear_has_blv();
}
inline ::google::protobuf::int32 SG2D_Check_Mail_Recivers_Exist::blv() const {
  return blv_;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_blv(::google::protobuf::int32 value) {
  set_has_blv();
  blv_ = value;
}

// optional int32 avip = 4;
inline bool SG2D_Check_Mail_Recivers_Exist::has_avip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_has_avip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_has_avip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_avip() {
  avip_ = 0;
  clear_has_avip();
}
inline ::google::protobuf::int32 SG2D_Check_Mail_Recivers_Exist::avip() const {
  return avip_;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_avip(::google::protobuf::int32 value) {
  set_has_avip();
  avip_ = value;
}

// optional int32 bvip = 5;
inline bool SG2D_Check_Mail_Recivers_Exist::has_bvip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_has_bvip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_has_bvip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_bvip() {
  bvip_ = 0;
  clear_has_bvip();
}
inline ::google::protobuf::int32 SG2D_Check_Mail_Recivers_Exist::bvip() const {
  return bvip_;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_bvip(::google::protobuf::int32 value) {
  set_has_bvip();
  bvip_ = value;
}

// optional bool is_server_mail = 6;
inline bool SG2D_Check_Mail_Recivers_Exist::has_is_server_mail() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_has_is_server_mail() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_has_is_server_mail() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SG2D_Check_Mail_Recivers_Exist::clear_is_server_mail() {
  is_server_mail_ = false;
  clear_has_is_server_mail();
}
inline bool SG2D_Check_Mail_Recivers_Exist::is_server_mail() const {
  return is_server_mail_;
}
inline void SG2D_Check_Mail_Recivers_Exist::set_is_server_mail(bool value) {
  set_has_is_server_mail();
  is_server_mail_ = value;
}

// -------------------------------------------------------------------

// SD2G_Check_Mail_Recivers_Exist_Rspone

// optional .pb.SG2G_Mail_SendMail mail = 1;
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::has_mail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_has_mail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_has_mail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_mail() {
  if (mail_ != NULL) mail_->::pb::SG2G_Mail_SendMail::Clear();
  clear_has_mail();
}
inline const ::pb::SG2G_Mail_SendMail& SD2G_Check_Mail_Recivers_Exist_Rspone::mail() const {
  return mail_ != NULL ? *mail_ : *default_instance_->mail_;
}
inline ::pb::SG2G_Mail_SendMail* SD2G_Check_Mail_Recivers_Exist_Rspone::mutable_mail() {
  set_has_mail();
  if (mail_ == NULL) mail_ = new ::pb::SG2G_Mail_SendMail;
  return mail_;
}
inline ::pb::SG2G_Mail_SendMail* SD2G_Check_Mail_Recivers_Exist_Rspone::release_mail() {
  clear_has_mail();
  ::pb::SG2G_Mail_SendMail* temp = mail_;
  mail_ = NULL;
  return temp;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_allocated_mail(::pb::SG2G_Mail_SendMail* mail) {
  delete mail_;
  mail_ = mail;
  if (mail) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
}

// optional bool is_can_send = 2;
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::has_is_can_send() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_has_is_can_send() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_has_is_can_send() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_is_can_send() {
  is_can_send_ = false;
  clear_has_is_can_send();
}
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::is_can_send() const {
  return is_can_send_;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_is_can_send(bool value) {
  set_has_is_can_send();
  is_can_send_ = value;
}

// optional int32 alv = 3;
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::has_alv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_has_alv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_has_alv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_alv() {
  alv_ = 0;
  clear_has_alv();
}
inline ::google::protobuf::int32 SD2G_Check_Mail_Recivers_Exist_Rspone::alv() const {
  return alv_;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_alv(::google::protobuf::int32 value) {
  set_has_alv();
  alv_ = value;
}

// optional int32 blv = 4;
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::has_blv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_has_blv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_has_blv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_blv() {
  blv_ = 0;
  clear_has_blv();
}
inline ::google::protobuf::int32 SD2G_Check_Mail_Recivers_Exist_Rspone::blv() const {
  return blv_;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_blv(::google::protobuf::int32 value) {
  set_has_blv();
  blv_ = value;
}

// optional int32 avip = 5;
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::has_avip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_has_avip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_has_avip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_avip() {
  avip_ = 0;
  clear_has_avip();
}
inline ::google::protobuf::int32 SD2G_Check_Mail_Recivers_Exist_Rspone::avip() const {
  return avip_;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_avip(::google::protobuf::int32 value) {
  set_has_avip();
  avip_ = value;
}

// optional int32 bvip = 6;
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::has_bvip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_has_bvip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_has_bvip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_bvip() {
  bvip_ = 0;
  clear_has_bvip();
}
inline ::google::protobuf::int32 SD2G_Check_Mail_Recivers_Exist_Rspone::bvip() const {
  return bvip_;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_bvip(::google::protobuf::int32 value) {
  set_has_bvip();
  bvip_ = value;
}

// optional bool is_server_mail = 7;
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::has_is_server_mail() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_has_is_server_mail() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_has_is_server_mail() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::clear_is_server_mail() {
  is_server_mail_ = false;
  clear_has_is_server_mail();
}
inline bool SD2G_Check_Mail_Recivers_Exist_Rspone::is_server_mail() const {
  return is_server_mail_;
}
inline void SD2G_Check_Mail_Recivers_Exist_Rspone::set_is_server_mail(bool value) {
  set_has_is_server_mail();
  is_server_mail_ = value;
}

// -------------------------------------------------------------------

// SG2D_Friend_Operate

// required uint64 playerid = 1;
inline bool SG2D_Friend_Operate::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_Friend_Operate::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_Friend_Operate::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_Friend_Operate::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 SG2D_Friend_Operate::playerid() const {
  return playerid_;
}
inline void SG2D_Friend_Operate::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint64 friendid = 2;
inline bool SG2D_Friend_Operate::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_Friend_Operate::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_Friend_Operate::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_Friend_Operate::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
inline ::google::protobuf::uint64 SG2D_Friend_Operate::friendid() const {
  return friendid_;
}
inline void SG2D_Friend_Operate::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
}

// required int32 listtype = 3;
inline bool SG2D_Friend_Operate::has_listtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_Friend_Operate::set_has_listtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_Friend_Operate::clear_has_listtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_Friend_Operate::clear_listtype() {
  listtype_ = 0;
  clear_has_listtype();
}
inline ::google::protobuf::int32 SG2D_Friend_Operate::listtype() const {
  return listtype_;
}
inline void SG2D_Friend_Operate::set_listtype(::google::protobuf::int32 value) {
  set_has_listtype();
  listtype_ = value;
}

// required int32 operate_type = 4;
inline bool SG2D_Friend_Operate::has_operate_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2D_Friend_Operate::set_has_operate_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2D_Friend_Operate::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2D_Friend_Operate::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 SG2D_Friend_Operate::operate_type() const {
  return operate_type_;
}
inline void SG2D_Friend_Operate::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional bool is_send_ap = 5;
inline bool SG2D_Friend_Operate::has_is_send_ap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2D_Friend_Operate::set_has_is_send_ap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2D_Friend_Operate::clear_has_is_send_ap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2D_Friend_Operate::clear_is_send_ap() {
  is_send_ap_ = false;
  clear_has_is_send_ap();
}
inline bool SG2D_Friend_Operate::is_send_ap() const {
  return is_send_ap_;
}
inline void SG2D_Friend_Operate::set_is_send_ap(bool value) {
  set_has_is_send_ap();
  is_send_ap_ = value;
}

// optional bool ap_value = 6;
inline bool SG2D_Friend_Operate::has_ap_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SG2D_Friend_Operate::set_has_ap_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SG2D_Friend_Operate::clear_has_ap_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SG2D_Friend_Operate::clear_ap_value() {
  ap_value_ = false;
  clear_has_ap_value();
}
inline bool SG2D_Friend_Operate::ap_value() const {
  return ap_value_;
}
inline void SG2D_Friend_Operate::set_ap_value(bool value) {
  set_has_ap_value();
  ap_value_ = value;
}

// -------------------------------------------------------------------

// SD2G_Friend_Operate_Res

// required .pb.SG2D_Friend_Operate operate = 1;
inline bool SD2G_Friend_Operate_Res::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD2G_Friend_Operate_Res::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD2G_Friend_Operate_Res::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD2G_Friend_Operate_Res::clear_operate() {
  if (operate_ != NULL) operate_->::pb::SG2D_Friend_Operate::Clear();
  clear_has_operate();
}
inline const ::pb::SG2D_Friend_Operate& SD2G_Friend_Operate_Res::operate() const {
  return operate_ != NULL ? *operate_ : *default_instance_->operate_;
}
inline ::pb::SG2D_Friend_Operate* SD2G_Friend_Operate_Res::mutable_operate() {
  set_has_operate();
  if (operate_ == NULL) operate_ = new ::pb::SG2D_Friend_Operate;
  return operate_;
}
inline ::pb::SG2D_Friend_Operate* SD2G_Friend_Operate_Res::release_operate() {
  clear_has_operate();
  ::pb::SG2D_Friend_Operate* temp = operate_;
  operate_ = NULL;
  return temp;
}
inline void SD2G_Friend_Operate_Res::set_allocated_operate(::pb::SG2D_Friend_Operate* operate) {
  delete operate_;
  operate_ = operate;
  if (operate) {
    set_has_operate();
  } else {
    clear_has_operate();
  }
}

// required int32 result = 2;
inline bool SD2G_Friend_Operate_Res::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SD2G_Friend_Operate_Res::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SD2G_Friend_Operate_Res::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SD2G_Friend_Operate_Res::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SD2G_Friend_Operate_Res::result() const {
  return result_;
}
inline void SD2G_Friend_Operate_Res::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SG2D_Crusade_Stage

// required uint32 restReset = 1;
inline bool SG2D_Crusade_Stage::has_restreset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_Crusade_Stage::set_has_restreset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_Crusade_Stage::clear_has_restreset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_Crusade_Stage::clear_restreset() {
  restreset_ = 0u;
  clear_has_restreset();
}
inline ::google::protobuf::uint32 SG2D_Crusade_Stage::restreset() const {
  return restreset_;
}
inline void SG2D_Crusade_Stage::set_restreset(::google::protobuf::uint32 value) {
  set_has_restreset();
  restreset_ = value;
}

// required uint64 currFuben = 2;
inline bool SG2D_Crusade_Stage::has_currfuben() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_Crusade_Stage::set_has_currfuben() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_Crusade_Stage::clear_has_currfuben() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_Crusade_Stage::clear_currfuben() {
  currfuben_ = GOOGLE_ULONGLONG(0);
  clear_has_currfuben();
}
inline ::google::protobuf::uint64 SG2D_Crusade_Stage::currfuben() const {
  return currfuben_;
}
inline void SG2D_Crusade_Stage::set_currfuben(::google::protobuf::uint64 value) {
  set_has_currfuben();
  currfuben_ = value;
}

// required uint64 currStage = 3;
inline bool SG2D_Crusade_Stage::has_currstage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_Crusade_Stage::set_has_currstage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_Crusade_Stage::clear_has_currstage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_Crusade_Stage::clear_currstage() {
  currstage_ = GOOGLE_ULONGLONG(0);
  clear_has_currstage();
}
inline ::google::protobuf::uint64 SG2D_Crusade_Stage::currstage() const {
  return currstage_;
}
inline void SG2D_Crusade_Stage::set_currstage(::google::protobuf::uint64 value) {
  set_has_currstage();
  currstage_ = value;
}

// required uint32 isDead = 4;
inline bool SG2D_Crusade_Stage::has_isdead() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SG2D_Crusade_Stage::set_has_isdead() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SG2D_Crusade_Stage::clear_has_isdead() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SG2D_Crusade_Stage::clear_isdead() {
  isdead_ = 0u;
  clear_has_isdead();
}
inline ::google::protobuf::uint32 SG2D_Crusade_Stage::isdead() const {
  return isdead_;
}
inline void SG2D_Crusade_Stage::set_isdead(::google::protobuf::uint32 value) {
  set_has_isdead();
  isdead_ = value;
}

// required uint32 addCharTimes = 5;
inline bool SG2D_Crusade_Stage::has_addchartimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SG2D_Crusade_Stage::set_has_addchartimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SG2D_Crusade_Stage::clear_has_addchartimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SG2D_Crusade_Stage::clear_addchartimes() {
  addchartimes_ = 0u;
  clear_has_addchartimes();
}
inline ::google::protobuf::uint32 SG2D_Crusade_Stage::addchartimes() const {
  return addchartimes_;
}
inline void SG2D_Crusade_Stage::set_addchartimes(::google::protobuf::uint32 value) {
  set_has_addchartimes();
  addchartimes_ = value;
}

// -------------------------------------------------------------------

// GS2C_Select_Country_Rsp

// optional uint32 country_id = 1;
inline bool GS2C_Select_Country_Rsp::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Select_Country_Rsp::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Select_Country_Rsp::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Select_Country_Rsp::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 GS2C_Select_Country_Rsp::country_id() const {
  return country_id_;
}
inline void GS2C_Select_Country_Rsp::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// -------------------------------------------------------------------

// SD2G_All_player_has_sync

// optional bool result = 1;
inline bool SD2G_All_player_has_sync::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD2G_All_player_has_sync::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD2G_All_player_has_sync::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD2G_All_player_has_sync::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool SD2G_All_player_has_sync::result() const {
  return result_;
}
inline void SD2G_All_player_has_sync::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Activity_Occupy_City_Num

// optional uint32 country_id = 1;
inline bool Activity_Occupy_City_Num::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Activity_Occupy_City_Num::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Activity_Occupy_City_Num::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Activity_Occupy_City_Num::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 Activity_Occupy_City_Num::country_id() const {
  return country_id_;
}
inline void Activity_Occupy_City_Num::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 city_num = 2;
inline bool Activity_Occupy_City_Num::has_city_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Activity_Occupy_City_Num::set_has_city_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Activity_Occupy_City_Num::clear_has_city_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Activity_Occupy_City_Num::clear_city_num() {
  city_num_ = 0u;
  clear_has_city_num();
}
inline ::google::protobuf::uint32 Activity_Occupy_City_Num::city_num() const {
  return city_num_;
}
inline void Activity_Occupy_City_Num::set_city_num(::google::protobuf::uint32 value) {
  set_has_city_num();
  city_num_ = value;
}

// -------------------------------------------------------------------

// SD2G_Activity_Occupy_City_Num

// repeated .pb.Activity_Occupy_City_Num info = 1;
inline int SD2G_Activity_Occupy_City_Num::info_size() const {
  return info_.size();
}
inline void SD2G_Activity_Occupy_City_Num::clear_info() {
  info_.Clear();
}
inline const ::pb::Activity_Occupy_City_Num& SD2G_Activity_Occupy_City_Num::info(int index) const {
  return info_.Get(index);
}
inline ::pb::Activity_Occupy_City_Num* SD2G_Activity_Occupy_City_Num::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::pb::Activity_Occupy_City_Num* SD2G_Activity_Occupy_City_Num::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Activity_Occupy_City_Num >&
SD2G_Activity_Occupy_City_Num::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Activity_Occupy_City_Num >*
SD2G_Activity_Occupy_City_Num::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// SR2G_AwardTakePlayer

// optional uint64 playerid = 1;
inline bool SR2G_AwardTakePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SR2G_AwardTakePlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SR2G_AwardTakePlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SR2G_AwardTakePlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 SR2G_AwardTakePlayer::playerid() const {
  return playerid_;
}
inline void SR2G_AwardTakePlayer::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// repeated .pb.PairValue rewards = 2;
inline int SR2G_AwardTakePlayer::rewards_size() const {
  return rewards_.size();
}
inline void SR2G_AwardTakePlayer::clear_rewards() {
  rewards_.Clear();
}
inline const ::pb::PairValue& SR2G_AwardTakePlayer::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::pb::PairValue* SR2G_AwardTakePlayer::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::pb::PairValue* SR2G_AwardTakePlayer::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
SR2G_AwardTakePlayer::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
SR2G_AwardTakePlayer::mutable_rewards() {
  return &rewards_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EventParm_ParmType>() {
  return ::pb::EventParm_ParmType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::RegisterResult>() {
  return ::pb::RegisterResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ACCOUNT_LOCK_TYPE>() {
  return ::pb::ACCOUNT_LOCK_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ACCOUNT_LOCK_OP_TYPE>() {
  return ::pb::ACCOUNT_LOCK_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ValueType>() {
  return ::pb::ValueType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ValueIndex>() {
  return ::pb::ValueIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::BROADCAST_TYPE>() {
  return ::pb::BROADCAST_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_InterServer_2eproto__INCLUDED
