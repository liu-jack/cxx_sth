// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Combat.proto

#ifndef PROTOBUF_Combat_2eproto__INCLUDED
#define PROTOBUF_Combat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Combat_2eproto();
void protobuf_AssignDesc_Combat_2eproto();
void protobuf_ShutdownFile_Combat_2eproto();

class Msg_CombatProperty;
class Msg_CombatObj;
class GS2C_Combat_Pre_Begin;
class C2GS_Combat_Begin;
class GS2C_Combat_Begin;
class C2GS_Combat_Next_Lst;
class GS2C_Combat_Next_Lst;
class GS2C_Combat_Next_Obj;
class GS2C_Combat_Add_Obj;
class GS2C_Combat_Del_Obj;
class C2GS_Combat_Select_Tactic;
class Combat_Reward;
class Combat_Damage;
class extra_awards;
class GS2C_Combat_Select_Tactic;
class Combat_Buff_Remain;
class Combat_Buff_AllInfo;
class C2GS_Combat_Ani_Finished;
class GS2C_Combat_New_Round;
class GS2C_Combat_Select_Tactic_Single;
class C2GS_Combat_Unwatch;
class GS2C_Combat_End;
class GS2C_Combat_Hero_Dead;
class C2GS_Combat_Attract_Enemy;
class GS2C_Combat_Attract_Enemy;
class C2GS_Combat_Rush;
class GS2C_Rush_Result;
class C2GS_Combat_Runaway;
class GS2C_Combat_Runaway;
class C2GS_Combat_Add_Soldier;
class GS2C_Combat_Add_Soldier;
class C2GS_Combat_Call_Up;
class GS2C_Combat_Call_Up;
class C2GS_Combat_Call_Request;
class GS2C_Combat_Call_Request;
class C2GS_Combat_Speed_Up;
class GS2C_Combat_Speed_Up;
class C2GS_Auto_Combat;
class GS2C_Auto_Combat;
class C2GS_Quick_Combat;
class GS2C_Quick_Combat;
class C2GS_Combat_Hero_Status;
class GS2C_Combat_Hero_Status;
class GxDB_Combat_Crusade;
class GS2C_Combat_Crusade;
class Crusade_HeroInfo;
class GS2C_Combat_Crusade_Pre_Begin;
class C2GS_Combat_Crusade_Add_Hero;
class GS2C_Crusade_Take_Reward_Rsp;
class C2GS_Combat_Crusade_Recover_Times;
class GS2C_Combat_Crusade_Add_Hero;
class C2GS_Combat_Try;
class GS2C_Combat_Try;
class C2GS_Onekey_Recover_HP;
class C2GS_REQUEST_TERR;
class GS2C_REQUEST_TERR_RET;
class C2GS_GetMyShadowNum;
class GS2C_GetMyShadowNum;
class GS2C_Add_Reinforce;

enum Msg_ECombatTactic {
  Attack = 0,
  Defence = 1,
  Charge = 2,
  AttackEx = 3,
  DefenceEx = 4,
  ChargeEx = 5,
  SkillTactic = 6
};
bool Msg_ECombatTactic_IsValid(int value);
const Msg_ECombatTactic Msg_ECombatTactic_MIN = Attack;
const Msg_ECombatTactic Msg_ECombatTactic_MAX = SkillTactic;
const int Msg_ECombatTactic_ARRAYSIZE = Msg_ECombatTactic_MAX + 1;

const ::google::protobuf::EnumDescriptor* Msg_ECombatTactic_descriptor();
inline const ::std::string& Msg_ECombatTactic_Name(Msg_ECombatTactic value) {
  return ::google::protobuf::internal::NameOfEnum(
    Msg_ECombatTactic_descriptor(), value);
}
inline bool Msg_ECombatTactic_Parse(
    const ::std::string& name, Msg_ECombatTactic* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Msg_ECombatTactic>(
    Msg_ECombatTactic_descriptor(), name, value);
}
enum Msg_Records_Combat_Gains {
  CombatPlayerExp = 0,
  CombatDead = 1,
  CombatKills = 2,
  CombatExploit = 3,
  CombatInfoNum = 4
};
bool Msg_Records_Combat_Gains_IsValid(int value);
const Msg_Records_Combat_Gains Msg_Records_Combat_Gains_MIN = CombatPlayerExp;
const Msg_Records_Combat_Gains Msg_Records_Combat_Gains_MAX = CombatInfoNum;
const int Msg_Records_Combat_Gains_ARRAYSIZE = Msg_Records_Combat_Gains_MAX + 1;

const ::google::protobuf::EnumDescriptor* Msg_Records_Combat_Gains_descriptor();
inline const ::std::string& Msg_Records_Combat_Gains_Name(Msg_Records_Combat_Gains value) {
  return ::google::protobuf::internal::NameOfEnum(
    Msg_Records_Combat_Gains_descriptor(), value);
}
inline bool Msg_Records_Combat_Gains_Parse(
    const ::std::string& name, Msg_Records_Combat_Gains* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Msg_Records_Combat_Gains>(
    Msg_Records_Combat_Gains_descriptor(), name, value);
}
enum Msg_return_common {
  SUCCESS = 0,
  GROUP_ID_ERR = 1,
  HERO_ERR = 2,
  OTHER_ERR = 3,
  HERO_FIGHTING = 4,
  CITY_NOT_FOUND1 = 5,
  CITY_FAR_AWAY = 6,
  CITY_NOT_FOUND2 = 7,
  CITY_STATE_ERR = 8,
  RUSH_LEGAL = 9,
  ESCAPE_LEGEL = 10,
  NO_ENOUGH_COSTS = 11,
  NO_HERO_HERE = 12,
  NO_CALL_COSTS = 13,
  HERO_IN_CITY = 14,
  HERO_BUSY = 15,
  REQUEST_LEGAL = 16,
  LEVEL_ILLIGAL = 17,
  AIDE_CANT_FIGHT = 18,
  IS_IN_FIGNTING = 19,
  CALL_DOWN = 20,
  CROSS_CALL_OFFICE_ERR = 21,
  NO_ENOUGH_TROOPS = 22,
  RUSH_IN_CD = 23,
  SERVER_BUSY = 24
};
bool Msg_return_common_IsValid(int value);
const Msg_return_common Msg_return_common_MIN = SUCCESS;
const Msg_return_common Msg_return_common_MAX = SERVER_BUSY;
const int Msg_return_common_ARRAYSIZE = Msg_return_common_MAX + 1;

const ::google::protobuf::EnumDescriptor* Msg_return_common_descriptor();
inline const ::std::string& Msg_return_common_Name(Msg_return_common value) {
  return ::google::protobuf::internal::NameOfEnum(
    Msg_return_common_descriptor(), value);
}
inline bool Msg_return_common_Parse(
    const ::std::string& name, Msg_return_common* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Msg_return_common>(
    Msg_return_common_descriptor(), name, value);
}
// ===================================================================

class Msg_CombatProperty : public ::google::protobuf::Message {
 public:
  Msg_CombatProperty();
  virtual ~Msg_CombatProperty();

  Msg_CombatProperty(const Msg_CombatProperty& from);

  inline Msg_CombatProperty& operator=(const Msg_CombatProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_CombatProperty& default_instance();

  void Swap(Msg_CombatProperty* other);

  // implements Message ----------------------------------------------

  Msg_CombatProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_CombatProperty& from);
  void MergeFrom(const Msg_CombatProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tong = 1;
  inline bool has_tong() const;
  inline void clear_tong();
  static const int kTongFieldNumber = 1;
  inline ::google::protobuf::uint32 tong() const;
  inline void set_tong(::google::protobuf::uint32 value);

  // optional uint32 yong = 2;
  inline bool has_yong() const;
  inline void clear_yong();
  static const int kYongFieldNumber = 2;
  inline ::google::protobuf::uint32 yong() const;
  inline void set_yong(::google::protobuf::uint32 value);

  // optional uint32 attack = 3;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 3;
  inline ::google::protobuf::uint32 attack() const;
  inline void set_attack(::google::protobuf::uint32 value);

  // optional uint32 defence = 4;
  inline bool has_defence() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 4;
  inline ::google::protobuf::uint32 defence() const;
  inline void set_defence(::google::protobuf::uint32 value);

  // optional uint32 skillAttack = 5;
  inline bool has_skillattack() const;
  inline void clear_skillattack();
  static const int kSkillAttackFieldNumber = 5;
  inline ::google::protobuf::uint32 skillattack() const;
  inline void set_skillattack(::google::protobuf::uint32 value);

  // optional uint32 skillDefence = 6;
  inline bool has_skilldefence() const;
  inline void clear_skilldefence();
  static const int kSkillDefenceFieldNumber = 6;
  inline ::google::protobuf::uint32 skilldefence() const;
  inline void set_skilldefence(::google::protobuf::uint32 value);

  // optional uint32 attackEx = 7;
  inline bool has_attackex() const;
  inline void clear_attackex();
  static const int kAttackExFieldNumber = 7;
  inline ::google::protobuf::uint32 attackex() const;
  inline void set_attackex(::google::protobuf::uint32 value);

  // optional uint32 defenceEx = 8;
  inline bool has_defenceex() const;
  inline void clear_defenceex();
  static const int kDefenceExFieldNumber = 8;
  inline ::google::protobuf::uint32 defenceex() const;
  inline void set_defenceex(::google::protobuf::uint32 value);

  // optional uint32 rowSoldierMaxCnt = 9;
  inline bool has_rowsoldiermaxcnt() const;
  inline void clear_rowsoldiermaxcnt();
  static const int kRowSoldierMaxCntFieldNumber = 9;
  inline ::google::protobuf::uint32 rowsoldiermaxcnt() const;
  inline void set_rowsoldiermaxcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Msg_CombatProperty)
 private:
  inline void set_has_tong();
  inline void clear_has_tong();
  inline void set_has_yong();
  inline void clear_has_yong();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defence();
  inline void clear_has_defence();
  inline void set_has_skillattack();
  inline void clear_has_skillattack();
  inline void set_has_skilldefence();
  inline void clear_has_skilldefence();
  inline void set_has_attackex();
  inline void clear_has_attackex();
  inline void set_has_defenceex();
  inline void clear_has_defenceex();
  inline void set_has_rowsoldiermaxcnt();
  inline void clear_has_rowsoldiermaxcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tong_;
  ::google::protobuf::uint32 yong_;
  ::google::protobuf::uint32 attack_;
  ::google::protobuf::uint32 defence_;
  ::google::protobuf::uint32 skillattack_;
  ::google::protobuf::uint32 skilldefence_;
  ::google::protobuf::uint32 attackex_;
  ::google::protobuf::uint32 defenceex_;
  ::google::protobuf::uint32 rowsoldiermaxcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static Msg_CombatProperty* default_instance_;
};
// -------------------------------------------------------------------

class Msg_CombatObj : public ::google::protobuf::Message {
 public:
  Msg_CombatObj();
  virtual ~Msg_CombatObj();

  Msg_CombatObj(const Msg_CombatObj& from);

  inline Msg_CombatObj& operator=(const Msg_CombatObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_CombatObj& default_instance();

  void Swap(Msg_CombatObj* other);

  // implements Message ----------------------------------------------

  Msg_CombatObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_CombatObj& from);
  void MergeFrom(const Msg_CombatObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tableId = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional uint64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional string player_name = 3;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 soldierLv = 4;
  inline bool has_soldierlv() const;
  inline void clear_soldierlv();
  static const int kSoldierLvFieldNumber = 4;
  inline ::google::protobuf::uint32 soldierlv() const;
  inline void set_soldierlv(::google::protobuf::uint32 value);

  // repeated uint32 soldierCnt = 5;
  inline int soldiercnt_size() const;
  inline void clear_soldiercnt();
  static const int kSoldierCntFieldNumber = 5;
  inline ::google::protobuf::uint32 soldiercnt(int index) const;
  inline void set_soldiercnt(int index, ::google::protobuf::uint32 value);
  inline void add_soldiercnt(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      soldiercnt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_soldiercnt();

  // optional .pb.Msg_CombatProperty stPro = 6;
  inline bool has_stpro() const;
  inline void clear_stpro();
  static const int kStProFieldNumber = 6;
  inline const ::pb::Msg_CombatProperty& stpro() const;
  inline ::pb::Msg_CombatProperty* mutable_stpro();
  inline ::pb::Msg_CombatProperty* release_stpro();
  inline void set_allocated_stpro(::pb::Msg_CombatProperty* stpro);

  // optional int32 fightPercent = 7;
  inline bool has_fightpercent() const;
  inline void clear_fightpercent();
  static const int kFightPercentFieldNumber = 7;
  inline ::google::protobuf::int32 fightpercent() const;
  inline void set_fightpercent(::google::protobuf::int32 value);

  // optional int32 skillPercent = 8;
  inline bool has_skillpercent() const;
  inline void clear_skillpercent();
  static const int kSkillPercentFieldNumber = 8;
  inline ::google::protobuf::int32 skillpercent() const;
  inline void set_skillpercent(::google::protobuf::int32 value);

  // optional int32 expPercent = 9;
  inline bool has_exppercent() const;
  inline void clear_exppercent();
  static const int kExpPercentFieldNumber = 9;
  inline ::google::protobuf::int32 exppercent() const;
  inline void set_exppercent(::google::protobuf::int32 value);

  // optional uint32 crashAddition = 10;
  inline bool has_crashaddition() const;
  inline void clear_crashaddition();
  static const int kCrashAdditionFieldNumber = 10;
  inline ::google::protobuf::uint32 crashaddition() const;
  inline void set_crashaddition(::google::protobuf::uint32 value);

  // optional uint32 level = 11;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 country = 12;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 12;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // optional uint32 indexInCombat = 13;
  inline bool has_indexincombat() const;
  inline void clear_indexincombat();
  static const int kIndexInCombatFieldNumber = 13;
  inline ::google::protobuf::uint32 indexincombat() const;
  inline void set_indexincombat(::google::protobuf::uint32 value);

  // optional bool isShadow = 14;
  inline bool has_isshadow() const;
  inline void clear_isshadow();
  static const int kIsShadowFieldNumber = 14;
  inline bool isshadow() const;
  inline void set_isshadow(bool value);

  // optional bool isReinforce = 15;
  inline bool has_isreinforce() const;
  inline void clear_isreinforce();
  static const int kIsReinforceFieldNumber = 15;
  inline bool isreinforce() const;
  inline void set_isreinforce(bool value);

  // optional bool isFakeChar = 16;
  inline bool has_isfakechar() const;
  inline void clear_isfakechar();
  static const int kIsFakeCharFieldNumber = 16;
  inline bool isfakechar() const;
  inline void set_isfakechar(bool value);

  // @@protoc_insertion_point(class_scope:pb.Msg_CombatObj)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_soldierlv();
  inline void clear_has_soldierlv();
  inline void set_has_stpro();
  inline void clear_has_stpro();
  inline void set_has_fightpercent();
  inline void clear_has_fightpercent();
  inline void set_has_skillpercent();
  inline void clear_has_skillpercent();
  inline void set_has_exppercent();
  inline void clear_has_exppercent();
  inline void set_has_crashaddition();
  inline void clear_has_crashaddition();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_indexincombat();
  inline void clear_has_indexincombat();
  inline void set_has_isshadow();
  inline void clear_has_isshadow();
  inline void set_has_isreinforce();
  inline void clear_has_isreinforce();
  inline void set_has_isfakechar();
  inline void clear_has_isfakechar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 soldierlv_;
  ::std::string* player_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > soldiercnt_;
  ::pb::Msg_CombatProperty* stpro_;
  ::google::protobuf::int32 fightpercent_;
  ::google::protobuf::int32 skillpercent_;
  ::google::protobuf::int32 exppercent_;
  ::google::protobuf::uint32 crashaddition_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 indexincombat_;
  bool isshadow_;
  bool isreinforce_;
  bool isfakechar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static Msg_CombatObj* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Pre_Begin : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Pre_Begin();
  virtual ~GS2C_Combat_Pre_Begin();

  GS2C_Combat_Pre_Begin(const GS2C_Combat_Pre_Begin& from);

  inline GS2C_Combat_Pre_Begin& operator=(const GS2C_Combat_Pre_Begin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Pre_Begin& default_instance();

  void Swap(GS2C_Combat_Pre_Begin* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Pre_Begin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Pre_Begin& from);
  void MergeFrom(const GS2C_Combat_Pre_Begin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  inline int attack_lst_size() const;
  inline void clear_attack_lst();
  static const int kAttackLstFieldNumber = 2;
  inline const ::pb::Msg_CombatObj& attack_lst(int index) const;
  inline ::pb::Msg_CombatObj* mutable_attack_lst(int index);
  inline ::pb::Msg_CombatObj* add_attack_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      attack_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_attack_lst();

  // repeated .pb.Msg_CombatObj defence_lst = 3;
  inline int defence_lst_size() const;
  inline void clear_defence_lst();
  static const int kDefenceLstFieldNumber = 3;
  inline const ::pb::Msg_CombatObj& defence_lst(int index) const;
  inline ::pb::Msg_CombatObj* mutable_defence_lst(int index);
  inline ::pb::Msg_CombatObj* add_defence_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      defence_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_defence_lst();

  // optional uint32 combat_type = 4;
  inline bool has_combat_type() const;
  inline void clear_combat_type();
  static const int kCombatTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 combat_type() const;
  inline void set_combat_type(::google::protobuf::uint32 value);

  // optional uint32 attack_cnt = 5;
  inline bool has_attack_cnt() const;
  inline void clear_attack_cnt();
  static const int kAttackCntFieldNumber = 5;
  inline ::google::protobuf::uint32 attack_cnt() const;
  inline void set_attack_cnt(::google::protobuf::uint32 value);

  // optional uint32 defence_cnt = 6;
  inline bool has_defence_cnt() const;
  inline void clear_defence_cnt();
  static const int kDefenceCntFieldNumber = 6;
  inline ::google::protobuf::uint32 defence_cnt() const;
  inline void set_defence_cnt(::google::protobuf::uint32 value);

  // optional uint32 terrainTyp = 7;
  inline bool has_terraintyp() const;
  inline void clear_terraintyp();
  static const int kTerrainTypFieldNumber = 7;
  inline ::google::protobuf::uint32 terraintyp() const;
  inline void set_terraintyp(::google::protobuf::uint32 value);

  // optional bool isAutoCombat = 8;
  inline bool has_isautocombat() const;
  inline void clear_isautocombat();
  static const int kIsAutoCombatFieldNumber = 8;
  inline bool isautocombat() const;
  inline void set_isautocombat(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Pre_Begin)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_combat_type();
  inline void clear_has_combat_type();
  inline void set_has_attack_cnt();
  inline void clear_has_attack_cnt();
  inline void set_has_defence_cnt();
  inline void clear_has_defence_cnt();
  inline void set_has_terraintyp();
  inline void clear_has_terraintyp();
  inline void set_has_isautocombat();
  inline void clear_has_isautocombat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > attack_lst_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 combat_type_;
  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > defence_lst_;
  ::google::protobuf::uint32 attack_cnt_;
  ::google::protobuf::uint32 defence_cnt_;
  ::google::protobuf::uint32 terraintyp_;
  bool isautocombat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Pre_Begin* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Begin : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Begin();
  virtual ~C2GS_Combat_Begin();

  C2GS_Combat_Begin(const C2GS_Combat_Begin& from);

  inline C2GS_Combat_Begin& operator=(const C2GS_Combat_Begin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Begin& default_instance();

  void Swap(C2GS_Combat_Begin* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Begin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Begin& from);
  void MergeFrom(const C2GS_Combat_Begin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  inline int attack_lst_size() const;
  inline void clear_attack_lst();
  static const int kAttackLstFieldNumber = 2;
  inline const ::pb::Msg_CombatObj& attack_lst(int index) const;
  inline ::pb::Msg_CombatObj* mutable_attack_lst(int index);
  inline ::pb::Msg_CombatObj* add_attack_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      attack_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_attack_lst();

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Begin)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > attack_lst_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Begin* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Begin : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Begin();
  virtual ~GS2C_Combat_Begin();

  GS2C_Combat_Begin(const GS2C_Combat_Begin& from);

  inline GS2C_Combat_Begin& operator=(const GS2C_Combat_Begin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Begin& default_instance();

  void Swap(GS2C_Combat_Begin* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Begin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Begin& from);
  void MergeFrom(const GS2C_Combat_Begin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  inline int attack_lst_size() const;
  inline void clear_attack_lst();
  static const int kAttackLstFieldNumber = 2;
  inline const ::pb::Msg_CombatObj& attack_lst(int index) const;
  inline ::pb::Msg_CombatObj* mutable_attack_lst(int index);
  inline ::pb::Msg_CombatObj* add_attack_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      attack_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_attack_lst();

  // repeated .pb.Msg_CombatObj defence_lst = 3;
  inline int defence_lst_size() const;
  inline void clear_defence_lst();
  static const int kDefenceLstFieldNumber = 3;
  inline const ::pb::Msg_CombatObj& defence_lst(int index) const;
  inline ::pb::Msg_CombatObj* mutable_defence_lst(int index);
  inline ::pb::Msg_CombatObj* add_defence_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      defence_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_defence_lst();

  // optional uint32 combat_type = 4;
  inline bool has_combat_type() const;
  inline void clear_combat_type();
  static const int kCombatTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 combat_type() const;
  inline void set_combat_type(::google::protobuf::uint32 value);

  // optional uint32 attack_cnt = 5;
  inline bool has_attack_cnt() const;
  inline void clear_attack_cnt();
  static const int kAttackCntFieldNumber = 5;
  inline ::google::protobuf::uint32 attack_cnt() const;
  inline void set_attack_cnt(::google::protobuf::uint32 value);

  // optional uint32 defence_cnt = 6;
  inline bool has_defence_cnt() const;
  inline void clear_defence_cnt();
  static const int kDefenceCntFieldNumber = 6;
  inline ::google::protobuf::uint32 defence_cnt() const;
  inline void set_defence_cnt(::google::protobuf::uint32 value);

  // optional uint64 choose_time = 7;
  inline bool has_choose_time() const;
  inline void clear_choose_time();
  static const int kChooseTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 choose_time() const;
  inline void set_choose_time(::google::protobuf::uint64 value);

  // optional uint64 over_time = 8;
  inline bool has_over_time() const;
  inline void clear_over_time();
  static const int kOverTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 over_time() const;
  inline void set_over_time(::google::protobuf::uint64 value);

  // repeated .pb.Msg_CombatObj attack_all_list = 9;
  inline int attack_all_list_size() const;
  inline void clear_attack_all_list();
  static const int kAttackAllListFieldNumber = 9;
  inline const ::pb::Msg_CombatObj& attack_all_list(int index) const;
  inline ::pb::Msg_CombatObj* mutable_attack_all_list(int index);
  inline ::pb::Msg_CombatObj* add_attack_all_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      attack_all_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_attack_all_list();

  // repeated .pb.Msg_CombatObj defence_all_list = 10;
  inline int defence_all_list_size() const;
  inline void clear_defence_all_list();
  static const int kDefenceAllListFieldNumber = 10;
  inline const ::pb::Msg_CombatObj& defence_all_list(int index) const;
  inline ::pb::Msg_CombatObj* mutable_defence_all_list(int index);
  inline ::pb::Msg_CombatObj* add_defence_all_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      defence_all_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_defence_all_list();

  // optional uint32 attTacticEnableStr = 11;
  inline bool has_atttacticenablestr() const;
  inline void clear_atttacticenablestr();
  static const int kAttTacticEnableStrFieldNumber = 11;
  inline ::google::protobuf::uint32 atttacticenablestr() const;
  inline void set_atttacticenablestr(::google::protobuf::uint32 value);

  // optional uint32 defTacticEnableStr = 12;
  inline bool has_deftacticenablestr() const;
  inline void clear_deftacticenablestr();
  static const int kDefTacticEnableStrFieldNumber = 12;
  inline ::google::protobuf::uint32 deftacticenablestr() const;
  inline void set_deftacticenablestr(::google::protobuf::uint32 value);

  // optional bool canAttSelectTactic = 13;
  inline bool has_canattselecttactic() const;
  inline void clear_canattselecttactic();
  static const int kCanAttSelectTacticFieldNumber = 13;
  inline bool canattselecttactic() const;
  inline void set_canattselecttactic(bool value);

  // optional bool canDefSelectTactic = 14;
  inline bool has_candefselecttactic() const;
  inline void clear_candefselecttactic();
  static const int kCanDefSelectTacticFieldNumber = 14;
  inline bool candefselecttactic() const;
  inline void set_candefselecttactic(bool value);

  // optional uint32 terrainTyp = 15;
  inline bool has_terraintyp() const;
  inline void clear_terraintyp();
  static const int kTerrainTypFieldNumber = 15;
  inline ::google::protobuf::uint32 terraintyp() const;
  inline void set_terraintyp(::google::protobuf::uint32 value);

  // optional uint64 roundCount = 16;
  inline bool has_roundcount() const;
  inline void clear_roundcount();
  static const int kRoundCountFieldNumber = 16;
  inline ::google::protobuf::uint64 roundcount() const;
  inline void set_roundcount(::google::protobuf::uint64 value);

  // optional bool isAutoCombat = 17;
  inline bool has_isautocombat() const;
  inline void clear_isautocombat();
  static const int kIsAutoCombatFieldNumber = 17;
  inline bool isautocombat() const;
  inline void set_isautocombat(bool value);

  // optional uint32 attShadowNum = 18;
  inline bool has_attshadownum() const;
  inline void clear_attshadownum();
  static const int kAttShadowNumFieldNumber = 18;
  inline ::google::protobuf::uint32 attshadownum() const;
  inline void set_attshadownum(::google::protobuf::uint32 value);

  // optional uint32 defShadowNum = 19;
  inline bool has_defshadownum() const;
  inline void clear_defshadownum();
  static const int kDefShadowNumFieldNumber = 19;
  inline ::google::protobuf::uint32 defshadownum() const;
  inline void set_defshadownum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Begin)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_combat_type();
  inline void clear_has_combat_type();
  inline void set_has_attack_cnt();
  inline void clear_has_attack_cnt();
  inline void set_has_defence_cnt();
  inline void clear_has_defence_cnt();
  inline void set_has_choose_time();
  inline void clear_has_choose_time();
  inline void set_has_over_time();
  inline void clear_has_over_time();
  inline void set_has_atttacticenablestr();
  inline void clear_has_atttacticenablestr();
  inline void set_has_deftacticenablestr();
  inline void clear_has_deftacticenablestr();
  inline void set_has_canattselecttactic();
  inline void clear_has_canattselecttactic();
  inline void set_has_candefselecttactic();
  inline void clear_has_candefselecttactic();
  inline void set_has_terraintyp();
  inline void clear_has_terraintyp();
  inline void set_has_roundcount();
  inline void clear_has_roundcount();
  inline void set_has_isautocombat();
  inline void clear_has_isautocombat();
  inline void set_has_attshadownum();
  inline void clear_has_attshadownum();
  inline void set_has_defshadownum();
  inline void clear_has_defshadownum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > attack_lst_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 combat_type_;
  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > defence_lst_;
  ::google::protobuf::uint32 attack_cnt_;
  ::google::protobuf::uint32 defence_cnt_;
  ::google::protobuf::uint64 choose_time_;
  ::google::protobuf::uint64 over_time_;
  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > attack_all_list_;
  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > defence_all_list_;
  ::google::protobuf::uint32 atttacticenablestr_;
  ::google::protobuf::uint32 deftacticenablestr_;
  bool canattselecttactic_;
  bool candefselecttactic_;
  bool isautocombat_;
  ::google::protobuf::uint32 terraintyp_;
  ::google::protobuf::uint64 roundcount_;
  ::google::protobuf::uint32 attshadownum_;
  ::google::protobuf::uint32 defshadownum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Begin* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Next_Lst : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Next_Lst();
  virtual ~C2GS_Combat_Next_Lst();

  C2GS_Combat_Next_Lst(const C2GS_Combat_Next_Lst& from);

  inline C2GS_Combat_Next_Lst& operator=(const C2GS_Combat_Next_Lst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Next_Lst& default_instance();

  void Swap(C2GS_Combat_Next_Lst* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Next_Lst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Next_Lst& from);
  void MergeFrom(const C2GS_Combat_Next_Lst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 indexInCombat = 2;
  inline bool has_indexincombat() const;
  inline void clear_indexincombat();
  static const int kIndexInCombatFieldNumber = 2;
  inline ::google::protobuf::uint32 indexincombat() const;
  inline void set_indexincombat(::google::protobuf::uint32 value);

  // required bool is_attacker = 3;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 3;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Next_Lst)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_indexincombat();
  inline void clear_has_indexincombat();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 indexincombat_;
  bool is_attacker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Next_Lst* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Next_Lst : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Next_Lst();
  virtual ~GS2C_Combat_Next_Lst();

  GS2C_Combat_Next_Lst(const GS2C_Combat_Next_Lst& from);

  inline GS2C_Combat_Next_Lst& operator=(const GS2C_Combat_Next_Lst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Next_Lst& default_instance();

  void Swap(GS2C_Combat_Next_Lst* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Next_Lst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Next_Lst& from);
  void MergeFrom(const GS2C_Combat_Next_Lst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Msg_CombatObj attack_all_list = 1;
  inline int attack_all_list_size() const;
  inline void clear_attack_all_list();
  static const int kAttackAllListFieldNumber = 1;
  inline const ::pb::Msg_CombatObj& attack_all_list(int index) const;
  inline ::pb::Msg_CombatObj* mutable_attack_all_list(int index);
  inline ::pb::Msg_CombatObj* add_attack_all_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      attack_all_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_attack_all_list();

  // repeated .pb.Msg_CombatObj defence_all_list = 2;
  inline int defence_all_list_size() const;
  inline void clear_defence_all_list();
  static const int kDefenceAllListFieldNumber = 2;
  inline const ::pb::Msg_CombatObj& defence_all_list(int index) const;
  inline ::pb::Msg_CombatObj* mutable_defence_all_list(int index);
  inline ::pb::Msg_CombatObj* add_defence_all_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
      defence_all_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
      mutable_defence_all_list();

  // optional uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Next_Lst)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > attack_all_list_;
  ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj > defence_all_list_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Next_Lst* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Next_Obj : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Next_Obj();
  virtual ~GS2C_Combat_Next_Obj();

  GS2C_Combat_Next_Obj(const GS2C_Combat_Next_Obj& from);

  inline GS2C_Combat_Next_Obj& operator=(const GS2C_Combat_Next_Obj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Next_Obj& default_instance();

  void Swap(GS2C_Combat_Next_Obj* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Next_Obj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Next_Obj& from);
  void MergeFrom(const GS2C_Combat_Next_Obj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional .pb.Msg_CombatObj attack = 2;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 2;
  inline const ::pb::Msg_CombatObj& attack() const;
  inline ::pb::Msg_CombatObj* mutable_attack();
  inline ::pb::Msg_CombatObj* release_attack();
  inline void set_allocated_attack(::pb::Msg_CombatObj* attack);

  // optional .pb.Msg_CombatObj defence = 3;
  inline bool has_defence() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 3;
  inline const ::pb::Msg_CombatObj& defence() const;
  inline ::pb::Msg_CombatObj* mutable_defence();
  inline ::pb::Msg_CombatObj* release_defence();
  inline void set_allocated_defence(::pb::Msg_CombatObj* defence);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Next_Obj)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defence();
  inline void clear_has_defence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Msg_CombatObj* attack_;
  ::pb::Msg_CombatObj* defence_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Next_Obj* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Add_Obj : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Add_Obj();
  virtual ~GS2C_Combat_Add_Obj();

  GS2C_Combat_Add_Obj(const GS2C_Combat_Add_Obj& from);

  inline GS2C_Combat_Add_Obj& operator=(const GS2C_Combat_Add_Obj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Add_Obj& default_instance();

  void Swap(GS2C_Combat_Add_Obj* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Add_Obj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Add_Obj& from);
  void MergeFrom(const GS2C_Combat_Add_Obj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 tableId = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional uint64 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional string player_name = 4;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 4;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // required bool is_attacker = 5;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 5;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // optional bool is_shadow = 6;
  inline bool has_is_shadow() const;
  inline void clear_is_shadow();
  static const int kIsShadowFieldNumber = 6;
  inline bool is_shadow() const;
  inline void set_is_shadow(bool value);

  // optional uint32 country_id = 7;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 7;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 indexInCombat = 8;
  inline bool has_indexincombat() const;
  inline void clear_indexincombat();
  static const int kIndexInCombatFieldNumber = 8;
  inline ::google::protobuf::uint32 indexincombat() const;
  inline void set_indexincombat(::google::protobuf::uint32 value);

  // optional uint32 listLengh = 9;
  inline bool has_listlengh() const;
  inline void clear_listlengh();
  static const int kListLenghFieldNumber = 9;
  inline ::google::protobuf::uint32 listlengh() const;
  inline void set_listlengh(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Add_Obj)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();
  inline void set_has_is_shadow();
  inline void clear_has_is_shadow();
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_indexincombat();
  inline void clear_has_indexincombat();
  inline void set_has_listlengh();
  inline void clear_has_listlengh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint64 player_id_;
  ::std::string* player_name_;
  bool is_attacker_;
  bool is_shadow_;
  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 indexincombat_;
  ::google::protobuf::uint32 listlengh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Add_Obj* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Del_Obj : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Del_Obj();
  virtual ~GS2C_Combat_Del_Obj();

  GS2C_Combat_Del_Obj(const GS2C_Combat_Del_Obj& from);

  inline GS2C_Combat_Del_Obj& operator=(const GS2C_Combat_Del_Obj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Del_Obj& default_instance();

  void Swap(GS2C_Combat_Del_Obj* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Del_Obj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Del_Obj& from);
  void MergeFrom(const GS2C_Combat_Del_Obj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .pb.PairValueUint64 attack = 2;
  inline int attack_size() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 2;
  inline const ::pb::PairValueUint64& attack(int index) const;
  inline ::pb::PairValueUint64* mutable_attack(int index);
  inline ::pb::PairValueUint64* add_attack();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 >&
      attack() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 >*
      mutable_attack();

  // repeated .pb.PairValueUint64 defence = 3;
  inline int defence_size() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 3;
  inline const ::pb::PairValueUint64& defence(int index) const;
  inline ::pb::PairValueUint64* mutable_defence(int index);
  inline ::pb::PairValueUint64* add_defence();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 >&
      defence() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 >*
      mutable_defence();

  // optional uint32 indexInCombat = 4;
  inline bool has_indexincombat() const;
  inline void clear_indexincombat();
  static const int kIndexInCombatFieldNumber = 4;
  inline ::google::protobuf::uint32 indexincombat() const;
  inline void set_indexincombat(::google::protobuf::uint32 value);

  // optional uint32 listLengh = 5;
  inline bool has_listlengh() const;
  inline void clear_listlengh();
  static const int kListLenghFieldNumber = 5;
  inline ::google::protobuf::uint32 listlengh() const;
  inline void set_listlengh(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Del_Obj)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_indexincombat();
  inline void clear_has_indexincombat();
  inline void set_has_listlengh();
  inline void clear_has_listlengh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 > attack_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 indexincombat_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 > defence_;
  ::google::protobuf::uint32 listlengh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Del_Obj* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Select_Tactic : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Select_Tactic();
  virtual ~C2GS_Combat_Select_Tactic();

  C2GS_Combat_Select_Tactic(const C2GS_Combat_Select_Tactic& from);

  inline C2GS_Combat_Select_Tactic& operator=(const C2GS_Combat_Select_Tactic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Select_Tactic& default_instance();

  void Swap(C2GS_Combat_Select_Tactic* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Select_Tactic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Select_Tactic& from);
  void MergeFrom(const C2GS_Combat_Select_Tactic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required bool is_attacker = 2;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 2;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // required uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required .pb.Msg_ECombatTactic type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::pb::Msg_ECombatTactic type() const;
  inline void set_type(::pb::Msg_ECombatTactic value);

  // required uint64 roundCount = 5;
  inline bool has_roundcount() const;
  inline void clear_roundcount();
  static const int kRoundCountFieldNumber = 5;
  inline ::google::protobuf::uint64 roundcount() const;
  inline void set_roundcount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Select_Tactic)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roundcount();
  inline void clear_has_roundcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  bool is_attacker_;
  ::google::protobuf::uint32 hero_id_;
  int type_;
  ::google::protobuf::uint64 roundcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Select_Tactic* default_instance_;
};
// -------------------------------------------------------------------

class Combat_Reward : public ::google::protobuf::Message {
 public:
  Combat_Reward();
  virtual ~Combat_Reward();

  Combat_Reward(const Combat_Reward& from);

  inline Combat_Reward& operator=(const Combat_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Combat_Reward& default_instance();

  void Swap(Combat_Reward* other);

  // implements Message ----------------------------------------------

  Combat_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Combat_Reward& from);
  void MergeFrom(const Combat_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 period = 1;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 1;
  inline ::google::protobuf::uint32 period() const;
  inline void set_period(::google::protobuf::uint32 value);

  // optional uint32 group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 coin = 4;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 4;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Combat_Reward)
 private:
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_coin();
  inline void clear_has_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 period_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 coin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static Combat_Reward* default_instance_;
};
// -------------------------------------------------------------------

class Combat_Damage : public ::google::protobuf::Message {
 public:
  Combat_Damage();
  virtual ~Combat_Damage();

  Combat_Damage(const Combat_Damage& from);

  inline Combat_Damage& operator=(const Combat_Damage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Combat_Damage& default_instance();

  void Swap(Combat_Damage* other);

  // implements Message ----------------------------------------------

  Combat_Damage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Combat_Damage& from);
  void MergeFrom(const Combat_Damage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 period = 1;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 1;
  inline ::google::protobuf::uint32 period() const;
  inline void set_period(::google::protobuf::uint32 value);

  // optional uint32 group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint32 range = 3;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 3;
  inline ::google::protobuf::uint32 range() const;
  inline void set_range(::google::protobuf::uint32 value);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 damage = 5;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 5;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 restBlood = 6;
  inline bool has_restblood() const;
  inline void clear_restblood();
  static const int kRestBloodFieldNumber = 6;
  inline ::google::protobuf::uint32 restblood() const;
  inline void set_restblood(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Combat_Damage)
 private:
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_restblood();
  inline void clear_has_restblood();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 period_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 range_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 restblood_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static Combat_Damage* default_instance_;
};
// -------------------------------------------------------------------

class extra_awards : public ::google::protobuf::Message {
 public:
  extra_awards();
  virtual ~extra_awards();

  extra_awards(const extra_awards& from);

  inline extra_awards& operator=(const extra_awards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const extra_awards& default_instance();

  void Swap(extra_awards* other);

  // implements Message ----------------------------------------------

  extra_awards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const extra_awards& from);
  void MergeFrom(const extra_awards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 awardsid = 1;
  inline bool has_awardsid() const;
  inline void clear_awardsid();
  static const int kAwardsidFieldNumber = 1;
  inline ::google::protobuf::uint32 awardsid() const;
  inline void set_awardsid(::google::protobuf::uint32 value);

  // optional uint32 awardsnum = 2;
  inline bool has_awardsnum() const;
  inline void clear_awardsnum();
  static const int kAwardsnumFieldNumber = 2;
  inline ::google::protobuf::uint32 awardsnum() const;
  inline void set_awardsnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.extra_awards)
 private:
  inline void set_has_awardsid();
  inline void clear_has_awardsid();
  inline void set_has_awardsnum();
  inline void clear_has_awardsnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 awardsid_;
  ::google::protobuf::uint32 awardsnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static extra_awards* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Select_Tactic : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Select_Tactic();
  virtual ~GS2C_Combat_Select_Tactic();

  GS2C_Combat_Select_Tactic(const GS2C_Combat_Select_Tactic& from);

  inline GS2C_Combat_Select_Tactic& operator=(const GS2C_Combat_Select_Tactic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Select_Tactic& default_instance();

  void Swap(GS2C_Combat_Select_Tactic* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Select_Tactic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Select_Tactic& from);
  void MergeFrom(const GS2C_Combat_Select_Tactic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Msg_ECombatTactic attack_type = 1;
  inline bool has_attack_type() const;
  inline void clear_attack_type();
  static const int kAttackTypeFieldNumber = 1;
  inline ::pb::Msg_ECombatTactic attack_type() const;
  inline void set_attack_type(::pb::Msg_ECombatTactic value);

  // required .pb.Msg_ECombatTactic defence_type = 2;
  inline bool has_defence_type() const;
  inline void clear_defence_type();
  static const int kDefenceTypeFieldNumber = 2;
  inline ::pb::Msg_ECombatTactic defence_type() const;
  inline void set_defence_type(::pb::Msg_ECombatTactic value);

  // optional bool is_attack_skill_success = 3;
  inline bool has_is_attack_skill_success() const;
  inline void clear_is_attack_skill_success();
  static const int kIsAttackSkillSuccessFieldNumber = 3;
  inline bool is_attack_skill_success() const;
  inline void set_is_attack_skill_success(bool value);

  // optional bool is_defence_skill_success = 4;
  inline bool has_is_defence_skill_success() const;
  inline void clear_is_defence_skill_success();
  static const int kIsDefenceSkillSuccessFieldNumber = 4;
  inline bool is_defence_skill_success() const;
  inline void set_is_defence_skill_success(bool value);

  // repeated .pb.Combat_Damage damages = 5;
  inline int damages_size() const;
  inline void clear_damages();
  static const int kDamagesFieldNumber = 5;
  inline const ::pb::Combat_Damage& damages(int index) const;
  inline ::pb::Combat_Damage* mutable_damages(int index);
  inline ::pb::Combat_Damage* add_damages();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage >&
      damages() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage >*
      mutable_damages();

  // repeated .pb.Combat_Reward rewards = 6;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 6;
  inline const ::pb::Combat_Reward& rewards(int index) const;
  inline ::pb::Combat_Reward* mutable_rewards(int index);
  inline ::pb::Combat_Reward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward >*
      mutable_rewards();

  // optional uint64 over_time = 7;
  inline bool has_over_time() const;
  inline void clear_over_time();
  static const int kOverTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 over_time() const;
  inline void set_over_time(::google::protobuf::uint64 value);

  // optional uint32 attackerNum = 8;
  inline bool has_attackernum() const;
  inline void clear_attackernum();
  static const int kAttackerNumFieldNumber = 8;
  inline ::google::protobuf::uint32 attackernum() const;
  inline void set_attackernum(::google::protobuf::uint32 value);

  // optional uint32 defenderNum = 9;
  inline bool has_defendernum() const;
  inline void clear_defendernum();
  static const int kDefenderNumFieldNumber = 9;
  inline ::google::protobuf::uint32 defendernum() const;
  inline void set_defendernum(::google::protobuf::uint32 value);

  // optional uint32 attSkillID = 10;
  inline bool has_attskillid() const;
  inline void clear_attskillid();
  static const int kAttSkillIDFieldNumber = 10;
  inline ::google::protobuf::uint32 attskillid() const;
  inline void set_attskillid(::google::protobuf::uint32 value);

  // optional uint32 defSkillID = 11;
  inline bool has_defskillid() const;
  inline void clear_defskillid();
  static const int kDefSkillIDFieldNumber = 11;
  inline ::google::protobuf::uint32 defskillid() const;
  inline void set_defskillid(::google::protobuf::uint32 value);

  // repeated .pb.Combat_Buff_Remain buffsRemain = 12;
  inline int buffsremain_size() const;
  inline void clear_buffsremain();
  static const int kBuffsRemainFieldNumber = 12;
  inline const ::pb::Combat_Buff_Remain& buffsremain(int index) const;
  inline ::pb::Combat_Buff_Remain* mutable_buffsremain(int index);
  inline ::pb::Combat_Buff_Remain* add_buffsremain();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain >&
      buffsremain() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain >*
      mutable_buffsremain();

  // optional uint64 roundCount = 13;
  inline bool has_roundcount() const;
  inline void clear_roundcount();
  static const int kRoundCountFieldNumber = 13;
  inline ::google::protobuf::uint64 roundcount() const;
  inline void set_roundcount(::google::protobuf::uint64 value);

  // repeated .pb.extra_awards att_extra_awards = 14;
  inline int att_extra_awards_size() const;
  inline void clear_att_extra_awards();
  static const int kAttExtraAwardsFieldNumber = 14;
  inline const ::pb::extra_awards& att_extra_awards(int index) const;
  inline ::pb::extra_awards* mutable_att_extra_awards(int index);
  inline ::pb::extra_awards* add_att_extra_awards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >&
      att_extra_awards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >*
      mutable_att_extra_awards();

  // repeated .pb.extra_awards def_extra_awards = 15;
  inline int def_extra_awards_size() const;
  inline void clear_def_extra_awards();
  static const int kDefExtraAwardsFieldNumber = 15;
  inline const ::pb::extra_awards& def_extra_awards(int index) const;
  inline ::pb::extra_awards* mutable_def_extra_awards(int index);
  inline ::pb::extra_awards* add_def_extra_awards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >&
      def_extra_awards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >*
      mutable_def_extra_awards();

  // optional uint32 group_id = 16;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 16;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional uint32 attShadowNum = 17;
  inline bool has_attshadownum() const;
  inline void clear_attshadownum();
  static const int kAttShadowNumFieldNumber = 17;
  inline ::google::protobuf::uint32 attshadownum() const;
  inline void set_attshadownum(::google::protobuf::uint32 value);

  // optional uint32 defShadowNum = 18;
  inline bool has_defshadownum() const;
  inline void clear_defshadownum();
  static const int kDefShadowNumFieldNumber = 18;
  inline ::google::protobuf::uint32 defshadownum() const;
  inline void set_defshadownum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Select_Tactic)
 private:
  inline void set_has_attack_type();
  inline void clear_has_attack_type();
  inline void set_has_defence_type();
  inline void clear_has_defence_type();
  inline void set_has_is_attack_skill_success();
  inline void clear_has_is_attack_skill_success();
  inline void set_has_is_defence_skill_success();
  inline void clear_has_is_defence_skill_success();
  inline void set_has_over_time();
  inline void clear_has_over_time();
  inline void set_has_attackernum();
  inline void clear_has_attackernum();
  inline void set_has_defendernum();
  inline void clear_has_defendernum();
  inline void set_has_attskillid();
  inline void clear_has_attskillid();
  inline void set_has_defskillid();
  inline void clear_has_defskillid();
  inline void set_has_roundcount();
  inline void clear_has_roundcount();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attshadownum();
  inline void clear_has_attshadownum();
  inline void set_has_defshadownum();
  inline void clear_has_defshadownum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int attack_type_;
  int defence_type_;
  ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage > damages_;
  bool is_attack_skill_success_;
  bool is_defence_skill_success_;
  ::google::protobuf::uint32 attackernum_;
  ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward > rewards_;
  ::google::protobuf::uint64 over_time_;
  ::google::protobuf::uint32 defendernum_;
  ::google::protobuf::uint32 attskillid_;
  ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain > buffsremain_;
  ::google::protobuf::uint64 roundcount_;
  ::google::protobuf::uint32 defskillid_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedPtrField< ::pb::extra_awards > att_extra_awards_;
  ::google::protobuf::RepeatedPtrField< ::pb::extra_awards > def_extra_awards_;
  ::google::protobuf::uint32 attshadownum_;
  ::google::protobuf::uint32 defshadownum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Select_Tactic* default_instance_;
};
// -------------------------------------------------------------------

class Combat_Buff_Remain : public ::google::protobuf::Message {
 public:
  Combat_Buff_Remain();
  virtual ~Combat_Buff_Remain();

  Combat_Buff_Remain(const Combat_Buff_Remain& from);

  inline Combat_Buff_Remain& operator=(const Combat_Buff_Remain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Combat_Buff_Remain& default_instance();

  void Swap(Combat_Buff_Remain* other);

  // implements Message ----------------------------------------------

  Combat_Buff_Remain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Combat_Buff_Remain& from);
  void MergeFrom(const Combat_Buff_Remain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 groupfrom = 1;
  inline bool has_groupfrom() const;
  inline void clear_groupfrom();
  static const int kGroupfromFieldNumber = 1;
  inline ::google::protobuf::uint32 groupfrom() const;
  inline void set_groupfrom(::google::protobuf::uint32 value);

  // optional uint32 groupto = 2;
  inline bool has_groupto() const;
  inline void clear_groupto();
  static const int kGrouptoFieldNumber = 2;
  inline ::google::protobuf::uint32 groupto() const;
  inline void set_groupto(::google::protobuf::uint32 value);

  // optional uint32 range = 3;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 3;
  inline ::google::protobuf::uint32 range() const;
  inline void set_range(::google::protobuf::uint32 value);

  // optional uint32 buffID = 4;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 4;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Combat_Buff_Remain)
 private:
  inline void set_has_groupfrom();
  inline void clear_has_groupfrom();
  inline void set_has_groupto();
  inline void clear_has_groupto();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 groupfrom_;
  ::google::protobuf::uint32 groupto_;
  ::google::protobuf::uint32 range_;
  ::google::protobuf::uint32 buffid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static Combat_Buff_Remain* default_instance_;
};
// -------------------------------------------------------------------

class Combat_Buff_AllInfo : public ::google::protobuf::Message {
 public:
  Combat_Buff_AllInfo();
  virtual ~Combat_Buff_AllInfo();

  Combat_Buff_AllInfo(const Combat_Buff_AllInfo& from);

  inline Combat_Buff_AllInfo& operator=(const Combat_Buff_AllInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Combat_Buff_AllInfo& default_instance();

  void Swap(Combat_Buff_AllInfo* other);

  // implements Message ----------------------------------------------

  Combat_Buff_AllInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Combat_Buff_AllInfo& from);
  void MergeFrom(const Combat_Buff_AllInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Combat_Damage damages = 1;
  inline int damages_size() const;
  inline void clear_damages();
  static const int kDamagesFieldNumber = 1;
  inline const ::pb::Combat_Damage& damages(int index) const;
  inline ::pb::Combat_Damage* mutable_damages(int index);
  inline ::pb::Combat_Damage* add_damages();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage >&
      damages() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage >*
      mutable_damages();

  // repeated .pb.Combat_Reward rewards = 2;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::pb::Combat_Reward& rewards(int index) const;
  inline ::pb::Combat_Reward* mutable_rewards(int index);
  inline ::pb::Combat_Reward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward >*
      mutable_rewards();

  // repeated .pb.Combat_Buff_Remain buffremians = 3;
  inline int buffremians_size() const;
  inline void clear_buffremians();
  static const int kBuffremiansFieldNumber = 3;
  inline const ::pb::Combat_Buff_Remain& buffremians(int index) const;
  inline ::pb::Combat_Buff_Remain* mutable_buffremians(int index);
  inline ::pb::Combat_Buff_Remain* add_buffremians();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain >&
      buffremians() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain >*
      mutable_buffremians();

  // repeated .pb.extra_awards att_extra_awards = 4;
  inline int att_extra_awards_size() const;
  inline void clear_att_extra_awards();
  static const int kAttExtraAwardsFieldNumber = 4;
  inline const ::pb::extra_awards& att_extra_awards(int index) const;
  inline ::pb::extra_awards* mutable_att_extra_awards(int index);
  inline ::pb::extra_awards* add_att_extra_awards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >&
      att_extra_awards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >*
      mutable_att_extra_awards();

  // repeated .pb.extra_awards def_extra_awards = 5;
  inline int def_extra_awards_size() const;
  inline void clear_def_extra_awards();
  static const int kDefExtraAwardsFieldNumber = 5;
  inline const ::pb::extra_awards& def_extra_awards(int index) const;
  inline ::pb::extra_awards* mutable_def_extra_awards(int index);
  inline ::pb::extra_awards* add_def_extra_awards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >&
      def_extra_awards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >*
      mutable_def_extra_awards();

  // @@protoc_insertion_point(class_scope:pb.Combat_Buff_AllInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage > damages_;
  ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward > rewards_;
  ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain > buffremians_;
  ::google::protobuf::RepeatedPtrField< ::pb::extra_awards > att_extra_awards_;
  ::google::protobuf::RepeatedPtrField< ::pb::extra_awards > def_extra_awards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static Combat_Buff_AllInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Ani_Finished : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Ani_Finished();
  virtual ~C2GS_Combat_Ani_Finished();

  C2GS_Combat_Ani_Finished(const C2GS_Combat_Ani_Finished& from);

  inline C2GS_Combat_Ani_Finished& operator=(const C2GS_Combat_Ani_Finished& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Ani_Finished& default_instance();

  void Swap(C2GS_Combat_Ani_Finished* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Ani_Finished* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Ani_Finished& from);
  void MergeFrom(const C2GS_Combat_Ani_Finished& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // required uint64 roundCount = 2;
  inline bool has_roundcount() const;
  inline void clear_roundcount();
  static const int kRoundCountFieldNumber = 2;
  inline ::google::protobuf::uint64 roundcount() const;
  inline void set_roundcount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Ani_Finished)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_roundcount();
  inline void clear_has_roundcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roundcount_;
  ::google::protobuf::uint32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Ani_Finished* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_New_Round : public ::google::protobuf::Message {
 public:
  GS2C_Combat_New_Round();
  virtual ~GS2C_Combat_New_Round();

  GS2C_Combat_New_Round(const GS2C_Combat_New_Round& from);

  inline GS2C_Combat_New_Round& operator=(const GS2C_Combat_New_Round& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_New_Round& default_instance();

  void Swap(GS2C_Combat_New_Round* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_New_Round* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_New_Round& from);
  void MergeFrom(const GS2C_Combat_New_Round& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 choose_time = 1;
  inline bool has_choose_time() const;
  inline void clear_choose_time();
  static const int kChooseTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 choose_time() const;
  inline void set_choose_time(::google::protobuf::uint64 value);

  // optional uint32 attTacticEnableStr = 2;
  inline bool has_atttacticenablestr() const;
  inline void clear_atttacticenablestr();
  static const int kAttTacticEnableStrFieldNumber = 2;
  inline ::google::protobuf::uint32 atttacticenablestr() const;
  inline void set_atttacticenablestr(::google::protobuf::uint32 value);

  // optional uint32 defTacticEnableStr = 3;
  inline bool has_deftacticenablestr() const;
  inline void clear_deftacticenablestr();
  static const int kDefTacticEnableStrFieldNumber = 3;
  inline ::google::protobuf::uint32 deftacticenablestr() const;
  inline void set_deftacticenablestr(::google::protobuf::uint32 value);

  // optional bool canAttSelectTactic = 4;
  inline bool has_canattselecttactic() const;
  inline void clear_canattselecttactic();
  static const int kCanAttSelectTacticFieldNumber = 4;
  inline bool canattselecttactic() const;
  inline void set_canattselecttactic(bool value);

  // optional bool canDefSelectTactic = 5;
  inline bool has_candefselecttactic() const;
  inline void clear_candefselecttactic();
  static const int kCanDefSelectTacticFieldNumber = 5;
  inline bool candefselecttactic() const;
  inline void set_candefselecttactic(bool value);

  // optional .pb.Combat_Buff_AllInfo buffinfo = 6;
  inline bool has_buffinfo() const;
  inline void clear_buffinfo();
  static const int kBuffinfoFieldNumber = 6;
  inline const ::pb::Combat_Buff_AllInfo& buffinfo() const;
  inline ::pb::Combat_Buff_AllInfo* mutable_buffinfo();
  inline ::pb::Combat_Buff_AllInfo* release_buffinfo();
  inline void set_allocated_buffinfo(::pb::Combat_Buff_AllInfo* buffinfo);

  // optional uint64 roundCount = 7;
  inline bool has_roundcount() const;
  inline void clear_roundcount();
  static const int kRoundCountFieldNumber = 7;
  inline ::google::protobuf::uint64 roundcount() const;
  inline void set_roundcount(::google::protobuf::uint64 value);

  // optional uint32 group_id = 8;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 8;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_New_Round)
 private:
  inline void set_has_choose_time();
  inline void clear_has_choose_time();
  inline void set_has_atttacticenablestr();
  inline void clear_has_atttacticenablestr();
  inline void set_has_deftacticenablestr();
  inline void clear_has_deftacticenablestr();
  inline void set_has_canattselecttactic();
  inline void clear_has_canattselecttactic();
  inline void set_has_candefselecttactic();
  inline void clear_has_candefselecttactic();
  inline void set_has_buffinfo();
  inline void clear_has_buffinfo();
  inline void set_has_roundcount();
  inline void clear_has_roundcount();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 choose_time_;
  ::google::protobuf::uint32 atttacticenablestr_;
  ::google::protobuf::uint32 deftacticenablestr_;
  bool canattselecttactic_;
  bool candefselecttactic_;
  ::google::protobuf::uint32 group_id_;
  ::pb::Combat_Buff_AllInfo* buffinfo_;
  ::google::protobuf::uint64 roundcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_New_Round* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Select_Tactic_Single : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Select_Tactic_Single();
  virtual ~GS2C_Combat_Select_Tactic_Single();

  GS2C_Combat_Select_Tactic_Single(const GS2C_Combat_Select_Tactic_Single& from);

  inline GS2C_Combat_Select_Tactic_Single& operator=(const GS2C_Combat_Select_Tactic_Single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Select_Tactic_Single& default_instance();

  void Swap(GS2C_Combat_Select_Tactic_Single* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Select_Tactic_Single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Select_Tactic_Single& from);
  void MergeFrom(const GS2C_Combat_Select_Tactic_Single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Msg_ECombatTactic type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::pb::Msg_ECombatTactic type() const;
  inline void set_type(::pb::Msg_ECombatTactic value);

  // optional bool is_attacker = 2;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 2;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // optional uint32 attackerNum = 3;
  inline bool has_attackernum() const;
  inline void clear_attackernum();
  static const int kAttackerNumFieldNumber = 3;
  inline ::google::protobuf::uint32 attackernum() const;
  inline void set_attackernum(::google::protobuf::uint32 value);

  // optional uint32 defenderNum = 4;
  inline bool has_defendernum() const;
  inline void clear_defendernum();
  static const int kDefenderNumFieldNumber = 4;
  inline ::google::protobuf::uint32 defendernum() const;
  inline void set_defendernum(::google::protobuf::uint32 value);

  // optional uint64 roundCount = 5;
  inline bool has_roundcount() const;
  inline void clear_roundcount();
  static const int kRoundCountFieldNumber = 5;
  inline ::google::protobuf::uint64 roundcount() const;
  inline void set_roundcount(::google::protobuf::uint64 value);

  // optional uint32 group_id = 6;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 6;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Select_Tactic_Single)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();
  inline void set_has_attackernum();
  inline void clear_has_attackernum();
  inline void set_has_defendernum();
  inline void clear_has_defendernum();
  inline void set_has_roundcount();
  inline void clear_has_roundcount();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool is_attacker_;
  ::google::protobuf::uint32 attackernum_;
  ::google::protobuf::uint32 defendernum_;
  ::google::protobuf::uint64 roundcount_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Select_Tactic_Single* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Unwatch : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Unwatch();
  virtual ~C2GS_Combat_Unwatch();

  C2GS_Combat_Unwatch(const C2GS_Combat_Unwatch& from);

  inline C2GS_Combat_Unwatch& operator=(const C2GS_Combat_Unwatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Unwatch& default_instance();

  void Swap(C2GS_Combat_Unwatch* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Unwatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Unwatch& from);
  void MergeFrom(const C2GS_Combat_Unwatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bool is_in_cross = 2;
  inline bool has_is_in_cross() const;
  inline void clear_is_in_cross();
  static const int kIsInCrossFieldNumber = 2;
  inline bool is_in_cross() const;
  inline void set_is_in_cross(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Unwatch)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_in_cross();
  inline void clear_has_is_in_cross();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  bool is_in_cross_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Unwatch* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_End : public ::google::protobuf::Message {
 public:
  GS2C_Combat_End();
  virtual ~GS2C_Combat_End();

  GS2C_Combat_End(const GS2C_Combat_End& from);

  inline GS2C_Combat_End& operator=(const GS2C_Combat_End& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_End& default_instance();

  void Swap(GS2C_Combat_End* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_End* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_End& from);
  void MergeFrom(const GS2C_Combat_End& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_attack_win = 1;
  inline bool has_is_attack_win() const;
  inline void clear_is_attack_win();
  static const int kIsAttackWinFieldNumber = 1;
  inline bool is_attack_win() const;
  inline void set_is_attack_win(bool value);

  // optional uint32 statisticExp = 2;
  inline bool has_statisticexp() const;
  inline void clear_statisticexp();
  static const int kStatisticExpFieldNumber = 2;
  inline ::google::protobuf::uint32 statisticexp() const;
  inline void set_statisticexp(::google::protobuf::uint32 value);

  // optional uint32 statisticMoney = 3;
  inline bool has_statisticmoney() const;
  inline void clear_statisticmoney();
  static const int kStatisticMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 statisticmoney() const;
  inline void set_statisticmoney(::google::protobuf::uint32 value);

  // optional uint32 statisticDead = 4;
  inline bool has_statisticdead() const;
  inline void clear_statisticdead();
  static const int kStatisticDeadFieldNumber = 4;
  inline ::google::protobuf::uint32 statisticdead() const;
  inline void set_statisticdead(::google::protobuf::uint32 value);

  // optional uint32 statisticKill = 5;
  inline bool has_statistickill() const;
  inline void clear_statistickill();
  static const int kStatisticKillFieldNumber = 5;
  inline ::google::protobuf::uint32 statistickill() const;
  inline void set_statistickill(::google::protobuf::uint32 value);

  // repeated .pb.StReward rewards = 6;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 6;
  inline const ::pb::StReward& rewards(int index) const;
  inline ::pb::StReward* mutable_rewards(int index);
  inline ::pb::StReward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_rewards();

  // optional uint32 group_id = 7;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 7;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .pb.StReward Extrewards = 8;
  inline int extrewards_size() const;
  inline void clear_extrewards();
  static const int kExtrewardsFieldNumber = 8;
  inline const ::pb::StReward& extrewards(int index) const;
  inline ::pb::StReward* mutable_extrewards(int index);
  inline ::pb::StReward* add_extrewards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      extrewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_extrewards();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_End)
 private:
  inline void set_has_is_attack_win();
  inline void clear_has_is_attack_win();
  inline void set_has_statisticexp();
  inline void clear_has_statisticexp();
  inline void set_has_statisticmoney();
  inline void clear_has_statisticmoney();
  inline void set_has_statisticdead();
  inline void clear_has_statisticdead();
  inline void set_has_statistickill();
  inline void clear_has_statistickill();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_attack_win_;
  ::google::protobuf::uint32 statisticexp_;
  ::google::protobuf::uint32 statisticmoney_;
  ::google::protobuf::uint32 statisticdead_;
  ::google::protobuf::RepeatedPtrField< ::pb::StReward > rewards_;
  ::google::protobuf::uint32 statistickill_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedPtrField< ::pb::StReward > extrewards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_End* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Hero_Dead : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Hero_Dead();
  virtual ~GS2C_Combat_Hero_Dead();

  GS2C_Combat_Hero_Dead(const GS2C_Combat_Hero_Dead& from);

  inline GS2C_Combat_Hero_Dead& operator=(const GS2C_Combat_Hero_Dead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Hero_Dead& default_instance();

  void Swap(GS2C_Combat_Hero_Dead* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Hero_Dead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Hero_Dead& from);
  void MergeFrom(const GS2C_Combat_Hero_Dead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // required uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Hero_Dead)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Hero_Dead* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Attract_Enemy : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Attract_Enemy();
  virtual ~C2GS_Combat_Attract_Enemy();

  C2GS_Combat_Attract_Enemy(const C2GS_Combat_Attract_Enemy& from);

  inline C2GS_Combat_Attract_Enemy& operator=(const C2GS_Combat_Attract_Enemy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Attract_Enemy& default_instance();

  void Swap(C2GS_Combat_Attract_Enemy* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Attract_Enemy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Attract_Enemy& from);
  void MergeFrom(const C2GS_Combat_Attract_Enemy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required bool is_attacker = 2;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 2;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Attract_Enemy)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  bool is_attacker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Attract_Enemy* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Attract_Enemy : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Attract_Enemy();
  virtual ~GS2C_Combat_Attract_Enemy();

  GS2C_Combat_Attract_Enemy(const GS2C_Combat_Attract_Enemy& from);

  inline GS2C_Combat_Attract_Enemy& operator=(const GS2C_Combat_Attract_Enemy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Attract_Enemy& default_instance();

  void Swap(GS2C_Combat_Attract_Enemy* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Attract_Enemy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Attract_Enemy& from);
  void MergeFrom(const GS2C_Combat_Attract_Enemy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_success = 1;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  inline bool is_success() const;
  inline void set_is_success(bool value);

  // optional uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional uint64 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional uint32 hero_table_id = 4;
  inline bool has_hero_table_id() const;
  inline void clear_hero_table_id();
  static const int kHeroTableIdFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_table_id() const;
  inline void set_hero_table_id(::google::protobuf::uint32 value);

  // optional uint64 costs = 5;
  inline bool has_costs() const;
  inline void clear_costs();
  static const int kCostsFieldNumber = 5;
  inline ::google::protobuf::uint64 costs() const;
  inline void set_costs(::google::protobuf::uint64 value);

  // optional uint64 my_player_id = 6;
  inline bool has_my_player_id() const;
  inline void clear_my_player_id();
  static const int kMyPlayerIdFieldNumber = 6;
  inline ::google::protobuf::uint64 my_player_id() const;
  inline void set_my_player_id(::google::protobuf::uint64 value);

  // optional uint32 my_hero_id = 7;
  inline bool has_my_hero_id() const;
  inline void clear_my_hero_id();
  static const int kMyHeroIdFieldNumber = 7;
  inline ::google::protobuf::uint32 my_hero_id() const;
  inline void set_my_hero_id(::google::protobuf::uint32 value);

  // optional uint32 old_group_id = 8;
  inline bool has_old_group_id() const;
  inline void clear_old_group_id();
  static const int kOldGroupIdFieldNumber = 8;
  inline ::google::protobuf::uint32 old_group_id() const;
  inline void set_old_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Attract_Enemy)
 private:
  inline void set_has_is_success();
  inline void clear_has_is_success();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_hero_table_id();
  inline void clear_has_hero_table_id();
  inline void set_has_costs();
  inline void clear_has_costs();
  inline void set_has_my_player_id();
  inline void clear_has_my_player_id();
  inline void set_has_my_hero_id();
  inline void clear_has_my_hero_id();
  inline void set_has_old_group_id();
  inline void clear_has_old_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_success_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint64 costs_;
  ::google::protobuf::uint32 hero_table_id_;
  ::google::protobuf::uint32 my_hero_id_;
  ::google::protobuf::uint64 my_player_id_;
  ::google::protobuf::uint32 old_group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Attract_Enemy* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Rush : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Rush();
  virtual ~C2GS_Combat_Rush();

  C2GS_Combat_Rush(const C2GS_Combat_Rush& from);

  inline C2GS_Combat_Rush& operator=(const C2GS_Combat_Rush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Rush& default_instance();

  void Swap(C2GS_Combat_Rush* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Rush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Rush& from);
  void MergeFrom(const C2GS_Combat_Rush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required bool is_attacker = 2;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 2;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // required uint32 city_id = 3;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 3;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // required uint32 hero_id = 4;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Rush)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  bool is_attacker_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Rush* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Rush_Result : public ::google::protobuf::Message {
 public:
  GS2C_Rush_Result();
  virtual ~GS2C_Rush_Result();

  GS2C_Rush_Result(const GS2C_Rush_Result& from);

  inline GS2C_Rush_Result& operator=(const GS2C_Rush_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Rush_Result& default_instance();

  void Swap(GS2C_Rush_Result* other);

  // implements Message ----------------------------------------------

  GS2C_Rush_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Rush_Result& from);
  void MergeFrom(const GS2C_Rush_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Msg_return_common result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::Msg_return_common result() const;
  inline void set_result(::pb::Msg_return_common value);

  // optional uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional uint64 rush_cd_end_time = 3;
  inline bool has_rush_cd_end_time() const;
  inline void clear_rush_cd_end_time();
  static const int kRushCdEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 rush_cd_end_time() const;
  inline void set_rush_cd_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Rush_Result)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_rush_cd_end_time();
  inline void clear_has_rush_cd_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint64 rush_cd_end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Rush_Result* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Runaway : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Runaway();
  virtual ~C2GS_Combat_Runaway();

  C2GS_Combat_Runaway(const C2GS_Combat_Runaway& from);

  inline C2GS_Combat_Runaway& operator=(const C2GS_Combat_Runaway& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Runaway& default_instance();

  void Swap(C2GS_Combat_Runaway* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Runaway* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Runaway& from);
  void MergeFrom(const C2GS_Combat_Runaway& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required bool is_attacker = 2;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 2;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // required uint32 city_id = 3;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 3;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // required uint32 hero_id = 4;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Runaway)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  bool is_attacker_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Runaway* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Runaway : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Runaway();
  virtual ~GS2C_Combat_Runaway();

  GS2C_Combat_Runaway(const GS2C_Combat_Runaway& from);

  inline GS2C_Combat_Runaway& operator=(const GS2C_Combat_Runaway& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Runaway& default_instance();

  void Swap(GS2C_Combat_Runaway* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Runaway* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Runaway& from);
  void MergeFrom(const GS2C_Combat_Runaway& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Msg_return_common result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::Msg_return_common result() const;
  inline void set_result(::pb::Msg_return_common value);

  // optional uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Runaway)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Runaway* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Add_Soldier : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Add_Soldier();
  virtual ~C2GS_Combat_Add_Soldier();

  C2GS_Combat_Add_Soldier(const C2GS_Combat_Add_Soldier& from);

  inline C2GS_Combat_Add_Soldier& operator=(const C2GS_Combat_Add_Soldier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Add_Soldier& default_instance();

  void Swap(C2GS_Combat_Add_Soldier* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Add_Soldier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Add_Soldier& from);
  void MergeFrom(const C2GS_Combat_Add_Soldier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required bool is_attacker = 2;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 2;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // required uint32 times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // required uint32 hero_id = 4;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 curCityId = 5;
  inline bool has_curcityid() const;
  inline void clear_curcityid();
  static const int kCurCityIdFieldNumber = 5;
  inline ::google::protobuf::uint32 curcityid() const;
  inline void set_curcityid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Add_Soldier)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_curcityid();
  inline void clear_has_curcityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  bool is_attacker_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 curcityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Add_Soldier* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Add_Soldier : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Add_Soldier();
  virtual ~GS2C_Combat_Add_Soldier();

  GS2C_Combat_Add_Soldier(const GS2C_Combat_Add_Soldier& from);

  inline GS2C_Combat_Add_Soldier& operator=(const GS2C_Combat_Add_Soldier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Add_Soldier& default_instance();

  void Swap(GS2C_Combat_Add_Soldier* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Add_Soldier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Add_Soldier& from);
  void MergeFrom(const GS2C_Combat_Add_Soldier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Msg_return_common result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::Msg_return_common result() const;
  inline void set_result(::pb::Msg_return_common value);

  // optional uint32 addExp = 2;
  inline bool has_addexp() const;
  inline void clear_addexp();
  static const int kAddExpFieldNumber = 2;
  inline ::google::protobuf::uint32 addexp() const;
  inline void set_addexp(::google::protobuf::uint32 value);

  // optional uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Add_Soldier)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_addexp();
  inline void clear_has_addexp();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 addexp_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Add_Soldier* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Call_Up : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Call_Up();
  virtual ~C2GS_Combat_Call_Up();

  C2GS_Combat_Call_Up(const C2GS_Combat_Call_Up& from);

  inline C2GS_Combat_Call_Up& operator=(const C2GS_Combat_Call_Up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Call_Up& default_instance();

  void Swap(C2GS_Combat_Call_Up* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Call_Up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Call_Up& from);
  void MergeFrom(const C2GS_Combat_Call_Up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Call_Up)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 city_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Call_Up* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Call_Up : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Call_Up();
  virtual ~GS2C_Combat_Call_Up();

  GS2C_Combat_Call_Up(const GS2C_Combat_Call_Up& from);

  inline GS2C_Combat_Call_Up& operator=(const GS2C_Combat_Call_Up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Call_Up& default_instance();

  void Swap(GS2C_Combat_Call_Up* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Call_Up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Call_Up& from);
  void MergeFrom(const GS2C_Combat_Call_Up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Msg_return_common result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::Msg_return_common result() const;
  inline void set_result(::pb::Msg_return_common value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Call_Up)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Call_Up* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Call_Request : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Call_Request();
  virtual ~C2GS_Combat_Call_Request();

  C2GS_Combat_Call_Request(const C2GS_Combat_Call_Request& from);

  inline C2GS_Combat_Call_Request& operator=(const C2GS_Combat_Call_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Call_Request& default_instance();

  void Swap(C2GS_Combat_Call_Request* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Call_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Call_Request& from);
  void MergeFrom(const C2GS_Combat_Call_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 hero_id = 1;
  inline int hero_id_size() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id(int index) const;
  inline void set_hero_id(int index, ::google::protobuf::uint32 value);
  inline void add_hero_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hero_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hero_id();

  // optional uint32 destCityID = 2;
  inline bool has_destcityid() const;
  inline void clear_destcityid();
  static const int kDestCityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 destcityid() const;
  inline void set_destcityid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Call_Request)
 private:
  inline void set_has_destcityid();
  inline void clear_has_destcityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hero_id_;
  ::google::protobuf::uint32 destcityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Call_Request* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Call_Request : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Call_Request();
  virtual ~GS2C_Combat_Call_Request();

  GS2C_Combat_Call_Request(const GS2C_Combat_Call_Request& from);

  inline GS2C_Combat_Call_Request& operator=(const GS2C_Combat_Call_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Call_Request& default_instance();

  void Swap(GS2C_Combat_Call_Request* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Call_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Call_Request& from);
  void MergeFrom(const GS2C_Combat_Call_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Msg_return_common result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::Msg_return_common result() const;
  inline void set_result(::pb::Msg_return_common value);

  // optional uint64 call_up_down_id = 2;
  inline bool has_call_up_down_id() const;
  inline void clear_call_up_down_id();
  static const int kCallUpDownIdFieldNumber = 2;
  inline ::google::protobuf::uint64 call_up_down_id() const;
  inline void set_call_up_down_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Call_Request)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_call_up_down_id();
  inline void clear_has_call_up_down_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 call_up_down_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Call_Request* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Speed_Up : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Speed_Up();
  virtual ~C2GS_Combat_Speed_Up();

  C2GS_Combat_Speed_Up(const C2GS_Combat_Speed_Up& from);

  inline C2GS_Combat_Speed_Up& operator=(const C2GS_Combat_Speed_Up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Speed_Up& default_instance();

  void Swap(C2GS_Combat_Speed_Up* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Speed_Up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Speed_Up& from);
  void MergeFrom(const C2GS_Combat_Speed_Up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 city_id = 2;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 2;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Speed_Up)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_city_id();
  inline void clear_has_city_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 city_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Speed_Up* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Speed_Up : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Speed_Up();
  virtual ~GS2C_Combat_Speed_Up();

  GS2C_Combat_Speed_Up(const GS2C_Combat_Speed_Up& from);

  inline GS2C_Combat_Speed_Up& operator=(const GS2C_Combat_Speed_Up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Speed_Up& default_instance();

  void Swap(GS2C_Combat_Speed_Up* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Speed_Up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Speed_Up& from);
  void MergeFrom(const GS2C_Combat_Speed_Up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Speed_Up)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Speed_Up* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Auto_Combat : public ::google::protobuf::Message {
 public:
  C2GS_Auto_Combat();
  virtual ~C2GS_Auto_Combat();

  C2GS_Auto_Combat(const C2GS_Auto_Combat& from);

  inline C2GS_Auto_Combat& operator=(const C2GS_Auto_Combat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Auto_Combat& default_instance();

  void Swap(C2GS_Auto_Combat* other);

  // implements Message ----------------------------------------------

  C2GS_Auto_Combat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Auto_Combat& from);
  void MergeFrom(const C2GS_Auto_Combat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool useAuto = 2;
  inline bool has_useauto() const;
  inline void clear_useauto();
  static const int kUseAutoFieldNumber = 2;
  inline bool useauto() const;
  inline void set_useauto(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Auto_Combat)
 private:
  inline void set_has_useauto();
  inline void clear_has_useauto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool useauto_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Auto_Combat* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Auto_Combat : public ::google::protobuf::Message {
 public:
  GS2C_Auto_Combat();
  virtual ~GS2C_Auto_Combat();

  GS2C_Auto_Combat(const GS2C_Auto_Combat& from);

  inline GS2C_Auto_Combat& operator=(const GS2C_Auto_Combat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Auto_Combat& default_instance();

  void Swap(GS2C_Auto_Combat* other);

  // implements Message ----------------------------------------------

  GS2C_Auto_Combat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Auto_Combat& from);
  void MergeFrom(const GS2C_Auto_Combat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool useAuto = 1;
  inline bool has_useauto() const;
  inline void clear_useauto();
  static const int kUseAutoFieldNumber = 1;
  inline bool useauto() const;
  inline void set_useauto(bool value);

  // optional bool isSetSuccess = 2;
  inline bool has_issetsuccess() const;
  inline void clear_issetsuccess();
  static const int kIsSetSuccessFieldNumber = 2;
  inline bool issetsuccess() const;
  inline void set_issetsuccess(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Auto_Combat)
 private:
  inline void set_has_useauto();
  inline void clear_has_useauto();
  inline void set_has_issetsuccess();
  inline void clear_has_issetsuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool useauto_;
  bool issetsuccess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Auto_Combat* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Quick_Combat : public ::google::protobuf::Message {
 public:
  C2GS_Quick_Combat();
  virtual ~C2GS_Quick_Combat();

  C2GS_Quick_Combat(const C2GS_Quick_Combat& from);

  inline C2GS_Quick_Combat& operator=(const C2GS_Quick_Combat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Quick_Combat& default_instance();

  void Swap(C2GS_Quick_Combat* other);

  // implements Message ----------------------------------------------

  C2GS_Quick_Combat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Quick_Combat& from);
  void MergeFrom(const C2GS_Quick_Combat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Quick_Combat)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Quick_Combat* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Quick_Combat : public ::google::protobuf::Message {
 public:
  GS2C_Quick_Combat();
  virtual ~GS2C_Quick_Combat();

  GS2C_Quick_Combat(const GS2C_Quick_Combat& from);

  inline GS2C_Quick_Combat& operator=(const GS2C_Quick_Combat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Quick_Combat& default_instance();

  void Swap(GS2C_Quick_Combat* other);

  // implements Message ----------------------------------------------

  GS2C_Quick_Combat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Quick_Combat& from);
  void MergeFrom(const GS2C_Quick_Combat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Quick_Combat)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ret_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Quick_Combat* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Hero_Status : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Hero_Status();
  virtual ~C2GS_Combat_Hero_Status();

  C2GS_Combat_Hero_Status(const C2GS_Combat_Hero_Status& from);

  inline C2GS_Combat_Hero_Status& operator=(const C2GS_Combat_Hero_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Hero_Status& default_instance();

  void Swap(C2GS_Combat_Hero_Status* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Hero_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Hero_Status& from);
  void MergeFrom(const C2GS_Combat_Hero_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_tid = 1;
  inline bool has_hero_tid() const;
  inline void clear_hero_tid();
  static const int kHeroTidFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_tid() const;
  inline void set_hero_tid(::google::protobuf::uint32 value);

  // optional bool isFakeChar = 2;
  inline bool has_isfakechar() const;
  inline void clear_isfakechar();
  static const int kIsFakeCharFieldNumber = 2;
  inline bool isfakechar() const;
  inline void set_isfakechar(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Hero_Status)
 private:
  inline void set_has_hero_tid();
  inline void clear_has_hero_tid();
  inline void set_has_isfakechar();
  inline void clear_has_isfakechar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_tid_;
  bool isfakechar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Hero_Status* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Hero_Status : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Hero_Status();
  virtual ~GS2C_Combat_Hero_Status();

  GS2C_Combat_Hero_Status(const GS2C_Combat_Hero_Status& from);

  inline GS2C_Combat_Hero_Status& operator=(const GS2C_Combat_Hero_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Hero_Status& default_instance();

  void Swap(GS2C_Combat_Hero_Status* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Hero_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Hero_Status& from);
  void MergeFrom(const GS2C_Combat_Hero_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_tid = 1;
  inline bool has_hero_tid() const;
  inline void clear_hero_tid();
  static const int kHeroTidFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_tid() const;
  inline void set_hero_tid(::google::protobuf::uint32 value);

  // optional bool is_in_combat = 2;
  inline bool has_is_in_combat() const;
  inline void clear_is_in_combat();
  static const int kIsInCombatFieldNumber = 2;
  inline bool is_in_combat() const;
  inline void set_is_in_combat(bool value);

  // optional bool is_fighting = 3;
  inline bool has_is_fighting() const;
  inline void clear_is_fighting();
  static const int kIsFightingFieldNumber = 3;
  inline bool is_fighting() const;
  inline void set_is_fighting(bool value);

  // optional bool is_dead = 4;
  inline bool has_is_dead() const;
  inline void clear_is_dead();
  static const int kIsDeadFieldNumber = 4;
  inline bool is_dead() const;
  inline void set_is_dead(bool value);

  // optional uint32 combat_type = 5;
  inline bool has_combat_type() const;
  inline void clear_combat_type();
  static const int kCombatTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 combat_type() const;
  inline void set_combat_type(::google::protobuf::uint32 value);

  // optional uint32 group_id = 6;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 6;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bool is_in_attract = 7;
  inline bool has_is_in_attract() const;
  inline void clear_is_in_attract();
  static const int kIsInAttractFieldNumber = 7;
  inline bool is_in_attract() const;
  inline void set_is_in_attract(bool value);

  // optional uint32 cityId = 8;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 8;
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional bool isFakeChar = 9;
  inline bool has_isfakechar() const;
  inline void clear_isfakechar();
  static const int kIsFakeCharFieldNumber = 9;
  inline bool isfakechar() const;
  inline void set_isfakechar(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Hero_Status)
 private:
  inline void set_has_hero_tid();
  inline void clear_has_hero_tid();
  inline void set_has_is_in_combat();
  inline void clear_has_is_in_combat();
  inline void set_has_is_fighting();
  inline void clear_has_is_fighting();
  inline void set_has_is_dead();
  inline void clear_has_is_dead();
  inline void set_has_combat_type();
  inline void clear_has_combat_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_in_attract();
  inline void clear_has_is_in_attract();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_isfakechar();
  inline void clear_has_isfakechar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_tid_;
  bool is_in_combat_;
  bool is_fighting_;
  bool is_dead_;
  bool is_in_attract_;
  ::google::protobuf::uint32 combat_type_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 cityid_;
  bool isfakechar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Hero_Status* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_Combat_Crusade : public ::google::protobuf::Message {
 public:
  GxDB_Combat_Crusade();
  virtual ~GxDB_Combat_Crusade();

  GxDB_Combat_Crusade(const GxDB_Combat_Crusade& from);

  inline GxDB_Combat_Crusade& operator=(const GxDB_Combat_Crusade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_Combat_Crusade& default_instance();

  void Swap(GxDB_Combat_Crusade* other);

  // implements Message ----------------------------------------------

  GxDB_Combat_Crusade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_Combat_Crusade& from);
  void MergeFrom(const GxDB_Combat_Crusade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level_id = 1;
  inline bool has_level_id() const;
  inline void clear_level_id();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 level_id() const;
  inline void set_level_id(::google::protobuf::uint32 value);

  // required uint32 stage_state = 2;
  inline bool has_stage_state() const;
  inline void clear_stage_state();
  static const int kStageStateFieldNumber = 2;
  inline ::google::protobuf::uint32 stage_state() const;
  inline void set_stage_state(::google::protobuf::uint32 value);

  // required uint32 rewards_state = 3;
  inline bool has_rewards_state() const;
  inline void clear_rewards_state();
  static const int kRewardsStateFieldNumber = 3;
  inline ::google::protobuf::uint32 rewards_state() const;
  inline void set_rewards_state(::google::protobuf::uint32 value);

  // required uint32 reset_lefttimes = 4;
  inline bool has_reset_lefttimes() const;
  inline void clear_reset_lefttimes();
  static const int kResetLefttimesFieldNumber = 4;
  inline ::google::protobuf::uint32 reset_lefttimes() const;
  inline void set_reset_lefttimes(::google::protobuf::uint32 value);

  // required uint32 add_lefttimes = 5;
  inline bool has_add_lefttimes() const;
  inline void clear_add_lefttimes();
  static const int kAddLefttimesFieldNumber = 5;
  inline ::google::protobuf::uint32 add_lefttimes() const;
  inline void set_add_lefttimes(::google::protobuf::uint32 value);

  // optional uint32 is_Crusade_over = 6;
  inline bool has_is_crusade_over() const;
  inline void clear_is_crusade_over();
  static const int kIsCrusadeOverFieldNumber = 6;
  inline ::google::protobuf::uint32 is_crusade_over() const;
  inline void set_is_crusade_over(::google::protobuf::uint32 value);

  // repeated .pb.PairValue charTimeList = 7;
  inline int chartimelist_size() const;
  inline void clear_chartimelist();
  static const int kCharTimeListFieldNumber = 7;
  inline const ::pb::PairValue& chartimelist(int index) const;
  inline ::pb::PairValue* mutable_chartimelist(int index);
  inline ::pb::PairValue* add_chartimelist();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      chartimelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_chartimelist();

  // @@protoc_insertion_point(class_scope:pb.GxDB_Combat_Crusade)
 private:
  inline void set_has_level_id();
  inline void clear_has_level_id();
  inline void set_has_stage_state();
  inline void clear_has_stage_state();
  inline void set_has_rewards_state();
  inline void clear_has_rewards_state();
  inline void set_has_reset_lefttimes();
  inline void clear_has_reset_lefttimes();
  inline void set_has_add_lefttimes();
  inline void clear_has_add_lefttimes();
  inline void set_has_is_crusade_over();
  inline void clear_has_is_crusade_over();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 stage_state_;
  ::google::protobuf::uint32 rewards_state_;
  ::google::protobuf::uint32 reset_lefttimes_;
  ::google::protobuf::uint32 add_lefttimes_;
  ::google::protobuf::uint32 is_crusade_over_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > chartimelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GxDB_Combat_Crusade* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Crusade : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Crusade();
  virtual ~GS2C_Combat_Crusade();

  GS2C_Combat_Crusade(const GS2C_Combat_Crusade& from);

  inline GS2C_Combat_Crusade& operator=(const GS2C_Combat_Crusade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Crusade& default_instance();

  void Swap(GS2C_Combat_Crusade* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Crusade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Crusade& from);
  void MergeFrom(const GS2C_Combat_Crusade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level_id = 1;
  inline bool has_level_id() const;
  inline void clear_level_id();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 level_id() const;
  inline void set_level_id(::google::protobuf::uint32 value);

  // required uint32 stage_state = 2;
  inline bool has_stage_state() const;
  inline void clear_stage_state();
  static const int kStageStateFieldNumber = 2;
  inline ::google::protobuf::uint32 stage_state() const;
  inline void set_stage_state(::google::protobuf::uint32 value);

  // required uint64 rewards_state = 3;
  inline bool has_rewards_state() const;
  inline void clear_rewards_state();
  static const int kRewardsStateFieldNumber = 3;
  inline ::google::protobuf::uint64 rewards_state() const;
  inline void set_rewards_state(::google::protobuf::uint64 value);

  // required uint32 reset_lefttimes = 4;
  inline bool has_reset_lefttimes() const;
  inline void clear_reset_lefttimes();
  static const int kResetLefttimesFieldNumber = 4;
  inline ::google::protobuf::uint32 reset_lefttimes() const;
  inline void set_reset_lefttimes(::google::protobuf::uint32 value);

  // required uint32 add_lefttimes = 5;
  inline bool has_add_lefttimes() const;
  inline void clear_add_lefttimes();
  static const int kAddLefttimesFieldNumber = 5;
  inline ::google::protobuf::uint32 add_lefttimes() const;
  inline void set_add_lefttimes(::google::protobuf::uint32 value);

  // optional uint32 is_Crusade_over = 6;
  inline bool has_is_crusade_over() const;
  inline void clear_is_crusade_over();
  static const int kIsCrusadeOverFieldNumber = 6;
  inline ::google::protobuf::uint32 is_crusade_over() const;
  inline void set_is_crusade_over(::google::protobuf::uint32 value);

  // repeated .pb.PairValue charTimeList = 7;
  inline int chartimelist_size() const;
  inline void clear_chartimelist();
  static const int kCharTimeListFieldNumber = 7;
  inline const ::pb::PairValue& chartimelist(int index) const;
  inline ::pb::PairValue* mutable_chartimelist(int index);
  inline ::pb::PairValue* add_chartimelist();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      chartimelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_chartimelist();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Crusade)
 private:
  inline void set_has_level_id();
  inline void clear_has_level_id();
  inline void set_has_stage_state();
  inline void clear_has_stage_state();
  inline void set_has_rewards_state();
  inline void clear_has_rewards_state();
  inline void set_has_reset_lefttimes();
  inline void clear_has_reset_lefttimes();
  inline void set_has_add_lefttimes();
  inline void clear_has_add_lefttimes();
  inline void set_has_is_crusade_over();
  inline void clear_has_is_crusade_over();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 stage_state_;
  ::google::protobuf::uint64 rewards_state_;
  ::google::protobuf::uint32 reset_lefttimes_;
  ::google::protobuf::uint32 add_lefttimes_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > chartimelist_;
  ::google::protobuf::uint32 is_crusade_over_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Crusade* default_instance_;
};
// -------------------------------------------------------------------

class Crusade_HeroInfo : public ::google::protobuf::Message {
 public:
  Crusade_HeroInfo();
  virtual ~Crusade_HeroInfo();

  Crusade_HeroInfo(const Crusade_HeroInfo& from);

  inline Crusade_HeroInfo& operator=(const Crusade_HeroInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Crusade_HeroInfo& default_instance();

  void Swap(Crusade_HeroInfo* other);

  // implements Message ----------------------------------------------

  Crusade_HeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Crusade_HeroInfo& from);
  void MergeFrom(const Crusade_HeroInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required uint32 lefttime = 2;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLefttimeFieldNumber = 2;
  inline ::google::protobuf::uint32 lefttime() const;
  inline void set_lefttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Crusade_HeroInfo)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static Crusade_HeroInfo* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Crusade_Pre_Begin : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Crusade_Pre_Begin();
  virtual ~GS2C_Combat_Crusade_Pre_Begin();

  GS2C_Combat_Crusade_Pre_Begin(const GS2C_Combat_Crusade_Pre_Begin& from);

  inline GS2C_Combat_Crusade_Pre_Begin& operator=(const GS2C_Combat_Crusade_Pre_Begin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Crusade_Pre_Begin& default_instance();

  void Swap(GS2C_Combat_Crusade_Pre_Begin* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Crusade_Pre_Begin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Crusade_Pre_Begin& from);
  void MergeFrom(const GS2C_Combat_Crusade_Pre_Begin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Crusade_HeroInfo hero_info = 1;
  inline int hero_info_size() const;
  inline void clear_hero_info();
  static const int kHeroInfoFieldNumber = 1;
  inline const ::pb::Crusade_HeroInfo& hero_info(int index) const;
  inline ::pb::Crusade_HeroInfo* mutable_hero_info(int index);
  inline ::pb::Crusade_HeroInfo* add_hero_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Crusade_HeroInfo >&
      hero_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Crusade_HeroInfo >*
      mutable_hero_info();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Crusade_Pre_Begin)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Crusade_HeroInfo > hero_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Crusade_Pre_Begin* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Crusade_Add_Hero : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Crusade_Add_Hero();
  virtual ~C2GS_Combat_Crusade_Add_Hero();

  C2GS_Combat_Crusade_Add_Hero(const C2GS_Combat_Crusade_Add_Hero& from);

  inline C2GS_Combat_Crusade_Add_Hero& operator=(const C2GS_Combat_Crusade_Add_Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Crusade_Add_Hero& default_instance();

  void Swap(C2GS_Combat_Crusade_Add_Hero* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Crusade_Add_Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Crusade_Add_Hero& from);
  void MergeFrom(const C2GS_Combat_Crusade_Add_Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Crusade_Add_Hero)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Crusade_Add_Hero* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Crusade_Take_Reward_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Crusade_Take_Reward_Rsp();
  virtual ~GS2C_Crusade_Take_Reward_Rsp();

  GS2C_Crusade_Take_Reward_Rsp(const GS2C_Crusade_Take_Reward_Rsp& from);

  inline GS2C_Crusade_Take_Reward_Rsp& operator=(const GS2C_Crusade_Take_Reward_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Crusade_Take_Reward_Rsp& default_instance();

  void Swap(GS2C_Crusade_Take_Reward_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Crusade_Take_Reward_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Crusade_Take_Reward_Rsp& from);
  void MergeFrom(const GS2C_Crusade_Take_Reward_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline bool ret() const;
  inline void set_ret(bool value);

  // repeated .pb.StReward reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::pb::StReward& reward(int index) const;
  inline ::pb::StReward* mutable_reward(int index);
  inline ::pb::StReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Crusade_Take_Reward_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::StReward > reward_;
  bool ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Crusade_Take_Reward_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Crusade_Recover_Times : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Crusade_Recover_Times();
  virtual ~C2GS_Combat_Crusade_Recover_Times();

  C2GS_Combat_Crusade_Recover_Times(const C2GS_Combat_Crusade_Recover_Times& from);

  inline C2GS_Combat_Crusade_Recover_Times& operator=(const C2GS_Combat_Crusade_Recover_Times& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Crusade_Recover_Times& default_instance();

  void Swap(C2GS_Combat_Crusade_Recover_Times* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Crusade_Recover_Times* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Crusade_Recover_Times& from);
  void MergeFrom(const C2GS_Combat_Crusade_Recover_Times& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.PairValue values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::pb::PairValue& values(int index) const;
  inline ::pb::PairValue* mutable_values(int index);
  inline ::pb::PairValue* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Crusade_Recover_Times)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Crusade_Recover_Times* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Crusade_Add_Hero : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Crusade_Add_Hero();
  virtual ~GS2C_Combat_Crusade_Add_Hero();

  GS2C_Combat_Crusade_Add_Hero(const GS2C_Combat_Crusade_Add_Hero& from);

  inline GS2C_Combat_Crusade_Add_Hero& operator=(const GS2C_Combat_Crusade_Add_Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Crusade_Add_Hero& default_instance();

  void Swap(GS2C_Combat_Crusade_Add_Hero* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Crusade_Add_Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Crusade_Add_Hero& from);
  void MergeFrom(const GS2C_Combat_Crusade_Add_Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool bSuccess = 1;
  inline bool has_bsuccess() const;
  inline void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  inline bool bsuccess() const;
  inline void set_bsuccess(bool value);

  // required uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required uint32 lefttime = 3;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLefttimeFieldNumber = 3;
  inline ::google::protobuf::uint32 lefttime() const;
  inline void set_lefttime(::google::protobuf::uint32 value);

  // required uint32 alllefttime = 4;
  inline bool has_alllefttime() const;
  inline void clear_alllefttime();
  static const int kAlllefttimeFieldNumber = 4;
  inline ::google::protobuf::uint32 alllefttime() const;
  inline void set_alllefttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Crusade_Add_Hero)
 private:
  inline void set_has_bsuccess();
  inline void clear_has_bsuccess();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();
  inline void set_has_alllefttime();
  inline void clear_has_alllefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool bsuccess_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 lefttime_;
  ::google::protobuf::uint32 alllefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Crusade_Add_Hero* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Combat_Try : public ::google::protobuf::Message {
 public:
  C2GS_Combat_Try();
  virtual ~C2GS_Combat_Try();

  C2GS_Combat_Try(const C2GS_Combat_Try& from);

  inline C2GS_Combat_Try& operator=(const C2GS_Combat_Try& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Combat_Try& default_instance();

  void Swap(C2GS_Combat_Try* other);

  // implements Message ----------------------------------------------

  C2GS_Combat_Try* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Combat_Try& from);
  void MergeFrom(const C2GS_Combat_Try& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 combat_type = 1;
  inline bool has_combat_type() const;
  inline void clear_combat_type();
  static const int kCombatTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 combat_type() const;
  inline void set_combat_type(::google::protobuf::uint32 value);

  // optional uint32 assist_arg = 2;
  inline bool has_assist_arg() const;
  inline void clear_assist_arg();
  static const int kAssistArgFieldNumber = 2;
  inline ::google::protobuf::uint32 assist_arg() const;
  inline void set_assist_arg(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Combat_Try)
 private:
  inline void set_has_combat_type();
  inline void clear_has_combat_type();
  inline void set_has_assist_arg();
  inline void clear_has_assist_arg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 combat_type_;
  ::google::protobuf::uint32 assist_arg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Combat_Try* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Combat_Try : public ::google::protobuf::Message {
 public:
  GS2C_Combat_Try();
  virtual ~GS2C_Combat_Try();

  GS2C_Combat_Try(const GS2C_Combat_Try& from);

  inline GS2C_Combat_Try& operator=(const GS2C_Combat_Try& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Combat_Try& default_instance();

  void Swap(GS2C_Combat_Try* other);

  // implements Message ----------------------------------------------

  GS2C_Combat_Try* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Combat_Try& from);
  void MergeFrom(const GS2C_Combat_Try& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 combat_type = 2;
  inline bool has_combat_type() const;
  inline void clear_combat_type();
  static const int kCombatTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 combat_type() const;
  inline void set_combat_type(::google::protobuf::uint32 value);

  // optional uint32 assist_arg = 3;
  inline bool has_assist_arg() const;
  inline void clear_assist_arg();
  static const int kAssistArgFieldNumber = 3;
  inline ::google::protobuf::uint32 assist_arg() const;
  inline void set_assist_arg(::google::protobuf::uint32 value);

  // optional .pb.Msg_return_common errcode = 4;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  inline ::pb::Msg_return_common errcode() const;
  inline void set_errcode(::pb::Msg_return_common value);

  // optional uint32 group_id = 5;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 5;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Combat_Try)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_combat_type();
  inline void clear_has_combat_type();
  inline void set_has_assist_arg();
  inline void clear_has_assist_arg();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 combat_type_;
  ::google::protobuf::uint32 assist_arg_;
  int errcode_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Combat_Try* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Onekey_Recover_HP : public ::google::protobuf::Message {
 public:
  C2GS_Onekey_Recover_HP();
  virtual ~C2GS_Onekey_Recover_HP();

  C2GS_Onekey_Recover_HP(const C2GS_Onekey_Recover_HP& from);

  inline C2GS_Onekey_Recover_HP& operator=(const C2GS_Onekey_Recover_HP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Onekey_Recover_HP& default_instance();

  void Swap(C2GS_Onekey_Recover_HP* other);

  // implements Message ----------------------------------------------

  C2GS_Onekey_Recover_HP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Onekey_Recover_HP& from);
  void MergeFrom(const C2GS_Onekey_Recover_HP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 heroid = 1;
  inline int heroid_size() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid(int index) const;
  inline void set_heroid(int index, ::google::protobuf::uint32 value);
  inline void add_heroid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heroid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heroid();

  // @@protoc_insertion_point(class_scope:pb.C2GS_Onekey_Recover_HP)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Onekey_Recover_HP* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_REQUEST_TERR : public ::google::protobuf::Message {
 public:
  C2GS_REQUEST_TERR();
  virtual ~C2GS_REQUEST_TERR();

  C2GS_REQUEST_TERR(const C2GS_REQUEST_TERR& from);

  inline C2GS_REQUEST_TERR& operator=(const C2GS_REQUEST_TERR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_REQUEST_TERR& default_instance();

  void Swap(C2GS_REQUEST_TERR* other);

  // implements Message ----------------------------------------------

  C2GS_REQUEST_TERR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_REQUEST_TERR& from);
  void MergeFrom(const C2GS_REQUEST_TERR& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_REQUEST_TERR)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_REQUEST_TERR* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_REQUEST_TERR_RET : public ::google::protobuf::Message {
 public:
  GS2C_REQUEST_TERR_RET();
  virtual ~GS2C_REQUEST_TERR_RET();

  GS2C_REQUEST_TERR_RET(const GS2C_REQUEST_TERR_RET& from);

  inline GS2C_REQUEST_TERR_RET& operator=(const GS2C_REQUEST_TERR_RET& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_REQUEST_TERR_RET& default_instance();

  void Swap(GS2C_REQUEST_TERR_RET* other);

  // implements Message ----------------------------------------------

  GS2C_REQUEST_TERR_RET* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_REQUEST_TERR_RET& from);
  void MergeFrom(const GS2C_REQUEST_TERR_RET& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 isGroupExist = 1;
  inline bool has_isgroupexist() const;
  inline void clear_isgroupexist();
  static const int kIsGroupExistFieldNumber = 1;
  inline ::google::protobuf::uint32 isgroupexist() const;
  inline void set_isgroupexist(::google::protobuf::uint32 value);

  // optional uint32 terrainTyp = 2;
  inline bool has_terraintyp() const;
  inline void clear_terraintyp();
  static const int kTerrainTypFieldNumber = 2;
  inline ::google::protobuf::uint32 terraintyp() const;
  inline void set_terraintyp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_REQUEST_TERR_RET)
 private:
  inline void set_has_isgroupexist();
  inline void clear_has_isgroupexist();
  inline void set_has_terraintyp();
  inline void clear_has_terraintyp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 isgroupexist_;
  ::google::protobuf::uint32 terraintyp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_REQUEST_TERR_RET* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GetMyShadowNum : public ::google::protobuf::Message {
 public:
  C2GS_GetMyShadowNum();
  virtual ~C2GS_GetMyShadowNum();

  C2GS_GetMyShadowNum(const C2GS_GetMyShadowNum& from);

  inline C2GS_GetMyShadowNum& operator=(const C2GS_GetMyShadowNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GetMyShadowNum& default_instance();

  void Swap(C2GS_GetMyShadowNum* other);

  // implements Message ----------------------------------------------

  C2GS_GetMyShadowNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GetMyShadowNum& from);
  void MergeFrom(const C2GS_GetMyShadowNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bool isattack = 2;
  inline bool has_isattack() const;
  inline void clear_isattack();
  static const int kIsattackFieldNumber = 2;
  inline bool isattack() const;
  inline void set_isattack(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GetMyShadowNum)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_isattack();
  inline void clear_has_isattack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  bool isattack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GetMyShadowNum* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GetMyShadowNum : public ::google::protobuf::Message {
 public:
  GS2C_GetMyShadowNum();
  virtual ~GS2C_GetMyShadowNum();

  GS2C_GetMyShadowNum(const GS2C_GetMyShadowNum& from);

  inline GS2C_GetMyShadowNum& operator=(const GS2C_GetMyShadowNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GetMyShadowNum& default_instance();

  void Swap(GS2C_GetMyShadowNum* other);

  // implements Message ----------------------------------------------

  GS2C_GetMyShadowNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GetMyShadowNum& from);
  void MergeFrom(const GS2C_GetMyShadowNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shadownum = 1;
  inline bool has_shadownum() const;
  inline void clear_shadownum();
  static const int kShadownumFieldNumber = 1;
  inline ::google::protobuf::uint32 shadownum() const;
  inline void set_shadownum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GetMyShadowNum)
 private:
  inline void set_has_shadownum();
  inline void clear_has_shadownum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 shadownum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GetMyShadowNum* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Add_Reinforce : public ::google::protobuf::Message {
 public:
  GS2C_Add_Reinforce();
  virtual ~GS2C_Add_Reinforce();

  GS2C_Add_Reinforce(const GS2C_Add_Reinforce& from);

  inline GS2C_Add_Reinforce& operator=(const GS2C_Add_Reinforce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Add_Reinforce& default_instance();

  void Swap(GS2C_Add_Reinforce* other);

  // implements Message ----------------------------------------------

  GS2C_Add_Reinforce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Add_Reinforce& from);
  void MergeFrom(const GS2C_Add_Reinforce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isatt = 1;
  inline bool has_isatt() const;
  inline void clear_isatt();
  static const int kIsattFieldNumber = 1;
  inline bool isatt() const;
  inline void set_isatt(bool value);

  // optional uint32 afteridx = 2;
  inline bool has_afteridx() const;
  inline void clear_afteridx();
  static const int kAfteridxFieldNumber = 2;
  inline ::google::protobuf::uint32 afteridx() const;
  inline void set_afteridx(::google::protobuf::uint32 value);

  // optional .pb.Msg_CombatObj obj = 3;
  inline bool has_obj() const;
  inline void clear_obj();
  static const int kObjFieldNumber = 3;
  inline const ::pb::Msg_CombatObj& obj() const;
  inline ::pb::Msg_CombatObj* mutable_obj();
  inline ::pb::Msg_CombatObj* release_obj();
  inline void set_allocated_obj(::pb::Msg_CombatObj* obj);

  // optional uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Add_Reinforce)
 private:
  inline void set_has_isatt();
  inline void clear_has_isatt();
  inline void set_has_afteridx();
  inline void clear_has_afteridx();
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isatt_;
  ::google::protobuf::uint32 afteridx_;
  ::pb::Msg_CombatObj* obj_;
  ::google::protobuf::uint32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Combat_2eproto();
  friend void protobuf_AssignDesc_Combat_2eproto();
  friend void protobuf_ShutdownFile_Combat_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Add_Reinforce* default_instance_;
};
// ===================================================================


// ===================================================================

// Msg_CombatProperty

// optional uint32 tong = 1;
inline bool Msg_CombatProperty::has_tong() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_CombatProperty::set_has_tong() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_CombatProperty::clear_has_tong() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_CombatProperty::clear_tong() {
  tong_ = 0u;
  clear_has_tong();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::tong() const {
  return tong_;
}
inline void Msg_CombatProperty::set_tong(::google::protobuf::uint32 value) {
  set_has_tong();
  tong_ = value;
}

// optional uint32 yong = 2;
inline bool Msg_CombatProperty::has_yong() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_CombatProperty::set_has_yong() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_CombatProperty::clear_has_yong() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_CombatProperty::clear_yong() {
  yong_ = 0u;
  clear_has_yong();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::yong() const {
  return yong_;
}
inline void Msg_CombatProperty::set_yong(::google::protobuf::uint32 value) {
  set_has_yong();
  yong_ = value;
}

// optional uint32 attack = 3;
inline bool Msg_CombatProperty::has_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_CombatProperty::set_has_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_CombatProperty::clear_has_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_CombatProperty::clear_attack() {
  attack_ = 0u;
  clear_has_attack();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::attack() const {
  return attack_;
}
inline void Msg_CombatProperty::set_attack(::google::protobuf::uint32 value) {
  set_has_attack();
  attack_ = value;
}

// optional uint32 defence = 4;
inline bool Msg_CombatProperty::has_defence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_CombatProperty::set_has_defence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_CombatProperty::clear_has_defence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_CombatProperty::clear_defence() {
  defence_ = 0u;
  clear_has_defence();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::defence() const {
  return defence_;
}
inline void Msg_CombatProperty::set_defence(::google::protobuf::uint32 value) {
  set_has_defence();
  defence_ = value;
}

// optional uint32 skillAttack = 5;
inline bool Msg_CombatProperty::has_skillattack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg_CombatProperty::set_has_skillattack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg_CombatProperty::clear_has_skillattack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg_CombatProperty::clear_skillattack() {
  skillattack_ = 0u;
  clear_has_skillattack();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::skillattack() const {
  return skillattack_;
}
inline void Msg_CombatProperty::set_skillattack(::google::protobuf::uint32 value) {
  set_has_skillattack();
  skillattack_ = value;
}

// optional uint32 skillDefence = 6;
inline bool Msg_CombatProperty::has_skilldefence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg_CombatProperty::set_has_skilldefence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg_CombatProperty::clear_has_skilldefence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg_CombatProperty::clear_skilldefence() {
  skilldefence_ = 0u;
  clear_has_skilldefence();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::skilldefence() const {
  return skilldefence_;
}
inline void Msg_CombatProperty::set_skilldefence(::google::protobuf::uint32 value) {
  set_has_skilldefence();
  skilldefence_ = value;
}

// optional uint32 attackEx = 7;
inline bool Msg_CombatProperty::has_attackex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Msg_CombatProperty::set_has_attackex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Msg_CombatProperty::clear_has_attackex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Msg_CombatProperty::clear_attackex() {
  attackex_ = 0u;
  clear_has_attackex();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::attackex() const {
  return attackex_;
}
inline void Msg_CombatProperty::set_attackex(::google::protobuf::uint32 value) {
  set_has_attackex();
  attackex_ = value;
}

// optional uint32 defenceEx = 8;
inline bool Msg_CombatProperty::has_defenceex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Msg_CombatProperty::set_has_defenceex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Msg_CombatProperty::clear_has_defenceex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Msg_CombatProperty::clear_defenceex() {
  defenceex_ = 0u;
  clear_has_defenceex();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::defenceex() const {
  return defenceex_;
}
inline void Msg_CombatProperty::set_defenceex(::google::protobuf::uint32 value) {
  set_has_defenceex();
  defenceex_ = value;
}

// optional uint32 rowSoldierMaxCnt = 9;
inline bool Msg_CombatProperty::has_rowsoldiermaxcnt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Msg_CombatProperty::set_has_rowsoldiermaxcnt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Msg_CombatProperty::clear_has_rowsoldiermaxcnt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Msg_CombatProperty::clear_rowsoldiermaxcnt() {
  rowsoldiermaxcnt_ = 0u;
  clear_has_rowsoldiermaxcnt();
}
inline ::google::protobuf::uint32 Msg_CombatProperty::rowsoldiermaxcnt() const {
  return rowsoldiermaxcnt_;
}
inline void Msg_CombatProperty::set_rowsoldiermaxcnt(::google::protobuf::uint32 value) {
  set_has_rowsoldiermaxcnt();
  rowsoldiermaxcnt_ = value;
}

// -------------------------------------------------------------------

// Msg_CombatObj

// required uint32 tableId = 1;
inline bool Msg_CombatObj::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_CombatObj::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_CombatObj::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_CombatObj::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 Msg_CombatObj::tableid() const {
  return tableid_;
}
inline void Msg_CombatObj::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional uint64 player_id = 2;
inline bool Msg_CombatObj::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_CombatObj::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_CombatObj::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_CombatObj::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 Msg_CombatObj::player_id() const {
  return player_id_;
}
inline void Msg_CombatObj::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 3;
inline bool Msg_CombatObj::has_player_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_CombatObj::set_has_player_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_CombatObj::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_CombatObj::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& Msg_CombatObj::player_name() const {
  return *player_name_;
}
inline void Msg_CombatObj::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void Msg_CombatObj::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void Msg_CombatObj::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_CombatObj::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* Msg_CombatObj::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_CombatObj::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 soldierLv = 4;
inline bool Msg_CombatObj::has_soldierlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_CombatObj::set_has_soldierlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_CombatObj::clear_has_soldierlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_CombatObj::clear_soldierlv() {
  soldierlv_ = 0u;
  clear_has_soldierlv();
}
inline ::google::protobuf::uint32 Msg_CombatObj::soldierlv() const {
  return soldierlv_;
}
inline void Msg_CombatObj::set_soldierlv(::google::protobuf::uint32 value) {
  set_has_soldierlv();
  soldierlv_ = value;
}

// repeated uint32 soldierCnt = 5;
inline int Msg_CombatObj::soldiercnt_size() const {
  return soldiercnt_.size();
}
inline void Msg_CombatObj::clear_soldiercnt() {
  soldiercnt_.Clear();
}
inline ::google::protobuf::uint32 Msg_CombatObj::soldiercnt(int index) const {
  return soldiercnt_.Get(index);
}
inline void Msg_CombatObj::set_soldiercnt(int index, ::google::protobuf::uint32 value) {
  soldiercnt_.Set(index, value);
}
inline void Msg_CombatObj::add_soldiercnt(::google::protobuf::uint32 value) {
  soldiercnt_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Msg_CombatObj::soldiercnt() const {
  return soldiercnt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Msg_CombatObj::mutable_soldiercnt() {
  return &soldiercnt_;
}

// optional .pb.Msg_CombatProperty stPro = 6;
inline bool Msg_CombatObj::has_stpro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg_CombatObj::set_has_stpro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg_CombatObj::clear_has_stpro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg_CombatObj::clear_stpro() {
  if (stpro_ != NULL) stpro_->::pb::Msg_CombatProperty::Clear();
  clear_has_stpro();
}
inline const ::pb::Msg_CombatProperty& Msg_CombatObj::stpro() const {
  return stpro_ != NULL ? *stpro_ : *default_instance_->stpro_;
}
inline ::pb::Msg_CombatProperty* Msg_CombatObj::mutable_stpro() {
  set_has_stpro();
  if (stpro_ == NULL) stpro_ = new ::pb::Msg_CombatProperty;
  return stpro_;
}
inline ::pb::Msg_CombatProperty* Msg_CombatObj::release_stpro() {
  clear_has_stpro();
  ::pb::Msg_CombatProperty* temp = stpro_;
  stpro_ = NULL;
  return temp;
}
inline void Msg_CombatObj::set_allocated_stpro(::pb::Msg_CombatProperty* stpro) {
  delete stpro_;
  stpro_ = stpro;
  if (stpro) {
    set_has_stpro();
  } else {
    clear_has_stpro();
  }
}

// optional int32 fightPercent = 7;
inline bool Msg_CombatObj::has_fightpercent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Msg_CombatObj::set_has_fightpercent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Msg_CombatObj::clear_has_fightpercent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Msg_CombatObj::clear_fightpercent() {
  fightpercent_ = 0;
  clear_has_fightpercent();
}
inline ::google::protobuf::int32 Msg_CombatObj::fightpercent() const {
  return fightpercent_;
}
inline void Msg_CombatObj::set_fightpercent(::google::protobuf::int32 value) {
  set_has_fightpercent();
  fightpercent_ = value;
}

// optional int32 skillPercent = 8;
inline bool Msg_CombatObj::has_skillpercent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Msg_CombatObj::set_has_skillpercent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Msg_CombatObj::clear_has_skillpercent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Msg_CombatObj::clear_skillpercent() {
  skillpercent_ = 0;
  clear_has_skillpercent();
}
inline ::google::protobuf::int32 Msg_CombatObj::skillpercent() const {
  return skillpercent_;
}
inline void Msg_CombatObj::set_skillpercent(::google::protobuf::int32 value) {
  set_has_skillpercent();
  skillpercent_ = value;
}

// optional int32 expPercent = 9;
inline bool Msg_CombatObj::has_exppercent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Msg_CombatObj::set_has_exppercent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Msg_CombatObj::clear_has_exppercent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Msg_CombatObj::clear_exppercent() {
  exppercent_ = 0;
  clear_has_exppercent();
}
inline ::google::protobuf::int32 Msg_CombatObj::exppercent() const {
  return exppercent_;
}
inline void Msg_CombatObj::set_exppercent(::google::protobuf::int32 value) {
  set_has_exppercent();
  exppercent_ = value;
}

// optional uint32 crashAddition = 10;
inline bool Msg_CombatObj::has_crashaddition() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Msg_CombatObj::set_has_crashaddition() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Msg_CombatObj::clear_has_crashaddition() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Msg_CombatObj::clear_crashaddition() {
  crashaddition_ = 0u;
  clear_has_crashaddition();
}
inline ::google::protobuf::uint32 Msg_CombatObj::crashaddition() const {
  return crashaddition_;
}
inline void Msg_CombatObj::set_crashaddition(::google::protobuf::uint32 value) {
  set_has_crashaddition();
  crashaddition_ = value;
}

// optional uint32 level = 11;
inline bool Msg_CombatObj::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Msg_CombatObj::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Msg_CombatObj::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Msg_CombatObj::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Msg_CombatObj::level() const {
  return level_;
}
inline void Msg_CombatObj::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 country = 12;
inline bool Msg_CombatObj::has_country() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Msg_CombatObj::set_has_country() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Msg_CombatObj::clear_has_country() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Msg_CombatObj::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 Msg_CombatObj::country() const {
  return country_;
}
inline void Msg_CombatObj::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// optional uint32 indexInCombat = 13;
inline bool Msg_CombatObj::has_indexincombat() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Msg_CombatObj::set_has_indexincombat() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Msg_CombatObj::clear_has_indexincombat() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Msg_CombatObj::clear_indexincombat() {
  indexincombat_ = 0u;
  clear_has_indexincombat();
}
inline ::google::protobuf::uint32 Msg_CombatObj::indexincombat() const {
  return indexincombat_;
}
inline void Msg_CombatObj::set_indexincombat(::google::protobuf::uint32 value) {
  set_has_indexincombat();
  indexincombat_ = value;
}

// optional bool isShadow = 14;
inline bool Msg_CombatObj::has_isshadow() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Msg_CombatObj::set_has_isshadow() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Msg_CombatObj::clear_has_isshadow() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Msg_CombatObj::clear_isshadow() {
  isshadow_ = false;
  clear_has_isshadow();
}
inline bool Msg_CombatObj::isshadow() const {
  return isshadow_;
}
inline void Msg_CombatObj::set_isshadow(bool value) {
  set_has_isshadow();
  isshadow_ = value;
}

// optional bool isReinforce = 15;
inline bool Msg_CombatObj::has_isreinforce() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Msg_CombatObj::set_has_isreinforce() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Msg_CombatObj::clear_has_isreinforce() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Msg_CombatObj::clear_isreinforce() {
  isreinforce_ = false;
  clear_has_isreinforce();
}
inline bool Msg_CombatObj::isreinforce() const {
  return isreinforce_;
}
inline void Msg_CombatObj::set_isreinforce(bool value) {
  set_has_isreinforce();
  isreinforce_ = value;
}

// optional bool isFakeChar = 16;
inline bool Msg_CombatObj::has_isfakechar() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Msg_CombatObj::set_has_isfakechar() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Msg_CombatObj::clear_has_isfakechar() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Msg_CombatObj::clear_isfakechar() {
  isfakechar_ = false;
  clear_has_isfakechar();
}
inline bool Msg_CombatObj::isfakechar() const {
  return isfakechar_;
}
inline void Msg_CombatObj::set_isfakechar(bool value) {
  set_has_isfakechar();
  isfakechar_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Pre_Begin

// required uint32 group_id = 1;
inline bool GS2C_Combat_Pre_Begin::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Pre_Begin::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Pre_Begin::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Pre_Begin::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Pre_Begin::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Pre_Begin::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// repeated .pb.Msg_CombatObj attack_lst = 2;
inline int GS2C_Combat_Pre_Begin::attack_lst_size() const {
  return attack_lst_.size();
}
inline void GS2C_Combat_Pre_Begin::clear_attack_lst() {
  attack_lst_.Clear();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Pre_Begin::attack_lst(int index) const {
  return attack_lst_.Get(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Pre_Begin::mutable_attack_lst(int index) {
  return attack_lst_.Mutable(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Pre_Begin::add_attack_lst() {
  return attack_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
GS2C_Combat_Pre_Begin::attack_lst() const {
  return attack_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
GS2C_Combat_Pre_Begin::mutable_attack_lst() {
  return &attack_lst_;
}

// repeated .pb.Msg_CombatObj defence_lst = 3;
inline int GS2C_Combat_Pre_Begin::defence_lst_size() const {
  return defence_lst_.size();
}
inline void GS2C_Combat_Pre_Begin::clear_defence_lst() {
  defence_lst_.Clear();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Pre_Begin::defence_lst(int index) const {
  return defence_lst_.Get(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Pre_Begin::mutable_defence_lst(int index) {
  return defence_lst_.Mutable(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Pre_Begin::add_defence_lst() {
  return defence_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
GS2C_Combat_Pre_Begin::defence_lst() const {
  return defence_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
GS2C_Combat_Pre_Begin::mutable_defence_lst() {
  return &defence_lst_;
}

// optional uint32 combat_type = 4;
inline bool GS2C_Combat_Pre_Begin::has_combat_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Pre_Begin::set_has_combat_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Pre_Begin::clear_has_combat_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Pre_Begin::clear_combat_type() {
  combat_type_ = 0u;
  clear_has_combat_type();
}
inline ::google::protobuf::uint32 GS2C_Combat_Pre_Begin::combat_type() const {
  return combat_type_;
}
inline void GS2C_Combat_Pre_Begin::set_combat_type(::google::protobuf::uint32 value) {
  set_has_combat_type();
  combat_type_ = value;
}

// optional uint32 attack_cnt = 5;
inline bool GS2C_Combat_Pre_Begin::has_attack_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Pre_Begin::set_has_attack_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Pre_Begin::clear_has_attack_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Pre_Begin::clear_attack_cnt() {
  attack_cnt_ = 0u;
  clear_has_attack_cnt();
}
inline ::google::protobuf::uint32 GS2C_Combat_Pre_Begin::attack_cnt() const {
  return attack_cnt_;
}
inline void GS2C_Combat_Pre_Begin::set_attack_cnt(::google::protobuf::uint32 value) {
  set_has_attack_cnt();
  attack_cnt_ = value;
}

// optional uint32 defence_cnt = 6;
inline bool GS2C_Combat_Pre_Begin::has_defence_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Combat_Pre_Begin::set_has_defence_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Combat_Pre_Begin::clear_has_defence_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Combat_Pre_Begin::clear_defence_cnt() {
  defence_cnt_ = 0u;
  clear_has_defence_cnt();
}
inline ::google::protobuf::uint32 GS2C_Combat_Pre_Begin::defence_cnt() const {
  return defence_cnt_;
}
inline void GS2C_Combat_Pre_Begin::set_defence_cnt(::google::protobuf::uint32 value) {
  set_has_defence_cnt();
  defence_cnt_ = value;
}

// optional uint32 terrainTyp = 7;
inline bool GS2C_Combat_Pre_Begin::has_terraintyp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Combat_Pre_Begin::set_has_terraintyp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Combat_Pre_Begin::clear_has_terraintyp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Combat_Pre_Begin::clear_terraintyp() {
  terraintyp_ = 0u;
  clear_has_terraintyp();
}
inline ::google::protobuf::uint32 GS2C_Combat_Pre_Begin::terraintyp() const {
  return terraintyp_;
}
inline void GS2C_Combat_Pre_Begin::set_terraintyp(::google::protobuf::uint32 value) {
  set_has_terraintyp();
  terraintyp_ = value;
}

// optional bool isAutoCombat = 8;
inline bool GS2C_Combat_Pre_Begin::has_isautocombat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Combat_Pre_Begin::set_has_isautocombat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Combat_Pre_Begin::clear_has_isautocombat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Combat_Pre_Begin::clear_isautocombat() {
  isautocombat_ = false;
  clear_has_isautocombat();
}
inline bool GS2C_Combat_Pre_Begin::isautocombat() const {
  return isautocombat_;
}
inline void GS2C_Combat_Pre_Begin::set_isautocombat(bool value) {
  set_has_isautocombat();
  isautocombat_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Begin

// required uint32 group_id = 1;
inline bool C2GS_Combat_Begin::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Begin::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Begin::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Begin::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Begin::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Begin::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// repeated .pb.Msg_CombatObj attack_lst = 2;
inline int C2GS_Combat_Begin::attack_lst_size() const {
  return attack_lst_.size();
}
inline void C2GS_Combat_Begin::clear_attack_lst() {
  attack_lst_.Clear();
}
inline const ::pb::Msg_CombatObj& C2GS_Combat_Begin::attack_lst(int index) const {
  return attack_lst_.Get(index);
}
inline ::pb::Msg_CombatObj* C2GS_Combat_Begin::mutable_attack_lst(int index) {
  return attack_lst_.Mutable(index);
}
inline ::pb::Msg_CombatObj* C2GS_Combat_Begin::add_attack_lst() {
  return attack_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
C2GS_Combat_Begin::attack_lst() const {
  return attack_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
C2GS_Combat_Begin::mutable_attack_lst() {
  return &attack_lst_;
}

// -------------------------------------------------------------------

// GS2C_Combat_Begin

// required uint32 group_id = 1;
inline bool GS2C_Combat_Begin::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Begin::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Begin::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Begin::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Begin::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// repeated .pb.Msg_CombatObj attack_lst = 2;
inline int GS2C_Combat_Begin::attack_lst_size() const {
  return attack_lst_.size();
}
inline void GS2C_Combat_Begin::clear_attack_lst() {
  attack_lst_.Clear();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Begin::attack_lst(int index) const {
  return attack_lst_.Get(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Begin::mutable_attack_lst(int index) {
  return attack_lst_.Mutable(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Begin::add_attack_lst() {
  return attack_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
GS2C_Combat_Begin::attack_lst() const {
  return attack_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
GS2C_Combat_Begin::mutable_attack_lst() {
  return &attack_lst_;
}

// repeated .pb.Msg_CombatObj defence_lst = 3;
inline int GS2C_Combat_Begin::defence_lst_size() const {
  return defence_lst_.size();
}
inline void GS2C_Combat_Begin::clear_defence_lst() {
  defence_lst_.Clear();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Begin::defence_lst(int index) const {
  return defence_lst_.Get(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Begin::mutable_defence_lst(int index) {
  return defence_lst_.Mutable(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Begin::add_defence_lst() {
  return defence_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
GS2C_Combat_Begin::defence_lst() const {
  return defence_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
GS2C_Combat_Begin::mutable_defence_lst() {
  return &defence_lst_;
}

// optional uint32 combat_type = 4;
inline bool GS2C_Combat_Begin::has_combat_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Begin::set_has_combat_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Begin::clear_has_combat_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Begin::clear_combat_type() {
  combat_type_ = 0u;
  clear_has_combat_type();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::combat_type() const {
  return combat_type_;
}
inline void GS2C_Combat_Begin::set_combat_type(::google::protobuf::uint32 value) {
  set_has_combat_type();
  combat_type_ = value;
}

// optional uint32 attack_cnt = 5;
inline bool GS2C_Combat_Begin::has_attack_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Begin::set_has_attack_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Begin::clear_has_attack_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Begin::clear_attack_cnt() {
  attack_cnt_ = 0u;
  clear_has_attack_cnt();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::attack_cnt() const {
  return attack_cnt_;
}
inline void GS2C_Combat_Begin::set_attack_cnt(::google::protobuf::uint32 value) {
  set_has_attack_cnt();
  attack_cnt_ = value;
}

// optional uint32 defence_cnt = 6;
inline bool GS2C_Combat_Begin::has_defence_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Combat_Begin::set_has_defence_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Combat_Begin::clear_has_defence_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Combat_Begin::clear_defence_cnt() {
  defence_cnt_ = 0u;
  clear_has_defence_cnt();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::defence_cnt() const {
  return defence_cnt_;
}
inline void GS2C_Combat_Begin::set_defence_cnt(::google::protobuf::uint32 value) {
  set_has_defence_cnt();
  defence_cnt_ = value;
}

// optional uint64 choose_time = 7;
inline bool GS2C_Combat_Begin::has_choose_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Combat_Begin::set_has_choose_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Combat_Begin::clear_has_choose_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Combat_Begin::clear_choose_time() {
  choose_time_ = GOOGLE_ULONGLONG(0);
  clear_has_choose_time();
}
inline ::google::protobuf::uint64 GS2C_Combat_Begin::choose_time() const {
  return choose_time_;
}
inline void GS2C_Combat_Begin::set_choose_time(::google::protobuf::uint64 value) {
  set_has_choose_time();
  choose_time_ = value;
}

// optional uint64 over_time = 8;
inline bool GS2C_Combat_Begin::has_over_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Combat_Begin::set_has_over_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Combat_Begin::clear_has_over_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Combat_Begin::clear_over_time() {
  over_time_ = GOOGLE_ULONGLONG(0);
  clear_has_over_time();
}
inline ::google::protobuf::uint64 GS2C_Combat_Begin::over_time() const {
  return over_time_;
}
inline void GS2C_Combat_Begin::set_over_time(::google::protobuf::uint64 value) {
  set_has_over_time();
  over_time_ = value;
}

// repeated .pb.Msg_CombatObj attack_all_list = 9;
inline int GS2C_Combat_Begin::attack_all_list_size() const {
  return attack_all_list_.size();
}
inline void GS2C_Combat_Begin::clear_attack_all_list() {
  attack_all_list_.Clear();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Begin::attack_all_list(int index) const {
  return attack_all_list_.Get(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Begin::mutable_attack_all_list(int index) {
  return attack_all_list_.Mutable(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Begin::add_attack_all_list() {
  return attack_all_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
GS2C_Combat_Begin::attack_all_list() const {
  return attack_all_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
GS2C_Combat_Begin::mutable_attack_all_list() {
  return &attack_all_list_;
}

// repeated .pb.Msg_CombatObj defence_all_list = 10;
inline int GS2C_Combat_Begin::defence_all_list_size() const {
  return defence_all_list_.size();
}
inline void GS2C_Combat_Begin::clear_defence_all_list() {
  defence_all_list_.Clear();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Begin::defence_all_list(int index) const {
  return defence_all_list_.Get(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Begin::mutable_defence_all_list(int index) {
  return defence_all_list_.Mutable(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Begin::add_defence_all_list() {
  return defence_all_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
GS2C_Combat_Begin::defence_all_list() const {
  return defence_all_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
GS2C_Combat_Begin::mutable_defence_all_list() {
  return &defence_all_list_;
}

// optional uint32 attTacticEnableStr = 11;
inline bool GS2C_Combat_Begin::has_atttacticenablestr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GS2C_Combat_Begin::set_has_atttacticenablestr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GS2C_Combat_Begin::clear_has_atttacticenablestr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GS2C_Combat_Begin::clear_atttacticenablestr() {
  atttacticenablestr_ = 0u;
  clear_has_atttacticenablestr();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::atttacticenablestr() const {
  return atttacticenablestr_;
}
inline void GS2C_Combat_Begin::set_atttacticenablestr(::google::protobuf::uint32 value) {
  set_has_atttacticenablestr();
  atttacticenablestr_ = value;
}

// optional uint32 defTacticEnableStr = 12;
inline bool GS2C_Combat_Begin::has_deftacticenablestr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GS2C_Combat_Begin::set_has_deftacticenablestr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GS2C_Combat_Begin::clear_has_deftacticenablestr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GS2C_Combat_Begin::clear_deftacticenablestr() {
  deftacticenablestr_ = 0u;
  clear_has_deftacticenablestr();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::deftacticenablestr() const {
  return deftacticenablestr_;
}
inline void GS2C_Combat_Begin::set_deftacticenablestr(::google::protobuf::uint32 value) {
  set_has_deftacticenablestr();
  deftacticenablestr_ = value;
}

// optional bool canAttSelectTactic = 13;
inline bool GS2C_Combat_Begin::has_canattselecttactic() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GS2C_Combat_Begin::set_has_canattselecttactic() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GS2C_Combat_Begin::clear_has_canattselecttactic() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GS2C_Combat_Begin::clear_canattselecttactic() {
  canattselecttactic_ = false;
  clear_has_canattselecttactic();
}
inline bool GS2C_Combat_Begin::canattselecttactic() const {
  return canattselecttactic_;
}
inline void GS2C_Combat_Begin::set_canattselecttactic(bool value) {
  set_has_canattselecttactic();
  canattselecttactic_ = value;
}

// optional bool canDefSelectTactic = 14;
inline bool GS2C_Combat_Begin::has_candefselecttactic() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GS2C_Combat_Begin::set_has_candefselecttactic() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GS2C_Combat_Begin::clear_has_candefselecttactic() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GS2C_Combat_Begin::clear_candefselecttactic() {
  candefselecttactic_ = false;
  clear_has_candefselecttactic();
}
inline bool GS2C_Combat_Begin::candefselecttactic() const {
  return candefselecttactic_;
}
inline void GS2C_Combat_Begin::set_candefselecttactic(bool value) {
  set_has_candefselecttactic();
  candefselecttactic_ = value;
}

// optional uint32 terrainTyp = 15;
inline bool GS2C_Combat_Begin::has_terraintyp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GS2C_Combat_Begin::set_has_terraintyp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GS2C_Combat_Begin::clear_has_terraintyp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GS2C_Combat_Begin::clear_terraintyp() {
  terraintyp_ = 0u;
  clear_has_terraintyp();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::terraintyp() const {
  return terraintyp_;
}
inline void GS2C_Combat_Begin::set_terraintyp(::google::protobuf::uint32 value) {
  set_has_terraintyp();
  terraintyp_ = value;
}

// optional uint64 roundCount = 16;
inline bool GS2C_Combat_Begin::has_roundcount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GS2C_Combat_Begin::set_has_roundcount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GS2C_Combat_Begin::clear_has_roundcount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GS2C_Combat_Begin::clear_roundcount() {
  roundcount_ = GOOGLE_ULONGLONG(0);
  clear_has_roundcount();
}
inline ::google::protobuf::uint64 GS2C_Combat_Begin::roundcount() const {
  return roundcount_;
}
inline void GS2C_Combat_Begin::set_roundcount(::google::protobuf::uint64 value) {
  set_has_roundcount();
  roundcount_ = value;
}

// optional bool isAutoCombat = 17;
inline bool GS2C_Combat_Begin::has_isautocombat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GS2C_Combat_Begin::set_has_isautocombat() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GS2C_Combat_Begin::clear_has_isautocombat() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GS2C_Combat_Begin::clear_isautocombat() {
  isautocombat_ = false;
  clear_has_isautocombat();
}
inline bool GS2C_Combat_Begin::isautocombat() const {
  return isautocombat_;
}
inline void GS2C_Combat_Begin::set_isautocombat(bool value) {
  set_has_isautocombat();
  isautocombat_ = value;
}

// optional uint32 attShadowNum = 18;
inline bool GS2C_Combat_Begin::has_attshadownum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GS2C_Combat_Begin::set_has_attshadownum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GS2C_Combat_Begin::clear_has_attshadownum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GS2C_Combat_Begin::clear_attshadownum() {
  attshadownum_ = 0u;
  clear_has_attshadownum();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::attshadownum() const {
  return attshadownum_;
}
inline void GS2C_Combat_Begin::set_attshadownum(::google::protobuf::uint32 value) {
  set_has_attshadownum();
  attshadownum_ = value;
}

// optional uint32 defShadowNum = 19;
inline bool GS2C_Combat_Begin::has_defshadownum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GS2C_Combat_Begin::set_has_defshadownum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GS2C_Combat_Begin::clear_has_defshadownum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GS2C_Combat_Begin::clear_defshadownum() {
  defshadownum_ = 0u;
  clear_has_defshadownum();
}
inline ::google::protobuf::uint32 GS2C_Combat_Begin::defshadownum() const {
  return defshadownum_;
}
inline void GS2C_Combat_Begin::set_defshadownum(::google::protobuf::uint32 value) {
  set_has_defshadownum();
  defshadownum_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Next_Lst

// required uint32 group_id = 1;
inline bool C2GS_Combat_Next_Lst::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Next_Lst::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Next_Lst::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Next_Lst::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Next_Lst::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Next_Lst::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required uint32 indexInCombat = 2;
inline bool C2GS_Combat_Next_Lst::has_indexincombat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Next_Lst::set_has_indexincombat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Next_Lst::clear_has_indexincombat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Next_Lst::clear_indexincombat() {
  indexincombat_ = 0u;
  clear_has_indexincombat();
}
inline ::google::protobuf::uint32 C2GS_Combat_Next_Lst::indexincombat() const {
  return indexincombat_;
}
inline void C2GS_Combat_Next_Lst::set_indexincombat(::google::protobuf::uint32 value) {
  set_has_indexincombat();
  indexincombat_ = value;
}

// required bool is_attacker = 3;
inline bool C2GS_Combat_Next_Lst::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Combat_Next_Lst::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Combat_Next_Lst::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Combat_Next_Lst::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool C2GS_Combat_Next_Lst::is_attacker() const {
  return is_attacker_;
}
inline void C2GS_Combat_Next_Lst::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Next_Lst

// repeated .pb.Msg_CombatObj attack_all_list = 1;
inline int GS2C_Combat_Next_Lst::attack_all_list_size() const {
  return attack_all_list_.size();
}
inline void GS2C_Combat_Next_Lst::clear_attack_all_list() {
  attack_all_list_.Clear();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Next_Lst::attack_all_list(int index) const {
  return attack_all_list_.Get(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Next_Lst::mutable_attack_all_list(int index) {
  return attack_all_list_.Mutable(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Next_Lst::add_attack_all_list() {
  return attack_all_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
GS2C_Combat_Next_Lst::attack_all_list() const {
  return attack_all_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
GS2C_Combat_Next_Lst::mutable_attack_all_list() {
  return &attack_all_list_;
}

// repeated .pb.Msg_CombatObj defence_all_list = 2;
inline int GS2C_Combat_Next_Lst::defence_all_list_size() const {
  return defence_all_list_.size();
}
inline void GS2C_Combat_Next_Lst::clear_defence_all_list() {
  defence_all_list_.Clear();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Next_Lst::defence_all_list(int index) const {
  return defence_all_list_.Get(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Next_Lst::mutable_defence_all_list(int index) {
  return defence_all_list_.Mutable(index);
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Next_Lst::add_defence_all_list() {
  return defence_all_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >&
GS2C_Combat_Next_Lst::defence_all_list() const {
  return defence_all_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Msg_CombatObj >*
GS2C_Combat_Next_Lst::mutable_defence_all_list() {
  return &defence_all_list_;
}

// optional uint32 group_id = 3;
inline bool GS2C_Combat_Next_Lst::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Next_Lst::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Next_Lst::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Next_Lst::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Next_Lst::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Next_Lst::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Next_Obj

// required uint32 group_id = 1;
inline bool GS2C_Combat_Next_Obj::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Next_Obj::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Next_Obj::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Next_Obj::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Next_Obj::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Next_Obj::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional .pb.Msg_CombatObj attack = 2;
inline bool GS2C_Combat_Next_Obj::has_attack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Next_Obj::set_has_attack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Next_Obj::clear_has_attack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Next_Obj::clear_attack() {
  if (attack_ != NULL) attack_->::pb::Msg_CombatObj::Clear();
  clear_has_attack();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Next_Obj::attack() const {
  return attack_ != NULL ? *attack_ : *default_instance_->attack_;
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Next_Obj::mutable_attack() {
  set_has_attack();
  if (attack_ == NULL) attack_ = new ::pb::Msg_CombatObj;
  return attack_;
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Next_Obj::release_attack() {
  clear_has_attack();
  ::pb::Msg_CombatObj* temp = attack_;
  attack_ = NULL;
  return temp;
}
inline void GS2C_Combat_Next_Obj::set_allocated_attack(::pb::Msg_CombatObj* attack) {
  delete attack_;
  attack_ = attack;
  if (attack) {
    set_has_attack();
  } else {
    clear_has_attack();
  }
}

// optional .pb.Msg_CombatObj defence = 3;
inline bool GS2C_Combat_Next_Obj::has_defence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Next_Obj::set_has_defence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Next_Obj::clear_has_defence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Next_Obj::clear_defence() {
  if (defence_ != NULL) defence_->::pb::Msg_CombatObj::Clear();
  clear_has_defence();
}
inline const ::pb::Msg_CombatObj& GS2C_Combat_Next_Obj::defence() const {
  return defence_ != NULL ? *defence_ : *default_instance_->defence_;
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Next_Obj::mutable_defence() {
  set_has_defence();
  if (defence_ == NULL) defence_ = new ::pb::Msg_CombatObj;
  return defence_;
}
inline ::pb::Msg_CombatObj* GS2C_Combat_Next_Obj::release_defence() {
  clear_has_defence();
  ::pb::Msg_CombatObj* temp = defence_;
  defence_ = NULL;
  return temp;
}
inline void GS2C_Combat_Next_Obj::set_allocated_defence(::pb::Msg_CombatObj* defence) {
  delete defence_;
  defence_ = defence;
  if (defence) {
    set_has_defence();
  } else {
    clear_has_defence();
  }
}

// -------------------------------------------------------------------

// GS2C_Combat_Add_Obj

// required uint32 group_id = 1;
inline bool GS2C_Combat_Add_Obj::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Add_Obj::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Add_Obj::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Add_Obj::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Add_Obj::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required uint32 tableId = 2;
inline bool GS2C_Combat_Add_Obj::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Add_Obj::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Add_Obj::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 GS2C_Combat_Add_Obj::tableid() const {
  return tableid_;
}
inline void GS2C_Combat_Add_Obj::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional uint64 player_id = 3;
inline bool GS2C_Combat_Add_Obj::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Add_Obj::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Add_Obj::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 GS2C_Combat_Add_Obj::player_id() const {
  return player_id_;
}
inline void GS2C_Combat_Add_Obj::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 4;
inline bool GS2C_Combat_Add_Obj::has_player_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_player_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Add_Obj::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Add_Obj::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& GS2C_Combat_Add_Obj::player_name() const {
  return *player_name_;
}
inline void GS2C_Combat_Add_Obj::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GS2C_Combat_Add_Obj::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GS2C_Combat_Add_Obj::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Combat_Add_Obj::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* GS2C_Combat_Add_Obj::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Combat_Add_Obj::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool is_attacker = 5;
inline bool GS2C_Combat_Add_Obj::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Add_Obj::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Add_Obj::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool GS2C_Combat_Add_Obj::is_attacker() const {
  return is_attacker_;
}
inline void GS2C_Combat_Add_Obj::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// optional bool is_shadow = 6;
inline bool GS2C_Combat_Add_Obj::has_is_shadow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_is_shadow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Combat_Add_Obj::clear_has_is_shadow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Combat_Add_Obj::clear_is_shadow() {
  is_shadow_ = false;
  clear_has_is_shadow();
}
inline bool GS2C_Combat_Add_Obj::is_shadow() const {
  return is_shadow_;
}
inline void GS2C_Combat_Add_Obj::set_is_shadow(bool value) {
  set_has_is_shadow();
  is_shadow_ = value;
}

// optional uint32 country_id = 7;
inline bool GS2C_Combat_Add_Obj::has_country_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_country_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Combat_Add_Obj::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Combat_Add_Obj::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Add_Obj::country_id() const {
  return country_id_;
}
inline void GS2C_Combat_Add_Obj::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 indexInCombat = 8;
inline bool GS2C_Combat_Add_Obj::has_indexincombat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_indexincombat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Combat_Add_Obj::clear_has_indexincombat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Combat_Add_Obj::clear_indexincombat() {
  indexincombat_ = 0u;
  clear_has_indexincombat();
}
inline ::google::protobuf::uint32 GS2C_Combat_Add_Obj::indexincombat() const {
  return indexincombat_;
}
inline void GS2C_Combat_Add_Obj::set_indexincombat(::google::protobuf::uint32 value) {
  set_has_indexincombat();
  indexincombat_ = value;
}

// optional uint32 listLengh = 9;
inline bool GS2C_Combat_Add_Obj::has_listlengh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_Combat_Add_Obj::set_has_listlengh() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_Combat_Add_Obj::clear_has_listlengh() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_Combat_Add_Obj::clear_listlengh() {
  listlengh_ = 0u;
  clear_has_listlengh();
}
inline ::google::protobuf::uint32 GS2C_Combat_Add_Obj::listlengh() const {
  return listlengh_;
}
inline void GS2C_Combat_Add_Obj::set_listlengh(::google::protobuf::uint32 value) {
  set_has_listlengh();
  listlengh_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Del_Obj

// required uint32 group_id = 1;
inline bool GS2C_Combat_Del_Obj::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Del_Obj::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Del_Obj::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Del_Obj::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Del_Obj::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Del_Obj::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// repeated .pb.PairValueUint64 attack = 2;
inline int GS2C_Combat_Del_Obj::attack_size() const {
  return attack_.size();
}
inline void GS2C_Combat_Del_Obj::clear_attack() {
  attack_.Clear();
}
inline const ::pb::PairValueUint64& GS2C_Combat_Del_Obj::attack(int index) const {
  return attack_.Get(index);
}
inline ::pb::PairValueUint64* GS2C_Combat_Del_Obj::mutable_attack(int index) {
  return attack_.Mutable(index);
}
inline ::pb::PairValueUint64* GS2C_Combat_Del_Obj::add_attack() {
  return attack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 >&
GS2C_Combat_Del_Obj::attack() const {
  return attack_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 >*
GS2C_Combat_Del_Obj::mutable_attack() {
  return &attack_;
}

// repeated .pb.PairValueUint64 defence = 3;
inline int GS2C_Combat_Del_Obj::defence_size() const {
  return defence_.size();
}
inline void GS2C_Combat_Del_Obj::clear_defence() {
  defence_.Clear();
}
inline const ::pb::PairValueUint64& GS2C_Combat_Del_Obj::defence(int index) const {
  return defence_.Get(index);
}
inline ::pb::PairValueUint64* GS2C_Combat_Del_Obj::mutable_defence(int index) {
  return defence_.Mutable(index);
}
inline ::pb::PairValueUint64* GS2C_Combat_Del_Obj::add_defence() {
  return defence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 >&
GS2C_Combat_Del_Obj::defence() const {
  return defence_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValueUint64 >*
GS2C_Combat_Del_Obj::mutable_defence() {
  return &defence_;
}

// optional uint32 indexInCombat = 4;
inline bool GS2C_Combat_Del_Obj::has_indexincombat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Del_Obj::set_has_indexincombat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Del_Obj::clear_has_indexincombat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Del_Obj::clear_indexincombat() {
  indexincombat_ = 0u;
  clear_has_indexincombat();
}
inline ::google::protobuf::uint32 GS2C_Combat_Del_Obj::indexincombat() const {
  return indexincombat_;
}
inline void GS2C_Combat_Del_Obj::set_indexincombat(::google::protobuf::uint32 value) {
  set_has_indexincombat();
  indexincombat_ = value;
}

// optional uint32 listLengh = 5;
inline bool GS2C_Combat_Del_Obj::has_listlengh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Del_Obj::set_has_listlengh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Del_Obj::clear_has_listlengh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Del_Obj::clear_listlengh() {
  listlengh_ = 0u;
  clear_has_listlengh();
}
inline ::google::protobuf::uint32 GS2C_Combat_Del_Obj::listlengh() const {
  return listlengh_;
}
inline void GS2C_Combat_Del_Obj::set_listlengh(::google::protobuf::uint32 value) {
  set_has_listlengh();
  listlengh_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Select_Tactic

// required uint32 group_id = 1;
inline bool C2GS_Combat_Select_Tactic::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Select_Tactic::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Select_Tactic::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Select_Tactic::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Select_Tactic::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Select_Tactic::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required bool is_attacker = 2;
inline bool C2GS_Combat_Select_Tactic::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Select_Tactic::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Select_Tactic::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Select_Tactic::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool C2GS_Combat_Select_Tactic::is_attacker() const {
  return is_attacker_;
}
inline void C2GS_Combat_Select_Tactic::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// required uint32 hero_id = 3;
inline bool C2GS_Combat_Select_Tactic::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Combat_Select_Tactic::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Combat_Select_Tactic::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Combat_Select_Tactic::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Select_Tactic::hero_id() const {
  return hero_id_;
}
inline void C2GS_Combat_Select_Tactic::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required .pb.Msg_ECombatTactic type = 4;
inline bool C2GS_Combat_Select_Tactic::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Combat_Select_Tactic::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Combat_Select_Tactic::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Combat_Select_Tactic::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pb::Msg_ECombatTactic C2GS_Combat_Select_Tactic::type() const {
  return static_cast< ::pb::Msg_ECombatTactic >(type_);
}
inline void C2GS_Combat_Select_Tactic::set_type(::pb::Msg_ECombatTactic value) {
  assert(::pb::Msg_ECombatTactic_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint64 roundCount = 5;
inline bool C2GS_Combat_Select_Tactic::has_roundcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_Combat_Select_Tactic::set_has_roundcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_Combat_Select_Tactic::clear_has_roundcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_Combat_Select_Tactic::clear_roundcount() {
  roundcount_ = GOOGLE_ULONGLONG(0);
  clear_has_roundcount();
}
inline ::google::protobuf::uint64 C2GS_Combat_Select_Tactic::roundcount() const {
  return roundcount_;
}
inline void C2GS_Combat_Select_Tactic::set_roundcount(::google::protobuf::uint64 value) {
  set_has_roundcount();
  roundcount_ = value;
}

// -------------------------------------------------------------------

// Combat_Reward

// optional uint32 period = 1;
inline bool Combat_Reward::has_period() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Combat_Reward::set_has_period() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Combat_Reward::clear_has_period() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Combat_Reward::clear_period() {
  period_ = 0u;
  clear_has_period();
}
inline ::google::protobuf::uint32 Combat_Reward::period() const {
  return period_;
}
inline void Combat_Reward::set_period(::google::protobuf::uint32 value) {
  set_has_period();
  period_ = value;
}

// optional uint32 group = 2;
inline bool Combat_Reward::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Combat_Reward::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Combat_Reward::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Combat_Reward::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 Combat_Reward::group() const {
  return group_;
}
inline void Combat_Reward::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional uint32 exp = 3;
inline bool Combat_Reward::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Combat_Reward::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Combat_Reward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Combat_Reward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 Combat_Reward::exp() const {
  return exp_;
}
inline void Combat_Reward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 coin = 4;
inline bool Combat_Reward::has_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Combat_Reward::set_has_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Combat_Reward::clear_has_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Combat_Reward::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 Combat_Reward::coin() const {
  return coin_;
}
inline void Combat_Reward::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// -------------------------------------------------------------------

// Combat_Damage

// optional uint32 period = 1;
inline bool Combat_Damage::has_period() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Combat_Damage::set_has_period() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Combat_Damage::clear_has_period() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Combat_Damage::clear_period() {
  period_ = 0u;
  clear_has_period();
}
inline ::google::protobuf::uint32 Combat_Damage::period() const {
  return period_;
}
inline void Combat_Damage::set_period(::google::protobuf::uint32 value) {
  set_has_period();
  period_ = value;
}

// optional uint32 group = 2;
inline bool Combat_Damage::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Combat_Damage::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Combat_Damage::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Combat_Damage::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 Combat_Damage::group() const {
  return group_;
}
inline void Combat_Damage::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional uint32 range = 3;
inline bool Combat_Damage::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Combat_Damage::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Combat_Damage::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Combat_Damage::clear_range() {
  range_ = 0u;
  clear_has_range();
}
inline ::google::protobuf::uint32 Combat_Damage::range() const {
  return range_;
}
inline void Combat_Damage::set_range(::google::protobuf::uint32 value) {
  set_has_range();
  range_ = value;
}

// optional uint32 type = 4;
inline bool Combat_Damage::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Combat_Damage::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Combat_Damage::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Combat_Damage::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Combat_Damage::type() const {
  return type_;
}
inline void Combat_Damage::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 damage = 5;
inline bool Combat_Damage::has_damage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Combat_Damage::set_has_damage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Combat_Damage::clear_has_damage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Combat_Damage::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 Combat_Damage::damage() const {
  return damage_;
}
inline void Combat_Damage::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// optional uint32 restBlood = 6;
inline bool Combat_Damage::has_restblood() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Combat_Damage::set_has_restblood() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Combat_Damage::clear_has_restblood() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Combat_Damage::clear_restblood() {
  restblood_ = 0u;
  clear_has_restblood();
}
inline ::google::protobuf::uint32 Combat_Damage::restblood() const {
  return restblood_;
}
inline void Combat_Damage::set_restblood(::google::protobuf::uint32 value) {
  set_has_restblood();
  restblood_ = value;
}

// -------------------------------------------------------------------

// extra_awards

// optional uint32 awardsid = 1;
inline bool extra_awards::has_awardsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void extra_awards::set_has_awardsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void extra_awards::clear_has_awardsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void extra_awards::clear_awardsid() {
  awardsid_ = 0u;
  clear_has_awardsid();
}
inline ::google::protobuf::uint32 extra_awards::awardsid() const {
  return awardsid_;
}
inline void extra_awards::set_awardsid(::google::protobuf::uint32 value) {
  set_has_awardsid();
  awardsid_ = value;
}

// optional uint32 awardsnum = 2;
inline bool extra_awards::has_awardsnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void extra_awards::set_has_awardsnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void extra_awards::clear_has_awardsnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void extra_awards::clear_awardsnum() {
  awardsnum_ = 0u;
  clear_has_awardsnum();
}
inline ::google::protobuf::uint32 extra_awards::awardsnum() const {
  return awardsnum_;
}
inline void extra_awards::set_awardsnum(::google::protobuf::uint32 value) {
  set_has_awardsnum();
  awardsnum_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Select_Tactic

// required .pb.Msg_ECombatTactic attack_type = 1;
inline bool GS2C_Combat_Select_Tactic::has_attack_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_attack_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_attack_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Select_Tactic::clear_attack_type() {
  attack_type_ = 0;
  clear_has_attack_type();
}
inline ::pb::Msg_ECombatTactic GS2C_Combat_Select_Tactic::attack_type() const {
  return static_cast< ::pb::Msg_ECombatTactic >(attack_type_);
}
inline void GS2C_Combat_Select_Tactic::set_attack_type(::pb::Msg_ECombatTactic value) {
  assert(::pb::Msg_ECombatTactic_IsValid(value));
  set_has_attack_type();
  attack_type_ = value;
}

// required .pb.Msg_ECombatTactic defence_type = 2;
inline bool GS2C_Combat_Select_Tactic::has_defence_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_defence_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_defence_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Select_Tactic::clear_defence_type() {
  defence_type_ = 0;
  clear_has_defence_type();
}
inline ::pb::Msg_ECombatTactic GS2C_Combat_Select_Tactic::defence_type() const {
  return static_cast< ::pb::Msg_ECombatTactic >(defence_type_);
}
inline void GS2C_Combat_Select_Tactic::set_defence_type(::pb::Msg_ECombatTactic value) {
  assert(::pb::Msg_ECombatTactic_IsValid(value));
  set_has_defence_type();
  defence_type_ = value;
}

// optional bool is_attack_skill_success = 3;
inline bool GS2C_Combat_Select_Tactic::has_is_attack_skill_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_is_attack_skill_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_is_attack_skill_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Select_Tactic::clear_is_attack_skill_success() {
  is_attack_skill_success_ = false;
  clear_has_is_attack_skill_success();
}
inline bool GS2C_Combat_Select_Tactic::is_attack_skill_success() const {
  return is_attack_skill_success_;
}
inline void GS2C_Combat_Select_Tactic::set_is_attack_skill_success(bool value) {
  set_has_is_attack_skill_success();
  is_attack_skill_success_ = value;
}

// optional bool is_defence_skill_success = 4;
inline bool GS2C_Combat_Select_Tactic::has_is_defence_skill_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_is_defence_skill_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_is_defence_skill_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Select_Tactic::clear_is_defence_skill_success() {
  is_defence_skill_success_ = false;
  clear_has_is_defence_skill_success();
}
inline bool GS2C_Combat_Select_Tactic::is_defence_skill_success() const {
  return is_defence_skill_success_;
}
inline void GS2C_Combat_Select_Tactic::set_is_defence_skill_success(bool value) {
  set_has_is_defence_skill_success();
  is_defence_skill_success_ = value;
}

// repeated .pb.Combat_Damage damages = 5;
inline int GS2C_Combat_Select_Tactic::damages_size() const {
  return damages_.size();
}
inline void GS2C_Combat_Select_Tactic::clear_damages() {
  damages_.Clear();
}
inline const ::pb::Combat_Damage& GS2C_Combat_Select_Tactic::damages(int index) const {
  return damages_.Get(index);
}
inline ::pb::Combat_Damage* GS2C_Combat_Select_Tactic::mutable_damages(int index) {
  return damages_.Mutable(index);
}
inline ::pb::Combat_Damage* GS2C_Combat_Select_Tactic::add_damages() {
  return damages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage >&
GS2C_Combat_Select_Tactic::damages() const {
  return damages_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage >*
GS2C_Combat_Select_Tactic::mutable_damages() {
  return &damages_;
}

// repeated .pb.Combat_Reward rewards = 6;
inline int GS2C_Combat_Select_Tactic::rewards_size() const {
  return rewards_.size();
}
inline void GS2C_Combat_Select_Tactic::clear_rewards() {
  rewards_.Clear();
}
inline const ::pb::Combat_Reward& GS2C_Combat_Select_Tactic::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::pb::Combat_Reward* GS2C_Combat_Select_Tactic::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::pb::Combat_Reward* GS2C_Combat_Select_Tactic::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward >&
GS2C_Combat_Select_Tactic::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward >*
GS2C_Combat_Select_Tactic::mutable_rewards() {
  return &rewards_;
}

// optional uint64 over_time = 7;
inline bool GS2C_Combat_Select_Tactic::has_over_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_over_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_over_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Combat_Select_Tactic::clear_over_time() {
  over_time_ = GOOGLE_ULONGLONG(0);
  clear_has_over_time();
}
inline ::google::protobuf::uint64 GS2C_Combat_Select_Tactic::over_time() const {
  return over_time_;
}
inline void GS2C_Combat_Select_Tactic::set_over_time(::google::protobuf::uint64 value) {
  set_has_over_time();
  over_time_ = value;
}

// optional uint32 attackerNum = 8;
inline bool GS2C_Combat_Select_Tactic::has_attackernum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_attackernum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_attackernum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Combat_Select_Tactic::clear_attackernum() {
  attackernum_ = 0u;
  clear_has_attackernum();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic::attackernum() const {
  return attackernum_;
}
inline void GS2C_Combat_Select_Tactic::set_attackernum(::google::protobuf::uint32 value) {
  set_has_attackernum();
  attackernum_ = value;
}

// optional uint32 defenderNum = 9;
inline bool GS2C_Combat_Select_Tactic::has_defendernum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_defendernum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_defendernum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_Combat_Select_Tactic::clear_defendernum() {
  defendernum_ = 0u;
  clear_has_defendernum();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic::defendernum() const {
  return defendernum_;
}
inline void GS2C_Combat_Select_Tactic::set_defendernum(::google::protobuf::uint32 value) {
  set_has_defendernum();
  defendernum_ = value;
}

// optional uint32 attSkillID = 10;
inline bool GS2C_Combat_Select_Tactic::has_attskillid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_attskillid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_attskillid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GS2C_Combat_Select_Tactic::clear_attskillid() {
  attskillid_ = 0u;
  clear_has_attskillid();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic::attskillid() const {
  return attskillid_;
}
inline void GS2C_Combat_Select_Tactic::set_attskillid(::google::protobuf::uint32 value) {
  set_has_attskillid();
  attskillid_ = value;
}

// optional uint32 defSkillID = 11;
inline bool GS2C_Combat_Select_Tactic::has_defskillid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_defskillid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_defskillid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GS2C_Combat_Select_Tactic::clear_defskillid() {
  defskillid_ = 0u;
  clear_has_defskillid();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic::defskillid() const {
  return defskillid_;
}
inline void GS2C_Combat_Select_Tactic::set_defskillid(::google::protobuf::uint32 value) {
  set_has_defskillid();
  defskillid_ = value;
}

// repeated .pb.Combat_Buff_Remain buffsRemain = 12;
inline int GS2C_Combat_Select_Tactic::buffsremain_size() const {
  return buffsremain_.size();
}
inline void GS2C_Combat_Select_Tactic::clear_buffsremain() {
  buffsremain_.Clear();
}
inline const ::pb::Combat_Buff_Remain& GS2C_Combat_Select_Tactic::buffsremain(int index) const {
  return buffsremain_.Get(index);
}
inline ::pb::Combat_Buff_Remain* GS2C_Combat_Select_Tactic::mutable_buffsremain(int index) {
  return buffsremain_.Mutable(index);
}
inline ::pb::Combat_Buff_Remain* GS2C_Combat_Select_Tactic::add_buffsremain() {
  return buffsremain_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain >&
GS2C_Combat_Select_Tactic::buffsremain() const {
  return buffsremain_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain >*
GS2C_Combat_Select_Tactic::mutable_buffsremain() {
  return &buffsremain_;
}

// optional uint64 roundCount = 13;
inline bool GS2C_Combat_Select_Tactic::has_roundcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_roundcount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_roundcount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GS2C_Combat_Select_Tactic::clear_roundcount() {
  roundcount_ = GOOGLE_ULONGLONG(0);
  clear_has_roundcount();
}
inline ::google::protobuf::uint64 GS2C_Combat_Select_Tactic::roundcount() const {
  return roundcount_;
}
inline void GS2C_Combat_Select_Tactic::set_roundcount(::google::protobuf::uint64 value) {
  set_has_roundcount();
  roundcount_ = value;
}

// repeated .pb.extra_awards att_extra_awards = 14;
inline int GS2C_Combat_Select_Tactic::att_extra_awards_size() const {
  return att_extra_awards_.size();
}
inline void GS2C_Combat_Select_Tactic::clear_att_extra_awards() {
  att_extra_awards_.Clear();
}
inline const ::pb::extra_awards& GS2C_Combat_Select_Tactic::att_extra_awards(int index) const {
  return att_extra_awards_.Get(index);
}
inline ::pb::extra_awards* GS2C_Combat_Select_Tactic::mutable_att_extra_awards(int index) {
  return att_extra_awards_.Mutable(index);
}
inline ::pb::extra_awards* GS2C_Combat_Select_Tactic::add_att_extra_awards() {
  return att_extra_awards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >&
GS2C_Combat_Select_Tactic::att_extra_awards() const {
  return att_extra_awards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >*
GS2C_Combat_Select_Tactic::mutable_att_extra_awards() {
  return &att_extra_awards_;
}

// repeated .pb.extra_awards def_extra_awards = 15;
inline int GS2C_Combat_Select_Tactic::def_extra_awards_size() const {
  return def_extra_awards_.size();
}
inline void GS2C_Combat_Select_Tactic::clear_def_extra_awards() {
  def_extra_awards_.Clear();
}
inline const ::pb::extra_awards& GS2C_Combat_Select_Tactic::def_extra_awards(int index) const {
  return def_extra_awards_.Get(index);
}
inline ::pb::extra_awards* GS2C_Combat_Select_Tactic::mutable_def_extra_awards(int index) {
  return def_extra_awards_.Mutable(index);
}
inline ::pb::extra_awards* GS2C_Combat_Select_Tactic::add_def_extra_awards() {
  return def_extra_awards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >&
GS2C_Combat_Select_Tactic::def_extra_awards() const {
  return def_extra_awards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >*
GS2C_Combat_Select_Tactic::mutable_def_extra_awards() {
  return &def_extra_awards_;
}

// optional uint32 group_id = 16;
inline bool GS2C_Combat_Select_Tactic::has_group_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_group_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_group_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GS2C_Combat_Select_Tactic::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Select_Tactic::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional uint32 attShadowNum = 17;
inline bool GS2C_Combat_Select_Tactic::has_attshadownum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_attshadownum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_attshadownum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GS2C_Combat_Select_Tactic::clear_attshadownum() {
  attshadownum_ = 0u;
  clear_has_attshadownum();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic::attshadownum() const {
  return attshadownum_;
}
inline void GS2C_Combat_Select_Tactic::set_attshadownum(::google::protobuf::uint32 value) {
  set_has_attshadownum();
  attshadownum_ = value;
}

// optional uint32 defShadowNum = 18;
inline bool GS2C_Combat_Select_Tactic::has_defshadownum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GS2C_Combat_Select_Tactic::set_has_defshadownum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GS2C_Combat_Select_Tactic::clear_has_defshadownum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GS2C_Combat_Select_Tactic::clear_defshadownum() {
  defshadownum_ = 0u;
  clear_has_defshadownum();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic::defshadownum() const {
  return defshadownum_;
}
inline void GS2C_Combat_Select_Tactic::set_defshadownum(::google::protobuf::uint32 value) {
  set_has_defshadownum();
  defshadownum_ = value;
}

// -------------------------------------------------------------------

// Combat_Buff_Remain

// optional uint32 groupfrom = 1;
inline bool Combat_Buff_Remain::has_groupfrom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Combat_Buff_Remain::set_has_groupfrom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Combat_Buff_Remain::clear_has_groupfrom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Combat_Buff_Remain::clear_groupfrom() {
  groupfrom_ = 0u;
  clear_has_groupfrom();
}
inline ::google::protobuf::uint32 Combat_Buff_Remain::groupfrom() const {
  return groupfrom_;
}
inline void Combat_Buff_Remain::set_groupfrom(::google::protobuf::uint32 value) {
  set_has_groupfrom();
  groupfrom_ = value;
}

// optional uint32 groupto = 2;
inline bool Combat_Buff_Remain::has_groupto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Combat_Buff_Remain::set_has_groupto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Combat_Buff_Remain::clear_has_groupto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Combat_Buff_Remain::clear_groupto() {
  groupto_ = 0u;
  clear_has_groupto();
}
inline ::google::protobuf::uint32 Combat_Buff_Remain::groupto() const {
  return groupto_;
}
inline void Combat_Buff_Remain::set_groupto(::google::protobuf::uint32 value) {
  set_has_groupto();
  groupto_ = value;
}

// optional uint32 range = 3;
inline bool Combat_Buff_Remain::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Combat_Buff_Remain::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Combat_Buff_Remain::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Combat_Buff_Remain::clear_range() {
  range_ = 0u;
  clear_has_range();
}
inline ::google::protobuf::uint32 Combat_Buff_Remain::range() const {
  return range_;
}
inline void Combat_Buff_Remain::set_range(::google::protobuf::uint32 value) {
  set_has_range();
  range_ = value;
}

// optional uint32 buffID = 4;
inline bool Combat_Buff_Remain::has_buffid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Combat_Buff_Remain::set_has_buffid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Combat_Buff_Remain::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Combat_Buff_Remain::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 Combat_Buff_Remain::buffid() const {
  return buffid_;
}
inline void Combat_Buff_Remain::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
}

// -------------------------------------------------------------------

// Combat_Buff_AllInfo

// repeated .pb.Combat_Damage damages = 1;
inline int Combat_Buff_AllInfo::damages_size() const {
  return damages_.size();
}
inline void Combat_Buff_AllInfo::clear_damages() {
  damages_.Clear();
}
inline const ::pb::Combat_Damage& Combat_Buff_AllInfo::damages(int index) const {
  return damages_.Get(index);
}
inline ::pb::Combat_Damage* Combat_Buff_AllInfo::mutable_damages(int index) {
  return damages_.Mutable(index);
}
inline ::pb::Combat_Damage* Combat_Buff_AllInfo::add_damages() {
  return damages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage >&
Combat_Buff_AllInfo::damages() const {
  return damages_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Damage >*
Combat_Buff_AllInfo::mutable_damages() {
  return &damages_;
}

// repeated .pb.Combat_Reward rewards = 2;
inline int Combat_Buff_AllInfo::rewards_size() const {
  return rewards_.size();
}
inline void Combat_Buff_AllInfo::clear_rewards() {
  rewards_.Clear();
}
inline const ::pb::Combat_Reward& Combat_Buff_AllInfo::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::pb::Combat_Reward* Combat_Buff_AllInfo::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::pb::Combat_Reward* Combat_Buff_AllInfo::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward >&
Combat_Buff_AllInfo::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Reward >*
Combat_Buff_AllInfo::mutable_rewards() {
  return &rewards_;
}

// repeated .pb.Combat_Buff_Remain buffremians = 3;
inline int Combat_Buff_AllInfo::buffremians_size() const {
  return buffremians_.size();
}
inline void Combat_Buff_AllInfo::clear_buffremians() {
  buffremians_.Clear();
}
inline const ::pb::Combat_Buff_Remain& Combat_Buff_AllInfo::buffremians(int index) const {
  return buffremians_.Get(index);
}
inline ::pb::Combat_Buff_Remain* Combat_Buff_AllInfo::mutable_buffremians(int index) {
  return buffremians_.Mutable(index);
}
inline ::pb::Combat_Buff_Remain* Combat_Buff_AllInfo::add_buffremians() {
  return buffremians_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain >&
Combat_Buff_AllInfo::buffremians() const {
  return buffremians_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Combat_Buff_Remain >*
Combat_Buff_AllInfo::mutable_buffremians() {
  return &buffremians_;
}

// repeated .pb.extra_awards att_extra_awards = 4;
inline int Combat_Buff_AllInfo::att_extra_awards_size() const {
  return att_extra_awards_.size();
}
inline void Combat_Buff_AllInfo::clear_att_extra_awards() {
  att_extra_awards_.Clear();
}
inline const ::pb::extra_awards& Combat_Buff_AllInfo::att_extra_awards(int index) const {
  return att_extra_awards_.Get(index);
}
inline ::pb::extra_awards* Combat_Buff_AllInfo::mutable_att_extra_awards(int index) {
  return att_extra_awards_.Mutable(index);
}
inline ::pb::extra_awards* Combat_Buff_AllInfo::add_att_extra_awards() {
  return att_extra_awards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >&
Combat_Buff_AllInfo::att_extra_awards() const {
  return att_extra_awards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >*
Combat_Buff_AllInfo::mutable_att_extra_awards() {
  return &att_extra_awards_;
}

// repeated .pb.extra_awards def_extra_awards = 5;
inline int Combat_Buff_AllInfo::def_extra_awards_size() const {
  return def_extra_awards_.size();
}
inline void Combat_Buff_AllInfo::clear_def_extra_awards() {
  def_extra_awards_.Clear();
}
inline const ::pb::extra_awards& Combat_Buff_AllInfo::def_extra_awards(int index) const {
  return def_extra_awards_.Get(index);
}
inline ::pb::extra_awards* Combat_Buff_AllInfo::mutable_def_extra_awards(int index) {
  return def_extra_awards_.Mutable(index);
}
inline ::pb::extra_awards* Combat_Buff_AllInfo::add_def_extra_awards() {
  return def_extra_awards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >&
Combat_Buff_AllInfo::def_extra_awards() const {
  return def_extra_awards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::extra_awards >*
Combat_Buff_AllInfo::mutable_def_extra_awards() {
  return &def_extra_awards_;
}

// -------------------------------------------------------------------

// C2GS_Combat_Ani_Finished

// required uint32 groupid = 1;
inline bool C2GS_Combat_Ani_Finished::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Ani_Finished::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Ani_Finished::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Ani_Finished::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 C2GS_Combat_Ani_Finished::groupid() const {
  return groupid_;
}
inline void C2GS_Combat_Ani_Finished::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint64 roundCount = 2;
inline bool C2GS_Combat_Ani_Finished::has_roundcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Ani_Finished::set_has_roundcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Ani_Finished::clear_has_roundcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Ani_Finished::clear_roundcount() {
  roundcount_ = GOOGLE_ULONGLONG(0);
  clear_has_roundcount();
}
inline ::google::protobuf::uint64 C2GS_Combat_Ani_Finished::roundcount() const {
  return roundcount_;
}
inline void C2GS_Combat_Ani_Finished::set_roundcount(::google::protobuf::uint64 value) {
  set_has_roundcount();
  roundcount_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_New_Round

// optional uint64 choose_time = 1;
inline bool GS2C_Combat_New_Round::has_choose_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_New_Round::set_has_choose_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_New_Round::clear_has_choose_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_New_Round::clear_choose_time() {
  choose_time_ = GOOGLE_ULONGLONG(0);
  clear_has_choose_time();
}
inline ::google::protobuf::uint64 GS2C_Combat_New_Round::choose_time() const {
  return choose_time_;
}
inline void GS2C_Combat_New_Round::set_choose_time(::google::protobuf::uint64 value) {
  set_has_choose_time();
  choose_time_ = value;
}

// optional uint32 attTacticEnableStr = 2;
inline bool GS2C_Combat_New_Round::has_atttacticenablestr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_New_Round::set_has_atttacticenablestr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_New_Round::clear_has_atttacticenablestr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_New_Round::clear_atttacticenablestr() {
  atttacticenablestr_ = 0u;
  clear_has_atttacticenablestr();
}
inline ::google::protobuf::uint32 GS2C_Combat_New_Round::atttacticenablestr() const {
  return atttacticenablestr_;
}
inline void GS2C_Combat_New_Round::set_atttacticenablestr(::google::protobuf::uint32 value) {
  set_has_atttacticenablestr();
  atttacticenablestr_ = value;
}

// optional uint32 defTacticEnableStr = 3;
inline bool GS2C_Combat_New_Round::has_deftacticenablestr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_New_Round::set_has_deftacticenablestr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_New_Round::clear_has_deftacticenablestr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_New_Round::clear_deftacticenablestr() {
  deftacticenablestr_ = 0u;
  clear_has_deftacticenablestr();
}
inline ::google::protobuf::uint32 GS2C_Combat_New_Round::deftacticenablestr() const {
  return deftacticenablestr_;
}
inline void GS2C_Combat_New_Round::set_deftacticenablestr(::google::protobuf::uint32 value) {
  set_has_deftacticenablestr();
  deftacticenablestr_ = value;
}

// optional bool canAttSelectTactic = 4;
inline bool GS2C_Combat_New_Round::has_canattselecttactic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_New_Round::set_has_canattselecttactic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_New_Round::clear_has_canattselecttactic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_New_Round::clear_canattselecttactic() {
  canattselecttactic_ = false;
  clear_has_canattselecttactic();
}
inline bool GS2C_Combat_New_Round::canattselecttactic() const {
  return canattselecttactic_;
}
inline void GS2C_Combat_New_Round::set_canattselecttactic(bool value) {
  set_has_canattselecttactic();
  canattselecttactic_ = value;
}

// optional bool canDefSelectTactic = 5;
inline bool GS2C_Combat_New_Round::has_candefselecttactic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_New_Round::set_has_candefselecttactic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_New_Round::clear_has_candefselecttactic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_New_Round::clear_candefselecttactic() {
  candefselecttactic_ = false;
  clear_has_candefselecttactic();
}
inline bool GS2C_Combat_New_Round::candefselecttactic() const {
  return candefselecttactic_;
}
inline void GS2C_Combat_New_Round::set_candefselecttactic(bool value) {
  set_has_candefselecttactic();
  candefselecttactic_ = value;
}

// optional .pb.Combat_Buff_AllInfo buffinfo = 6;
inline bool GS2C_Combat_New_Round::has_buffinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Combat_New_Round::set_has_buffinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Combat_New_Round::clear_has_buffinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Combat_New_Round::clear_buffinfo() {
  if (buffinfo_ != NULL) buffinfo_->::pb::Combat_Buff_AllInfo::Clear();
  clear_has_buffinfo();
}
inline const ::pb::Combat_Buff_AllInfo& GS2C_Combat_New_Round::buffinfo() const {
  return buffinfo_ != NULL ? *buffinfo_ : *default_instance_->buffinfo_;
}
inline ::pb::Combat_Buff_AllInfo* GS2C_Combat_New_Round::mutable_buffinfo() {
  set_has_buffinfo();
  if (buffinfo_ == NULL) buffinfo_ = new ::pb::Combat_Buff_AllInfo;
  return buffinfo_;
}
inline ::pb::Combat_Buff_AllInfo* GS2C_Combat_New_Round::release_buffinfo() {
  clear_has_buffinfo();
  ::pb::Combat_Buff_AllInfo* temp = buffinfo_;
  buffinfo_ = NULL;
  return temp;
}
inline void GS2C_Combat_New_Round::set_allocated_buffinfo(::pb::Combat_Buff_AllInfo* buffinfo) {
  delete buffinfo_;
  buffinfo_ = buffinfo;
  if (buffinfo) {
    set_has_buffinfo();
  } else {
    clear_has_buffinfo();
  }
}

// optional uint64 roundCount = 7;
inline bool GS2C_Combat_New_Round::has_roundcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Combat_New_Round::set_has_roundcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Combat_New_Round::clear_has_roundcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Combat_New_Round::clear_roundcount() {
  roundcount_ = GOOGLE_ULONGLONG(0);
  clear_has_roundcount();
}
inline ::google::protobuf::uint64 GS2C_Combat_New_Round::roundcount() const {
  return roundcount_;
}
inline void GS2C_Combat_New_Round::set_roundcount(::google::protobuf::uint64 value) {
  set_has_roundcount();
  roundcount_ = value;
}

// optional uint32 group_id = 8;
inline bool GS2C_Combat_New_Round::has_group_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Combat_New_Round::set_has_group_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Combat_New_Round::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Combat_New_Round::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_New_Round::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_New_Round::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Select_Tactic_Single

// required .pb.Msg_ECombatTactic type = 1;
inline bool GS2C_Combat_Select_Tactic_Single::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Select_Tactic_Single::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pb::Msg_ECombatTactic GS2C_Combat_Select_Tactic_Single::type() const {
  return static_cast< ::pb::Msg_ECombatTactic >(type_);
}
inline void GS2C_Combat_Select_Tactic_Single::set_type(::pb::Msg_ECombatTactic value) {
  assert(::pb::Msg_ECombatTactic_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool is_attacker = 2;
inline bool GS2C_Combat_Select_Tactic_Single::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Select_Tactic_Single::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool GS2C_Combat_Select_Tactic_Single::is_attacker() const {
  return is_attacker_;
}
inline void GS2C_Combat_Select_Tactic_Single::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// optional uint32 attackerNum = 3;
inline bool GS2C_Combat_Select_Tactic_Single::has_attackernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Select_Tactic_Single::set_has_attackernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_has_attackernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_attackernum() {
  attackernum_ = 0u;
  clear_has_attackernum();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic_Single::attackernum() const {
  return attackernum_;
}
inline void GS2C_Combat_Select_Tactic_Single::set_attackernum(::google::protobuf::uint32 value) {
  set_has_attackernum();
  attackernum_ = value;
}

// optional uint32 defenderNum = 4;
inline bool GS2C_Combat_Select_Tactic_Single::has_defendernum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Select_Tactic_Single::set_has_defendernum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_has_defendernum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_defendernum() {
  defendernum_ = 0u;
  clear_has_defendernum();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic_Single::defendernum() const {
  return defendernum_;
}
inline void GS2C_Combat_Select_Tactic_Single::set_defendernum(::google::protobuf::uint32 value) {
  set_has_defendernum();
  defendernum_ = value;
}

// optional uint64 roundCount = 5;
inline bool GS2C_Combat_Select_Tactic_Single::has_roundcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Select_Tactic_Single::set_has_roundcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_has_roundcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_roundcount() {
  roundcount_ = GOOGLE_ULONGLONG(0);
  clear_has_roundcount();
}
inline ::google::protobuf::uint64 GS2C_Combat_Select_Tactic_Single::roundcount() const {
  return roundcount_;
}
inline void GS2C_Combat_Select_Tactic_Single::set_roundcount(::google::protobuf::uint64 value) {
  set_has_roundcount();
  roundcount_ = value;
}

// optional uint32 group_id = 6;
inline bool GS2C_Combat_Select_Tactic_Single::has_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Combat_Select_Tactic_Single::set_has_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Combat_Select_Tactic_Single::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Select_Tactic_Single::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Select_Tactic_Single::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Unwatch

// required uint32 group_id = 1;
inline bool C2GS_Combat_Unwatch::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Unwatch::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Unwatch::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Unwatch::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Unwatch::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Unwatch::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional bool is_in_cross = 2;
inline bool C2GS_Combat_Unwatch::has_is_in_cross() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Unwatch::set_has_is_in_cross() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Unwatch::clear_has_is_in_cross() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Unwatch::clear_is_in_cross() {
  is_in_cross_ = false;
  clear_has_is_in_cross();
}
inline bool C2GS_Combat_Unwatch::is_in_cross() const {
  return is_in_cross_;
}
inline void C2GS_Combat_Unwatch::set_is_in_cross(bool value) {
  set_has_is_in_cross();
  is_in_cross_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_End

// required bool is_attack_win = 1;
inline bool GS2C_Combat_End::has_is_attack_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_End::set_has_is_attack_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_End::clear_has_is_attack_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_End::clear_is_attack_win() {
  is_attack_win_ = false;
  clear_has_is_attack_win();
}
inline bool GS2C_Combat_End::is_attack_win() const {
  return is_attack_win_;
}
inline void GS2C_Combat_End::set_is_attack_win(bool value) {
  set_has_is_attack_win();
  is_attack_win_ = value;
}

// optional uint32 statisticExp = 2;
inline bool GS2C_Combat_End::has_statisticexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_End::set_has_statisticexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_End::clear_has_statisticexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_End::clear_statisticexp() {
  statisticexp_ = 0u;
  clear_has_statisticexp();
}
inline ::google::protobuf::uint32 GS2C_Combat_End::statisticexp() const {
  return statisticexp_;
}
inline void GS2C_Combat_End::set_statisticexp(::google::protobuf::uint32 value) {
  set_has_statisticexp();
  statisticexp_ = value;
}

// optional uint32 statisticMoney = 3;
inline bool GS2C_Combat_End::has_statisticmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_End::set_has_statisticmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_End::clear_has_statisticmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_End::clear_statisticmoney() {
  statisticmoney_ = 0u;
  clear_has_statisticmoney();
}
inline ::google::protobuf::uint32 GS2C_Combat_End::statisticmoney() const {
  return statisticmoney_;
}
inline void GS2C_Combat_End::set_statisticmoney(::google::protobuf::uint32 value) {
  set_has_statisticmoney();
  statisticmoney_ = value;
}

// optional uint32 statisticDead = 4;
inline bool GS2C_Combat_End::has_statisticdead() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_End::set_has_statisticdead() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_End::clear_has_statisticdead() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_End::clear_statisticdead() {
  statisticdead_ = 0u;
  clear_has_statisticdead();
}
inline ::google::protobuf::uint32 GS2C_Combat_End::statisticdead() const {
  return statisticdead_;
}
inline void GS2C_Combat_End::set_statisticdead(::google::protobuf::uint32 value) {
  set_has_statisticdead();
  statisticdead_ = value;
}

// optional uint32 statisticKill = 5;
inline bool GS2C_Combat_End::has_statistickill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_End::set_has_statistickill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_End::clear_has_statistickill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_End::clear_statistickill() {
  statistickill_ = 0u;
  clear_has_statistickill();
}
inline ::google::protobuf::uint32 GS2C_Combat_End::statistickill() const {
  return statistickill_;
}
inline void GS2C_Combat_End::set_statistickill(::google::protobuf::uint32 value) {
  set_has_statistickill();
  statistickill_ = value;
}

// repeated .pb.StReward rewards = 6;
inline int GS2C_Combat_End::rewards_size() const {
  return rewards_.size();
}
inline void GS2C_Combat_End::clear_rewards() {
  rewards_.Clear();
}
inline const ::pb::StReward& GS2C_Combat_End::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::pb::StReward* GS2C_Combat_End::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::pb::StReward* GS2C_Combat_End::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_Combat_End::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_Combat_End::mutable_rewards() {
  return &rewards_;
}

// optional uint32 group_id = 7;
inline bool GS2C_Combat_End::has_group_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Combat_End::set_has_group_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Combat_End::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Combat_End::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_End::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_End::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// repeated .pb.StReward Extrewards = 8;
inline int GS2C_Combat_End::extrewards_size() const {
  return extrewards_.size();
}
inline void GS2C_Combat_End::clear_extrewards() {
  extrewards_.Clear();
}
inline const ::pb::StReward& GS2C_Combat_End::extrewards(int index) const {
  return extrewards_.Get(index);
}
inline ::pb::StReward* GS2C_Combat_End::mutable_extrewards(int index) {
  return extrewards_.Mutable(index);
}
inline ::pb::StReward* GS2C_Combat_End::add_extrewards() {
  return extrewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_Combat_End::extrewards() const {
  return extrewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_Combat_End::mutable_extrewards() {
  return &extrewards_;
}

// -------------------------------------------------------------------

// GS2C_Combat_Hero_Dead

// required uint64 player_id = 1;
inline bool GS2C_Combat_Hero_Dead::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Hero_Dead::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Hero_Dead::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Hero_Dead::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 GS2C_Combat_Hero_Dead::player_id() const {
  return player_id_;
}
inline void GS2C_Combat_Hero_Dead::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// required uint32 hero_id = 2;
inline bool GS2C_Combat_Hero_Dead::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Hero_Dead::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Hero_Dead::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Hero_Dead::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Hero_Dead::hero_id() const {
  return hero_id_;
}
inline void GS2C_Combat_Hero_Dead::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 group_id = 3;
inline bool GS2C_Combat_Hero_Dead::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Hero_Dead::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Hero_Dead::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Hero_Dead::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Hero_Dead::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Hero_Dead::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Attract_Enemy

// required uint32 group_id = 1;
inline bool C2GS_Combat_Attract_Enemy::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Attract_Enemy::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Attract_Enemy::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Attract_Enemy::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Attract_Enemy::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Attract_Enemy::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required bool is_attacker = 2;
inline bool C2GS_Combat_Attract_Enemy::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Attract_Enemy::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Attract_Enemy::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Attract_Enemy::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool C2GS_Combat_Attract_Enemy::is_attacker() const {
  return is_attacker_;
}
inline void C2GS_Combat_Attract_Enemy::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Attract_Enemy

// required bool is_success = 1;
inline bool GS2C_Combat_Attract_Enemy::has_is_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Attract_Enemy::set_has_is_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Attract_Enemy::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Attract_Enemy::clear_is_success() {
  is_success_ = false;
  clear_has_is_success();
}
inline bool GS2C_Combat_Attract_Enemy::is_success() const {
  return is_success_;
}
inline void GS2C_Combat_Attract_Enemy::set_is_success(bool value) {
  set_has_is_success();
  is_success_ = value;
}

// optional uint32 group_id = 2;
inline bool GS2C_Combat_Attract_Enemy::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Attract_Enemy::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Attract_Enemy::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Attract_Enemy::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Attract_Enemy::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Attract_Enemy::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional uint64 player_id = 3;
inline bool GS2C_Combat_Attract_Enemy::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Attract_Enemy::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Attract_Enemy::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Attract_Enemy::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 GS2C_Combat_Attract_Enemy::player_id() const {
  return player_id_;
}
inline void GS2C_Combat_Attract_Enemy::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional uint32 hero_table_id = 4;
inline bool GS2C_Combat_Attract_Enemy::has_hero_table_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Attract_Enemy::set_has_hero_table_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Attract_Enemy::clear_has_hero_table_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Attract_Enemy::clear_hero_table_id() {
  hero_table_id_ = 0u;
  clear_has_hero_table_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Attract_Enemy::hero_table_id() const {
  return hero_table_id_;
}
inline void GS2C_Combat_Attract_Enemy::set_hero_table_id(::google::protobuf::uint32 value) {
  set_has_hero_table_id();
  hero_table_id_ = value;
}

// optional uint64 costs = 5;
inline bool GS2C_Combat_Attract_Enemy::has_costs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Attract_Enemy::set_has_costs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Attract_Enemy::clear_has_costs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Attract_Enemy::clear_costs() {
  costs_ = GOOGLE_ULONGLONG(0);
  clear_has_costs();
}
inline ::google::protobuf::uint64 GS2C_Combat_Attract_Enemy::costs() const {
  return costs_;
}
inline void GS2C_Combat_Attract_Enemy::set_costs(::google::protobuf::uint64 value) {
  set_has_costs();
  costs_ = value;
}

// optional uint64 my_player_id = 6;
inline bool GS2C_Combat_Attract_Enemy::has_my_player_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Combat_Attract_Enemy::set_has_my_player_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Combat_Attract_Enemy::clear_has_my_player_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Combat_Attract_Enemy::clear_my_player_id() {
  my_player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_my_player_id();
}
inline ::google::protobuf::uint64 GS2C_Combat_Attract_Enemy::my_player_id() const {
  return my_player_id_;
}
inline void GS2C_Combat_Attract_Enemy::set_my_player_id(::google::protobuf::uint64 value) {
  set_has_my_player_id();
  my_player_id_ = value;
}

// optional uint32 my_hero_id = 7;
inline bool GS2C_Combat_Attract_Enemy::has_my_hero_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Combat_Attract_Enemy::set_has_my_hero_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Combat_Attract_Enemy::clear_has_my_hero_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Combat_Attract_Enemy::clear_my_hero_id() {
  my_hero_id_ = 0u;
  clear_has_my_hero_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Attract_Enemy::my_hero_id() const {
  return my_hero_id_;
}
inline void GS2C_Combat_Attract_Enemy::set_my_hero_id(::google::protobuf::uint32 value) {
  set_has_my_hero_id();
  my_hero_id_ = value;
}

// optional uint32 old_group_id = 8;
inline bool GS2C_Combat_Attract_Enemy::has_old_group_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Combat_Attract_Enemy::set_has_old_group_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Combat_Attract_Enemy::clear_has_old_group_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Combat_Attract_Enemy::clear_old_group_id() {
  old_group_id_ = 0u;
  clear_has_old_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Attract_Enemy::old_group_id() const {
  return old_group_id_;
}
inline void GS2C_Combat_Attract_Enemy::set_old_group_id(::google::protobuf::uint32 value) {
  set_has_old_group_id();
  old_group_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Rush

// required uint32 group_id = 1;
inline bool C2GS_Combat_Rush::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Rush::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Rush::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Rush::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Rush::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Rush::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required bool is_attacker = 2;
inline bool C2GS_Combat_Rush::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Rush::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Rush::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Rush::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool C2GS_Combat_Rush::is_attacker() const {
  return is_attacker_;
}
inline void C2GS_Combat_Rush::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// required uint32 city_id = 3;
inline bool C2GS_Combat_Rush::has_city_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Combat_Rush::set_has_city_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Combat_Rush::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Combat_Rush::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Rush::city_id() const {
  return city_id_;
}
inline void C2GS_Combat_Rush::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// required uint32 hero_id = 4;
inline bool C2GS_Combat_Rush::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Combat_Rush::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Combat_Rush::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Combat_Rush::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Rush::hero_id() const {
  return hero_id_;
}
inline void C2GS_Combat_Rush::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Rush_Result

// optional .pb.Msg_return_common result = 1;
inline bool GS2C_Rush_Result::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Rush_Result::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Rush_Result::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Rush_Result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::Msg_return_common GS2C_Rush_Result::result() const {
  return static_cast< ::pb::Msg_return_common >(result_);
}
inline void GS2C_Rush_Result::set_result(::pb::Msg_return_common value) {
  assert(::pb::Msg_return_common_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 group_id = 2;
inline bool GS2C_Rush_Result::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Rush_Result::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Rush_Result::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Rush_Result::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Rush_Result::group_id() const {
  return group_id_;
}
inline void GS2C_Rush_Result::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional uint64 rush_cd_end_time = 3;
inline bool GS2C_Rush_Result::has_rush_cd_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Rush_Result::set_has_rush_cd_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Rush_Result::clear_has_rush_cd_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Rush_Result::clear_rush_cd_end_time() {
  rush_cd_end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_rush_cd_end_time();
}
inline ::google::protobuf::uint64 GS2C_Rush_Result::rush_cd_end_time() const {
  return rush_cd_end_time_;
}
inline void GS2C_Rush_Result::set_rush_cd_end_time(::google::protobuf::uint64 value) {
  set_has_rush_cd_end_time();
  rush_cd_end_time_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Runaway

// required uint32 group_id = 1;
inline bool C2GS_Combat_Runaway::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Runaway::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Runaway::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Runaway::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Runaway::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Runaway::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required bool is_attacker = 2;
inline bool C2GS_Combat_Runaway::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Runaway::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Runaway::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Runaway::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool C2GS_Combat_Runaway::is_attacker() const {
  return is_attacker_;
}
inline void C2GS_Combat_Runaway::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// required uint32 city_id = 3;
inline bool C2GS_Combat_Runaway::has_city_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Combat_Runaway::set_has_city_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Combat_Runaway::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Combat_Runaway::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Runaway::city_id() const {
  return city_id_;
}
inline void C2GS_Combat_Runaway::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// required uint32 hero_id = 4;
inline bool C2GS_Combat_Runaway::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Combat_Runaway::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Combat_Runaway::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Combat_Runaway::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Runaway::hero_id() const {
  return hero_id_;
}
inline void C2GS_Combat_Runaway::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Runaway

// optional .pb.Msg_return_common result = 1;
inline bool GS2C_Combat_Runaway::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Runaway::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Runaway::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Runaway::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::Msg_return_common GS2C_Combat_Runaway::result() const {
  return static_cast< ::pb::Msg_return_common >(result_);
}
inline void GS2C_Combat_Runaway::set_result(::pb::Msg_return_common value) {
  assert(::pb::Msg_return_common_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 group_id = 2;
inline bool GS2C_Combat_Runaway::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Runaway::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Runaway::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Runaway::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Runaway::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Runaway::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Add_Soldier

// required uint32 group_id = 1;
inline bool C2GS_Combat_Add_Soldier::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Add_Soldier::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Add_Soldier::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Add_Soldier::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Add_Soldier::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Add_Soldier::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required bool is_attacker = 2;
inline bool C2GS_Combat_Add_Soldier::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Add_Soldier::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Add_Soldier::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Add_Soldier::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool C2GS_Combat_Add_Soldier::is_attacker() const {
  return is_attacker_;
}
inline void C2GS_Combat_Add_Soldier::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// required uint32 times = 3;
inline bool C2GS_Combat_Add_Soldier::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Combat_Add_Soldier::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Combat_Add_Soldier::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Combat_Add_Soldier::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 C2GS_Combat_Add_Soldier::times() const {
  return times_;
}
inline void C2GS_Combat_Add_Soldier::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// required uint32 hero_id = 4;
inline bool C2GS_Combat_Add_Soldier::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Combat_Add_Soldier::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Combat_Add_Soldier::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Combat_Add_Soldier::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Add_Soldier::hero_id() const {
  return hero_id_;
}
inline void C2GS_Combat_Add_Soldier::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 curCityId = 5;
inline bool C2GS_Combat_Add_Soldier::has_curcityid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_Combat_Add_Soldier::set_has_curcityid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_Combat_Add_Soldier::clear_has_curcityid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_Combat_Add_Soldier::clear_curcityid() {
  curcityid_ = 0u;
  clear_has_curcityid();
}
inline ::google::protobuf::uint32 C2GS_Combat_Add_Soldier::curcityid() const {
  return curcityid_;
}
inline void C2GS_Combat_Add_Soldier::set_curcityid(::google::protobuf::uint32 value) {
  set_has_curcityid();
  curcityid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Add_Soldier

// optional .pb.Msg_return_common result = 1;
inline bool GS2C_Combat_Add_Soldier::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Add_Soldier::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Add_Soldier::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Add_Soldier::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::Msg_return_common GS2C_Combat_Add_Soldier::result() const {
  return static_cast< ::pb::Msg_return_common >(result_);
}
inline void GS2C_Combat_Add_Soldier::set_result(::pb::Msg_return_common value) {
  assert(::pb::Msg_return_common_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 addExp = 2;
inline bool GS2C_Combat_Add_Soldier::has_addexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Add_Soldier::set_has_addexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Add_Soldier::clear_has_addexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Add_Soldier::clear_addexp() {
  addexp_ = 0u;
  clear_has_addexp();
}
inline ::google::protobuf::uint32 GS2C_Combat_Add_Soldier::addexp() const {
  return addexp_;
}
inline void GS2C_Combat_Add_Soldier::set_addexp(::google::protobuf::uint32 value) {
  set_has_addexp();
  addexp_ = value;
}

// optional uint32 group_id = 3;
inline bool GS2C_Combat_Add_Soldier::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Add_Soldier::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Add_Soldier::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Add_Soldier::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Add_Soldier::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Add_Soldier::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Call_Up

// required uint32 city_id = 1;
inline bool C2GS_Combat_Call_Up::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Call_Up::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Call_Up::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Call_Up::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Call_Up::city_id() const {
  return city_id_;
}
inline void C2GS_Combat_Call_Up::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Call_Up

// optional .pb.Msg_return_common result = 1;
inline bool GS2C_Combat_Call_Up::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Call_Up::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Call_Up::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Call_Up::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::Msg_return_common GS2C_Combat_Call_Up::result() const {
  return static_cast< ::pb::Msg_return_common >(result_);
}
inline void GS2C_Combat_Call_Up::set_result(::pb::Msg_return_common value) {
  assert(::pb::Msg_return_common_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Call_Request

// repeated uint32 hero_id = 1;
inline int C2GS_Combat_Call_Request::hero_id_size() const {
  return hero_id_.size();
}
inline void C2GS_Combat_Call_Request::clear_hero_id() {
  hero_id_.Clear();
}
inline ::google::protobuf::uint32 C2GS_Combat_Call_Request::hero_id(int index) const {
  return hero_id_.Get(index);
}
inline void C2GS_Combat_Call_Request::set_hero_id(int index, ::google::protobuf::uint32 value) {
  hero_id_.Set(index, value);
}
inline void C2GS_Combat_Call_Request::add_hero_id(::google::protobuf::uint32 value) {
  hero_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
C2GS_Combat_Call_Request::hero_id() const {
  return hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
C2GS_Combat_Call_Request::mutable_hero_id() {
  return &hero_id_;
}

// optional uint32 destCityID = 2;
inline bool C2GS_Combat_Call_Request::has_destcityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Call_Request::set_has_destcityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Call_Request::clear_has_destcityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Call_Request::clear_destcityid() {
  destcityid_ = 0u;
  clear_has_destcityid();
}
inline ::google::protobuf::uint32 C2GS_Combat_Call_Request::destcityid() const {
  return destcityid_;
}
inline void C2GS_Combat_Call_Request::set_destcityid(::google::protobuf::uint32 value) {
  set_has_destcityid();
  destcityid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Call_Request

// optional .pb.Msg_return_common result = 1;
inline bool GS2C_Combat_Call_Request::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Call_Request::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Call_Request::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Call_Request::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::Msg_return_common GS2C_Combat_Call_Request::result() const {
  return static_cast< ::pb::Msg_return_common >(result_);
}
inline void GS2C_Combat_Call_Request::set_result(::pb::Msg_return_common value) {
  assert(::pb::Msg_return_common_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint64 call_up_down_id = 2;
inline bool GS2C_Combat_Call_Request::has_call_up_down_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Call_Request::set_has_call_up_down_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Call_Request::clear_has_call_up_down_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Call_Request::clear_call_up_down_id() {
  call_up_down_id_ = GOOGLE_ULONGLONG(0);
  clear_has_call_up_down_id();
}
inline ::google::protobuf::uint64 GS2C_Combat_Call_Request::call_up_down_id() const {
  return call_up_down_id_;
}
inline void GS2C_Combat_Call_Request::set_call_up_down_id(::google::protobuf::uint64 value) {
  set_has_call_up_down_id();
  call_up_down_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Speed_Up

// required uint32 group_id = 1;
inline bool C2GS_Combat_Speed_Up::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Speed_Up::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Speed_Up::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Speed_Up::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Speed_Up::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Speed_Up::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required uint32 city_id = 2;
inline bool C2GS_Combat_Speed_Up::has_city_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Speed_Up::set_has_city_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Speed_Up::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Speed_Up::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Speed_Up::city_id() const {
  return city_id_;
}
inline void C2GS_Combat_Speed_Up::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Speed_Up

// required uint32 group_id = 1;
inline bool GS2C_Combat_Speed_Up::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Speed_Up::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Speed_Up::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Speed_Up::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Speed_Up::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Speed_Up::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Auto_Combat

// required bool useAuto = 2;
inline bool C2GS_Auto_Combat::has_useauto() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Auto_Combat::set_has_useauto() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Auto_Combat::clear_has_useauto() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Auto_Combat::clear_useauto() {
  useauto_ = false;
  clear_has_useauto();
}
inline bool C2GS_Auto_Combat::useauto() const {
  return useauto_;
}
inline void C2GS_Auto_Combat::set_useauto(bool value) {
  set_has_useauto();
  useauto_ = value;
}

// -------------------------------------------------------------------

// GS2C_Auto_Combat

// required bool useAuto = 1;
inline bool GS2C_Auto_Combat::has_useauto() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Auto_Combat::set_has_useauto() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Auto_Combat::clear_has_useauto() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Auto_Combat::clear_useauto() {
  useauto_ = false;
  clear_has_useauto();
}
inline bool GS2C_Auto_Combat::useauto() const {
  return useauto_;
}
inline void GS2C_Auto_Combat::set_useauto(bool value) {
  set_has_useauto();
  useauto_ = value;
}

// optional bool isSetSuccess = 2;
inline bool GS2C_Auto_Combat::has_issetsuccess() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Auto_Combat::set_has_issetsuccess() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Auto_Combat::clear_has_issetsuccess() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Auto_Combat::clear_issetsuccess() {
  issetsuccess_ = false;
  clear_has_issetsuccess();
}
inline bool GS2C_Auto_Combat::issetsuccess() const {
  return issetsuccess_;
}
inline void GS2C_Auto_Combat::set_issetsuccess(bool value) {
  set_has_issetsuccess();
  issetsuccess_ = value;
}

// -------------------------------------------------------------------

// C2GS_Quick_Combat

// optional uint32 group_id = 1;
inline bool C2GS_Quick_Combat::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Quick_Combat::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Quick_Combat::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Quick_Combat::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Quick_Combat::group_id() const {
  return group_id_;
}
inline void C2GS_Quick_Combat::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Quick_Combat

// optional bool ret = 1;
inline bool GS2C_Quick_Combat::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Quick_Combat::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Quick_Combat::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Quick_Combat::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool GS2C_Quick_Combat::ret() const {
  return ret_;
}
inline void GS2C_Quick_Combat::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 group_id = 2;
inline bool GS2C_Quick_Combat::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Quick_Combat::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Quick_Combat::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Quick_Combat::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Quick_Combat::group_id() const {
  return group_id_;
}
inline void GS2C_Quick_Combat::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Hero_Status

// required uint32 hero_tid = 1;
inline bool C2GS_Combat_Hero_Status::has_hero_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Hero_Status::set_has_hero_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Hero_Status::clear_has_hero_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Hero_Status::clear_hero_tid() {
  hero_tid_ = 0u;
  clear_has_hero_tid();
}
inline ::google::protobuf::uint32 C2GS_Combat_Hero_Status::hero_tid() const {
  return hero_tid_;
}
inline void C2GS_Combat_Hero_Status::set_hero_tid(::google::protobuf::uint32 value) {
  set_has_hero_tid();
  hero_tid_ = value;
}

// optional bool isFakeChar = 2;
inline bool C2GS_Combat_Hero_Status::has_isfakechar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Hero_Status::set_has_isfakechar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Hero_Status::clear_has_isfakechar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Hero_Status::clear_isfakechar() {
  isfakechar_ = false;
  clear_has_isfakechar();
}
inline bool C2GS_Combat_Hero_Status::isfakechar() const {
  return isfakechar_;
}
inline void C2GS_Combat_Hero_Status::set_isfakechar(bool value) {
  set_has_isfakechar();
  isfakechar_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Hero_Status

// required uint32 hero_tid = 1;
inline bool GS2C_Combat_Hero_Status::has_hero_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_hero_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Hero_Status::clear_has_hero_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Hero_Status::clear_hero_tid() {
  hero_tid_ = 0u;
  clear_has_hero_tid();
}
inline ::google::protobuf::uint32 GS2C_Combat_Hero_Status::hero_tid() const {
  return hero_tid_;
}
inline void GS2C_Combat_Hero_Status::set_hero_tid(::google::protobuf::uint32 value) {
  set_has_hero_tid();
  hero_tid_ = value;
}

// optional bool is_in_combat = 2;
inline bool GS2C_Combat_Hero_Status::has_is_in_combat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_is_in_combat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Hero_Status::clear_has_is_in_combat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Hero_Status::clear_is_in_combat() {
  is_in_combat_ = false;
  clear_has_is_in_combat();
}
inline bool GS2C_Combat_Hero_Status::is_in_combat() const {
  return is_in_combat_;
}
inline void GS2C_Combat_Hero_Status::set_is_in_combat(bool value) {
  set_has_is_in_combat();
  is_in_combat_ = value;
}

// optional bool is_fighting = 3;
inline bool GS2C_Combat_Hero_Status::has_is_fighting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_is_fighting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Hero_Status::clear_has_is_fighting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Hero_Status::clear_is_fighting() {
  is_fighting_ = false;
  clear_has_is_fighting();
}
inline bool GS2C_Combat_Hero_Status::is_fighting() const {
  return is_fighting_;
}
inline void GS2C_Combat_Hero_Status::set_is_fighting(bool value) {
  set_has_is_fighting();
  is_fighting_ = value;
}

// optional bool is_dead = 4;
inline bool GS2C_Combat_Hero_Status::has_is_dead() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_is_dead() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Hero_Status::clear_has_is_dead() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Hero_Status::clear_is_dead() {
  is_dead_ = false;
  clear_has_is_dead();
}
inline bool GS2C_Combat_Hero_Status::is_dead() const {
  return is_dead_;
}
inline void GS2C_Combat_Hero_Status::set_is_dead(bool value) {
  set_has_is_dead();
  is_dead_ = value;
}

// optional uint32 combat_type = 5;
inline bool GS2C_Combat_Hero_Status::has_combat_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_combat_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Hero_Status::clear_has_combat_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Hero_Status::clear_combat_type() {
  combat_type_ = 0u;
  clear_has_combat_type();
}
inline ::google::protobuf::uint32 GS2C_Combat_Hero_Status::combat_type() const {
  return combat_type_;
}
inline void GS2C_Combat_Hero_Status::set_combat_type(::google::protobuf::uint32 value) {
  set_has_combat_type();
  combat_type_ = value;
}

// optional uint32 group_id = 6;
inline bool GS2C_Combat_Hero_Status::has_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Combat_Hero_Status::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Combat_Hero_Status::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Hero_Status::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Hero_Status::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional bool is_in_attract = 7;
inline bool GS2C_Combat_Hero_Status::has_is_in_attract() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_is_in_attract() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Combat_Hero_Status::clear_has_is_in_attract() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Combat_Hero_Status::clear_is_in_attract() {
  is_in_attract_ = false;
  clear_has_is_in_attract();
}
inline bool GS2C_Combat_Hero_Status::is_in_attract() const {
  return is_in_attract_;
}
inline void GS2C_Combat_Hero_Status::set_is_in_attract(bool value) {
  set_has_is_in_attract();
  is_in_attract_ = value;
}

// optional uint32 cityId = 8;
inline bool GS2C_Combat_Hero_Status::has_cityid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_cityid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Combat_Hero_Status::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Combat_Hero_Status::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 GS2C_Combat_Hero_Status::cityid() const {
  return cityid_;
}
inline void GS2C_Combat_Hero_Status::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
}

// optional bool isFakeChar = 9;
inline bool GS2C_Combat_Hero_Status::has_isfakechar() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_Combat_Hero_Status::set_has_isfakechar() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_Combat_Hero_Status::clear_has_isfakechar() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_Combat_Hero_Status::clear_isfakechar() {
  isfakechar_ = false;
  clear_has_isfakechar();
}
inline bool GS2C_Combat_Hero_Status::isfakechar() const {
  return isfakechar_;
}
inline void GS2C_Combat_Hero_Status::set_isfakechar(bool value) {
  set_has_isfakechar();
  isfakechar_ = value;
}

// -------------------------------------------------------------------

// GxDB_Combat_Crusade

// required uint32 level_id = 1;
inline bool GxDB_Combat_Crusade::has_level_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_Combat_Crusade::set_has_level_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_Combat_Crusade::clear_has_level_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_Combat_Crusade::clear_level_id() {
  level_id_ = 0u;
  clear_has_level_id();
}
inline ::google::protobuf::uint32 GxDB_Combat_Crusade::level_id() const {
  return level_id_;
}
inline void GxDB_Combat_Crusade::set_level_id(::google::protobuf::uint32 value) {
  set_has_level_id();
  level_id_ = value;
}

// required uint32 stage_state = 2;
inline bool GxDB_Combat_Crusade::has_stage_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_Combat_Crusade::set_has_stage_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_Combat_Crusade::clear_has_stage_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_Combat_Crusade::clear_stage_state() {
  stage_state_ = 0u;
  clear_has_stage_state();
}
inline ::google::protobuf::uint32 GxDB_Combat_Crusade::stage_state() const {
  return stage_state_;
}
inline void GxDB_Combat_Crusade::set_stage_state(::google::protobuf::uint32 value) {
  set_has_stage_state();
  stage_state_ = value;
}

// required uint32 rewards_state = 3;
inline bool GxDB_Combat_Crusade::has_rewards_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_Combat_Crusade::set_has_rewards_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_Combat_Crusade::clear_has_rewards_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_Combat_Crusade::clear_rewards_state() {
  rewards_state_ = 0u;
  clear_has_rewards_state();
}
inline ::google::protobuf::uint32 GxDB_Combat_Crusade::rewards_state() const {
  return rewards_state_;
}
inline void GxDB_Combat_Crusade::set_rewards_state(::google::protobuf::uint32 value) {
  set_has_rewards_state();
  rewards_state_ = value;
}

// required uint32 reset_lefttimes = 4;
inline bool GxDB_Combat_Crusade::has_reset_lefttimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GxDB_Combat_Crusade::set_has_reset_lefttimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GxDB_Combat_Crusade::clear_has_reset_lefttimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GxDB_Combat_Crusade::clear_reset_lefttimes() {
  reset_lefttimes_ = 0u;
  clear_has_reset_lefttimes();
}
inline ::google::protobuf::uint32 GxDB_Combat_Crusade::reset_lefttimes() const {
  return reset_lefttimes_;
}
inline void GxDB_Combat_Crusade::set_reset_lefttimes(::google::protobuf::uint32 value) {
  set_has_reset_lefttimes();
  reset_lefttimes_ = value;
}

// required uint32 add_lefttimes = 5;
inline bool GxDB_Combat_Crusade::has_add_lefttimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GxDB_Combat_Crusade::set_has_add_lefttimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GxDB_Combat_Crusade::clear_has_add_lefttimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GxDB_Combat_Crusade::clear_add_lefttimes() {
  add_lefttimes_ = 0u;
  clear_has_add_lefttimes();
}
inline ::google::protobuf::uint32 GxDB_Combat_Crusade::add_lefttimes() const {
  return add_lefttimes_;
}
inline void GxDB_Combat_Crusade::set_add_lefttimes(::google::protobuf::uint32 value) {
  set_has_add_lefttimes();
  add_lefttimes_ = value;
}

// optional uint32 is_Crusade_over = 6;
inline bool GxDB_Combat_Crusade::has_is_crusade_over() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GxDB_Combat_Crusade::set_has_is_crusade_over() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GxDB_Combat_Crusade::clear_has_is_crusade_over() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GxDB_Combat_Crusade::clear_is_crusade_over() {
  is_crusade_over_ = 0u;
  clear_has_is_crusade_over();
}
inline ::google::protobuf::uint32 GxDB_Combat_Crusade::is_crusade_over() const {
  return is_crusade_over_;
}
inline void GxDB_Combat_Crusade::set_is_crusade_over(::google::protobuf::uint32 value) {
  set_has_is_crusade_over();
  is_crusade_over_ = value;
}

// repeated .pb.PairValue charTimeList = 7;
inline int GxDB_Combat_Crusade::chartimelist_size() const {
  return chartimelist_.size();
}
inline void GxDB_Combat_Crusade::clear_chartimelist() {
  chartimelist_.Clear();
}
inline const ::pb::PairValue& GxDB_Combat_Crusade::chartimelist(int index) const {
  return chartimelist_.Get(index);
}
inline ::pb::PairValue* GxDB_Combat_Crusade::mutable_chartimelist(int index) {
  return chartimelist_.Mutable(index);
}
inline ::pb::PairValue* GxDB_Combat_Crusade::add_chartimelist() {
  return chartimelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
GxDB_Combat_Crusade::chartimelist() const {
  return chartimelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
GxDB_Combat_Crusade::mutable_chartimelist() {
  return &chartimelist_;
}

// -------------------------------------------------------------------

// GS2C_Combat_Crusade

// required uint32 level_id = 1;
inline bool GS2C_Combat_Crusade::has_level_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Crusade::set_has_level_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Crusade::clear_has_level_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Crusade::clear_level_id() {
  level_id_ = 0u;
  clear_has_level_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Crusade::level_id() const {
  return level_id_;
}
inline void GS2C_Combat_Crusade::set_level_id(::google::protobuf::uint32 value) {
  set_has_level_id();
  level_id_ = value;
}

// required uint32 stage_state = 2;
inline bool GS2C_Combat_Crusade::has_stage_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Crusade::set_has_stage_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Crusade::clear_has_stage_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Crusade::clear_stage_state() {
  stage_state_ = 0u;
  clear_has_stage_state();
}
inline ::google::protobuf::uint32 GS2C_Combat_Crusade::stage_state() const {
  return stage_state_;
}
inline void GS2C_Combat_Crusade::set_stage_state(::google::protobuf::uint32 value) {
  set_has_stage_state();
  stage_state_ = value;
}

// required uint64 rewards_state = 3;
inline bool GS2C_Combat_Crusade::has_rewards_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Crusade::set_has_rewards_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Crusade::clear_has_rewards_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Crusade::clear_rewards_state() {
  rewards_state_ = GOOGLE_ULONGLONG(0);
  clear_has_rewards_state();
}
inline ::google::protobuf::uint64 GS2C_Combat_Crusade::rewards_state() const {
  return rewards_state_;
}
inline void GS2C_Combat_Crusade::set_rewards_state(::google::protobuf::uint64 value) {
  set_has_rewards_state();
  rewards_state_ = value;
}

// required uint32 reset_lefttimes = 4;
inline bool GS2C_Combat_Crusade::has_reset_lefttimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Crusade::set_has_reset_lefttimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Crusade::clear_has_reset_lefttimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Crusade::clear_reset_lefttimes() {
  reset_lefttimes_ = 0u;
  clear_has_reset_lefttimes();
}
inline ::google::protobuf::uint32 GS2C_Combat_Crusade::reset_lefttimes() const {
  return reset_lefttimes_;
}
inline void GS2C_Combat_Crusade::set_reset_lefttimes(::google::protobuf::uint32 value) {
  set_has_reset_lefttimes();
  reset_lefttimes_ = value;
}

// required uint32 add_lefttimes = 5;
inline bool GS2C_Combat_Crusade::has_add_lefttimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Crusade::set_has_add_lefttimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Crusade::clear_has_add_lefttimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Crusade::clear_add_lefttimes() {
  add_lefttimes_ = 0u;
  clear_has_add_lefttimes();
}
inline ::google::protobuf::uint32 GS2C_Combat_Crusade::add_lefttimes() const {
  return add_lefttimes_;
}
inline void GS2C_Combat_Crusade::set_add_lefttimes(::google::protobuf::uint32 value) {
  set_has_add_lefttimes();
  add_lefttimes_ = value;
}

// optional uint32 is_Crusade_over = 6;
inline bool GS2C_Combat_Crusade::has_is_crusade_over() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Combat_Crusade::set_has_is_crusade_over() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Combat_Crusade::clear_has_is_crusade_over() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Combat_Crusade::clear_is_crusade_over() {
  is_crusade_over_ = 0u;
  clear_has_is_crusade_over();
}
inline ::google::protobuf::uint32 GS2C_Combat_Crusade::is_crusade_over() const {
  return is_crusade_over_;
}
inline void GS2C_Combat_Crusade::set_is_crusade_over(::google::protobuf::uint32 value) {
  set_has_is_crusade_over();
  is_crusade_over_ = value;
}

// repeated .pb.PairValue charTimeList = 7;
inline int GS2C_Combat_Crusade::chartimelist_size() const {
  return chartimelist_.size();
}
inline void GS2C_Combat_Crusade::clear_chartimelist() {
  chartimelist_.Clear();
}
inline const ::pb::PairValue& GS2C_Combat_Crusade::chartimelist(int index) const {
  return chartimelist_.Get(index);
}
inline ::pb::PairValue* GS2C_Combat_Crusade::mutable_chartimelist(int index) {
  return chartimelist_.Mutable(index);
}
inline ::pb::PairValue* GS2C_Combat_Crusade::add_chartimelist() {
  return chartimelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
GS2C_Combat_Crusade::chartimelist() const {
  return chartimelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
GS2C_Combat_Crusade::mutable_chartimelist() {
  return &chartimelist_;
}

// -------------------------------------------------------------------

// Crusade_HeroInfo

// required uint32 hero_id = 1;
inline bool Crusade_HeroInfo::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Crusade_HeroInfo::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Crusade_HeroInfo::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Crusade_HeroInfo::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 Crusade_HeroInfo::hero_id() const {
  return hero_id_;
}
inline void Crusade_HeroInfo::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required uint32 lefttime = 2;
inline bool Crusade_HeroInfo::has_lefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Crusade_HeroInfo::set_has_lefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Crusade_HeroInfo::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Crusade_HeroInfo::clear_lefttime() {
  lefttime_ = 0u;
  clear_has_lefttime();
}
inline ::google::protobuf::uint32 Crusade_HeroInfo::lefttime() const {
  return lefttime_;
}
inline void Crusade_HeroInfo::set_lefttime(::google::protobuf::uint32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Crusade_Pre_Begin

// repeated .pb.Crusade_HeroInfo hero_info = 1;
inline int GS2C_Combat_Crusade_Pre_Begin::hero_info_size() const {
  return hero_info_.size();
}
inline void GS2C_Combat_Crusade_Pre_Begin::clear_hero_info() {
  hero_info_.Clear();
}
inline const ::pb::Crusade_HeroInfo& GS2C_Combat_Crusade_Pre_Begin::hero_info(int index) const {
  return hero_info_.Get(index);
}
inline ::pb::Crusade_HeroInfo* GS2C_Combat_Crusade_Pre_Begin::mutable_hero_info(int index) {
  return hero_info_.Mutable(index);
}
inline ::pb::Crusade_HeroInfo* GS2C_Combat_Crusade_Pre_Begin::add_hero_info() {
  return hero_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Crusade_HeroInfo >&
GS2C_Combat_Crusade_Pre_Begin::hero_info() const {
  return hero_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Crusade_HeroInfo >*
GS2C_Combat_Crusade_Pre_Begin::mutable_hero_info() {
  return &hero_info_;
}

// -------------------------------------------------------------------

// C2GS_Combat_Crusade_Add_Hero

// required uint32 group_id = 1;
inline bool C2GS_Combat_Crusade_Add_Hero::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Crusade_Add_Hero::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Crusade_Add_Hero::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Crusade_Add_Hero::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Crusade_Add_Hero::group_id() const {
  return group_id_;
}
inline void C2GS_Combat_Crusade_Add_Hero::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required uint32 hero_id = 2;
inline bool C2GS_Combat_Crusade_Add_Hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Crusade_Add_Hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Crusade_Add_Hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Crusade_Add_Hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 C2GS_Combat_Crusade_Add_Hero::hero_id() const {
  return hero_id_;
}
inline void C2GS_Combat_Crusade_Add_Hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Crusade_Take_Reward_Rsp

// required bool ret = 1;
inline bool GS2C_Crusade_Take_Reward_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Crusade_Take_Reward_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Crusade_Take_Reward_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Crusade_Take_Reward_Rsp::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool GS2C_Crusade_Take_Reward_Rsp::ret() const {
  return ret_;
}
inline void GS2C_Crusade_Take_Reward_Rsp::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
}

// repeated .pb.StReward reward = 2;
inline int GS2C_Crusade_Take_Reward_Rsp::reward_size() const {
  return reward_.size();
}
inline void GS2C_Crusade_Take_Reward_Rsp::clear_reward() {
  reward_.Clear();
}
inline const ::pb::StReward& GS2C_Crusade_Take_Reward_Rsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::pb::StReward* GS2C_Crusade_Take_Reward_Rsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::pb::StReward* GS2C_Crusade_Take_Reward_Rsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_Crusade_Take_Reward_Rsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_Crusade_Take_Reward_Rsp::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// C2GS_Combat_Crusade_Recover_Times

// repeated .pb.PairValue values = 1;
inline int C2GS_Combat_Crusade_Recover_Times::values_size() const {
  return values_.size();
}
inline void C2GS_Combat_Crusade_Recover_Times::clear_values() {
  values_.Clear();
}
inline const ::pb::PairValue& C2GS_Combat_Crusade_Recover_Times::values(int index) const {
  return values_.Get(index);
}
inline ::pb::PairValue* C2GS_Combat_Crusade_Recover_Times::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::pb::PairValue* C2GS_Combat_Crusade_Recover_Times::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
C2GS_Combat_Crusade_Recover_Times::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
C2GS_Combat_Crusade_Recover_Times::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// GS2C_Combat_Crusade_Add_Hero

// required bool bSuccess = 1;
inline bool GS2C_Combat_Crusade_Add_Hero::has_bsuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Crusade_Add_Hero::set_has_bsuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Crusade_Add_Hero::clear_has_bsuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Crusade_Add_Hero::clear_bsuccess() {
  bsuccess_ = false;
  clear_has_bsuccess();
}
inline bool GS2C_Combat_Crusade_Add_Hero::bsuccess() const {
  return bsuccess_;
}
inline void GS2C_Combat_Crusade_Add_Hero::set_bsuccess(bool value) {
  set_has_bsuccess();
  bsuccess_ = value;
}

// required uint32 hero_id = 2;
inline bool GS2C_Combat_Crusade_Add_Hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Crusade_Add_Hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Crusade_Add_Hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Crusade_Add_Hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Crusade_Add_Hero::hero_id() const {
  return hero_id_;
}
inline void GS2C_Combat_Crusade_Add_Hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required uint32 lefttime = 3;
inline bool GS2C_Combat_Crusade_Add_Hero::has_lefttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Crusade_Add_Hero::set_has_lefttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Crusade_Add_Hero::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Crusade_Add_Hero::clear_lefttime() {
  lefttime_ = 0u;
  clear_has_lefttime();
}
inline ::google::protobuf::uint32 GS2C_Combat_Crusade_Add_Hero::lefttime() const {
  return lefttime_;
}
inline void GS2C_Combat_Crusade_Add_Hero::set_lefttime(::google::protobuf::uint32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// required uint32 alllefttime = 4;
inline bool GS2C_Combat_Crusade_Add_Hero::has_alllefttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Crusade_Add_Hero::set_has_alllefttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Crusade_Add_Hero::clear_has_alllefttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Crusade_Add_Hero::clear_alllefttime() {
  alllefttime_ = 0u;
  clear_has_alllefttime();
}
inline ::google::protobuf::uint32 GS2C_Combat_Crusade_Add_Hero::alllefttime() const {
  return alllefttime_;
}
inline void GS2C_Combat_Crusade_Add_Hero::set_alllefttime(::google::protobuf::uint32 value) {
  set_has_alllefttime();
  alllefttime_ = value;
}

// -------------------------------------------------------------------

// C2GS_Combat_Try

// required uint32 combat_type = 1;
inline bool C2GS_Combat_Try::has_combat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Combat_Try::set_has_combat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Combat_Try::clear_has_combat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Combat_Try::clear_combat_type() {
  combat_type_ = 0u;
  clear_has_combat_type();
}
inline ::google::protobuf::uint32 C2GS_Combat_Try::combat_type() const {
  return combat_type_;
}
inline void C2GS_Combat_Try::set_combat_type(::google::protobuf::uint32 value) {
  set_has_combat_type();
  combat_type_ = value;
}

// optional uint32 assist_arg = 2;
inline bool C2GS_Combat_Try::has_assist_arg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Combat_Try::set_has_assist_arg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Combat_Try::clear_has_assist_arg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Combat_Try::clear_assist_arg() {
  assist_arg_ = 0u;
  clear_has_assist_arg();
}
inline ::google::protobuf::uint32 C2GS_Combat_Try::assist_arg() const {
  return assist_arg_;
}
inline void C2GS_Combat_Try::set_assist_arg(::google::protobuf::uint32 value) {
  set_has_assist_arg();
  assist_arg_ = value;
}

// -------------------------------------------------------------------

// GS2C_Combat_Try

// required uint32 result = 1;
inline bool GS2C_Combat_Try::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Combat_Try::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Combat_Try::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Combat_Try::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 GS2C_Combat_Try::result() const {
  return result_;
}
inline void GS2C_Combat_Try::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 combat_type = 2;
inline bool GS2C_Combat_Try::has_combat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Combat_Try::set_has_combat_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Combat_Try::clear_has_combat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Combat_Try::clear_combat_type() {
  combat_type_ = 0u;
  clear_has_combat_type();
}
inline ::google::protobuf::uint32 GS2C_Combat_Try::combat_type() const {
  return combat_type_;
}
inline void GS2C_Combat_Try::set_combat_type(::google::protobuf::uint32 value) {
  set_has_combat_type();
  combat_type_ = value;
}

// optional uint32 assist_arg = 3;
inline bool GS2C_Combat_Try::has_assist_arg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Combat_Try::set_has_assist_arg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Combat_Try::clear_has_assist_arg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Combat_Try::clear_assist_arg() {
  assist_arg_ = 0u;
  clear_has_assist_arg();
}
inline ::google::protobuf::uint32 GS2C_Combat_Try::assist_arg() const {
  return assist_arg_;
}
inline void GS2C_Combat_Try::set_assist_arg(::google::protobuf::uint32 value) {
  set_has_assist_arg();
  assist_arg_ = value;
}

// optional .pb.Msg_return_common errcode = 4;
inline bool GS2C_Combat_Try::has_errcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Combat_Try::set_has_errcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Combat_Try::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Combat_Try::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::pb::Msg_return_common GS2C_Combat_Try::errcode() const {
  return static_cast< ::pb::Msg_return_common >(errcode_);
}
inline void GS2C_Combat_Try::set_errcode(::pb::Msg_return_common value) {
  assert(::pb::Msg_return_common_IsValid(value));
  set_has_errcode();
  errcode_ = value;
}

// optional uint32 group_id = 5;
inline bool GS2C_Combat_Try::has_group_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Combat_Try::set_has_group_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Combat_Try::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Combat_Try::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Combat_Try::group_id() const {
  return group_id_;
}
inline void GS2C_Combat_Try::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Onekey_Recover_HP

// repeated uint32 heroid = 1;
inline int C2GS_Onekey_Recover_HP::heroid_size() const {
  return heroid_.size();
}
inline void C2GS_Onekey_Recover_HP::clear_heroid() {
  heroid_.Clear();
}
inline ::google::protobuf::uint32 C2GS_Onekey_Recover_HP::heroid(int index) const {
  return heroid_.Get(index);
}
inline void C2GS_Onekey_Recover_HP::set_heroid(int index, ::google::protobuf::uint32 value) {
  heroid_.Set(index, value);
}
inline void C2GS_Onekey_Recover_HP::add_heroid(::google::protobuf::uint32 value) {
  heroid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
C2GS_Onekey_Recover_HP::heroid() const {
  return heroid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
C2GS_Onekey_Recover_HP::mutable_heroid() {
  return &heroid_;
}

// -------------------------------------------------------------------

// C2GS_REQUEST_TERR

// required uint32 group_id = 1;
inline bool C2GS_REQUEST_TERR::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_REQUEST_TERR::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_REQUEST_TERR::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_REQUEST_TERR::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_REQUEST_TERR::group_id() const {
  return group_id_;
}
inline void C2GS_REQUEST_TERR::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_REQUEST_TERR_RET

// optional uint32 isGroupExist = 1;
inline bool GS2C_REQUEST_TERR_RET::has_isgroupexist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_REQUEST_TERR_RET::set_has_isgroupexist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_REQUEST_TERR_RET::clear_has_isgroupexist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_REQUEST_TERR_RET::clear_isgroupexist() {
  isgroupexist_ = 0u;
  clear_has_isgroupexist();
}
inline ::google::protobuf::uint32 GS2C_REQUEST_TERR_RET::isgroupexist() const {
  return isgroupexist_;
}
inline void GS2C_REQUEST_TERR_RET::set_isgroupexist(::google::protobuf::uint32 value) {
  set_has_isgroupexist();
  isgroupexist_ = value;
}

// optional uint32 terrainTyp = 2;
inline bool GS2C_REQUEST_TERR_RET::has_terraintyp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_REQUEST_TERR_RET::set_has_terraintyp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_REQUEST_TERR_RET::clear_has_terraintyp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_REQUEST_TERR_RET::clear_terraintyp() {
  terraintyp_ = 0u;
  clear_has_terraintyp();
}
inline ::google::protobuf::uint32 GS2C_REQUEST_TERR_RET::terraintyp() const {
  return terraintyp_;
}
inline void GS2C_REQUEST_TERR_RET::set_terraintyp(::google::protobuf::uint32 value) {
  set_has_terraintyp();
  terraintyp_ = value;
}

// -------------------------------------------------------------------

// C2GS_GetMyShadowNum

// optional uint32 group_id = 1;
inline bool C2GS_GetMyShadowNum::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GetMyShadowNum::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GetMyShadowNum::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GetMyShadowNum::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_GetMyShadowNum::group_id() const {
  return group_id_;
}
inline void C2GS_GetMyShadowNum::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional bool isattack = 2;
inline bool C2GS_GetMyShadowNum::has_isattack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GetMyShadowNum::set_has_isattack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GetMyShadowNum::clear_has_isattack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GetMyShadowNum::clear_isattack() {
  isattack_ = false;
  clear_has_isattack();
}
inline bool C2GS_GetMyShadowNum::isattack() const {
  return isattack_;
}
inline void C2GS_GetMyShadowNum::set_isattack(bool value) {
  set_has_isattack();
  isattack_ = value;
}

// -------------------------------------------------------------------

// GS2C_GetMyShadowNum

// optional uint32 shadownum = 1;
inline bool GS2C_GetMyShadowNum::has_shadownum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GetMyShadowNum::set_has_shadownum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GetMyShadowNum::clear_has_shadownum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GetMyShadowNum::clear_shadownum() {
  shadownum_ = 0u;
  clear_has_shadownum();
}
inline ::google::protobuf::uint32 GS2C_GetMyShadowNum::shadownum() const {
  return shadownum_;
}
inline void GS2C_GetMyShadowNum::set_shadownum(::google::protobuf::uint32 value) {
  set_has_shadownum();
  shadownum_ = value;
}

// -------------------------------------------------------------------

// GS2C_Add_Reinforce

// optional bool isatt = 1;
inline bool GS2C_Add_Reinforce::has_isatt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Add_Reinforce::set_has_isatt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Add_Reinforce::clear_has_isatt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Add_Reinforce::clear_isatt() {
  isatt_ = false;
  clear_has_isatt();
}
inline bool GS2C_Add_Reinforce::isatt() const {
  return isatt_;
}
inline void GS2C_Add_Reinforce::set_isatt(bool value) {
  set_has_isatt();
  isatt_ = value;
}

// optional uint32 afteridx = 2;
inline bool GS2C_Add_Reinforce::has_afteridx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Add_Reinforce::set_has_afteridx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Add_Reinforce::clear_has_afteridx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Add_Reinforce::clear_afteridx() {
  afteridx_ = 0u;
  clear_has_afteridx();
}
inline ::google::protobuf::uint32 GS2C_Add_Reinforce::afteridx() const {
  return afteridx_;
}
inline void GS2C_Add_Reinforce::set_afteridx(::google::protobuf::uint32 value) {
  set_has_afteridx();
  afteridx_ = value;
}

// optional .pb.Msg_CombatObj obj = 3;
inline bool GS2C_Add_Reinforce::has_obj() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Add_Reinforce::set_has_obj() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Add_Reinforce::clear_has_obj() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Add_Reinforce::clear_obj() {
  if (obj_ != NULL) obj_->::pb::Msg_CombatObj::Clear();
  clear_has_obj();
}
inline const ::pb::Msg_CombatObj& GS2C_Add_Reinforce::obj() const {
  return obj_ != NULL ? *obj_ : *default_instance_->obj_;
}
inline ::pb::Msg_CombatObj* GS2C_Add_Reinforce::mutable_obj() {
  set_has_obj();
  if (obj_ == NULL) obj_ = new ::pb::Msg_CombatObj;
  return obj_;
}
inline ::pb::Msg_CombatObj* GS2C_Add_Reinforce::release_obj() {
  clear_has_obj();
  ::pb::Msg_CombatObj* temp = obj_;
  obj_ = NULL;
  return temp;
}
inline void GS2C_Add_Reinforce::set_allocated_obj(::pb::Msg_CombatObj* obj) {
  delete obj_;
  obj_ = obj;
  if (obj) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
}

// optional uint32 group_id = 4;
inline bool GS2C_Add_Reinforce::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Add_Reinforce::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Add_Reinforce::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Add_Reinforce::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GS2C_Add_Reinforce::group_id() const {
  return group_id_;
}
inline void GS2C_Add_Reinforce::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Msg_ECombatTactic>() {
  return ::pb::Msg_ECombatTactic_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Msg_Records_Combat_Gains>() {
  return ::pb::Msg_Records_Combat_Gains_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Msg_return_common>() {
  return ::pb::Msg_return_common_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Combat_2eproto__INCLUDED
